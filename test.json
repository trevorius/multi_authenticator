{
  "name": "multi_authenticator",
  "type": "registry:block",
  "dependencies": [
    "@prisma/client",
    "@radix-ui/react-avatar",
    "@radix-ui/react-dialog",
    "@radix-ui/react-dropdown-menu",
    "@radix-ui/react-icons",
    "@radix-ui/react-label",
    "@radix-ui/react-slot",
    "@radix-ui/react-toast",
    "@types/bcryptjs",
    "bcryptjs",
    "class-variance-authority",
    "clsx",
    "jsqr",
    "lucide-react",
    "next-auth",
    "next-themes",
    "shadcn-differ",
    "tailwind-merge",
    "tailwindcss-animate",
    "totp-generator"
  ],
  "devDependencies": [
    "autoprefixer",
    "prisma"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "./.env.example",
      "content": "DATABASE_URL=\"file:./dev.db\"\r\nNEXTAUTH_SECRET=\"your-nextauth-secret\"\r\nNEXTAUTH_URL=\"http://localhost:3030\"\r\nAUTH_TRUST_HOST=http://localhost:3030\r\nGITHUB_ID=\"your-github-id\"\r\nGITHUB_SECRET=\"your-github-secret\"\r\nGOOGLE_CLIENT_ID=\"your-google-client-id\"\r\nGOOGLE_CLIENT_SECRET=\"your-google-client-secret\"\r\n\r\n",
      "type": "registry:example",
      "target": "~/.env.example"
    },
    {
      "path": "./.gitignore",
      "content": "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\r\n\r\n# dependencies\r\n/node_modules\r\n/.pnp\r\n.pnp.js\r\n.yarn/install-state.gz\r\n\r\n# testing\r\n/coverage\r\n\r\n# next.js\r\n/.next/\r\n/out/\r\n\r\n# production\r\n/build\r\n\r\n# misc\r\n.DS_Store\r\n*.pem\r\n\r\n# debug\r\nnpm-debug.log*\r\nyarn-debug.log*\r\nyarn-error.log*\r\n\r\n# local env files\r\n.env*.local\r\n.env.**\r\n.env\r\n!.env.example\r\n\r\n\r\n# vercel\r\n.vercel\r\n\r\n# typescript\r\n*.tsbuildinfo\r\n# next-env.d.ts\r\nprisma/dev.db\r\nprisma/dev.db-journal\r\n\r\n# jetbrains\r\n/.idea/\r\n",
      "type": "registry:example",
      "target": "~/.gitignore"
    },
    {
      "path": "./authWithCredentials.json",
      "content": "{\r\n  \"name\": \"2fa-totp\",\r\n  \"type\": \"registry:block\",\r\n  \"dependencies\": [\r\n    \"@prisma/client\",\r\n    \"@radix-ui/react-icons\",\r\n    \"@radix-ui/react-label\",\r\n    \"@radix-ui/react-slot\",\r\n    \"@radix-ui/react-toast\",\r\n    \"@types/bcryptjs\",\r\n    \"bcryptjs\",\r\n    \"class-variance-authority\",\r\n    \"clsx\",\r\n    \"lucide-react\",\r\n    \"next-auth\",\r\n    \"tailwind-merge\",\r\n    \"tailwindcss-animate\"\r\n  ],\r\n  \"devDependencies\": [\r\n    \"autoprefixer\",\r\n    \"prisma\"\r\n  ],\r\n  \"registryDependencies\": [\r\n    \"alert\",\r\n    \"button\",\r\n    \"card\",\r\n    \"input\",\r\n    \"label\",\r\n    \"toast\"\r\n  ],\r\n  \"files\": [\r\n    {\r\n      \"path\": \"./.gitignore\",\r\n      \"content\": \"# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\\n\\n# dependencies\\n/node_modules\\n/.pnp\\n.pnp.js\\n.yarn/install-state.gz\\n\\n# testing\\n/coverage\\n\\n# next.js\\n/.next/\\n/out/\\n\\n# production\\n/build\\n\\n# misc\\n.DS_Store\\n*.pem\\n\\n# debug\\nnpm-debug.log*\\nyarn-debug.log*\\nyarn-error.log*\\n\\n# local env files\\n.env*.local\\n.env.**\\n.env\\n\\n# vercel\\n.vercel\\n\\n# typescript\\n*.tsbuildinfo\\n# next-env.d.ts\\nprisma/dev.db\\nprisma/dev.db-journal\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/.gitignore\"\r\n    },\r\n    {\r\n      \"path\": \"./README.md\",\r\n      \"content\": \"This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\\n\\n## Getting Started\\n\\nFirst, run the development server:\\n\\n```bash\\nnpm run dev\\n# or\\nyarn dev\\n# or\\npnpm dev\\n# or\\nbun dev\\n```\\n\\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\\n\\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\\n\\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\\n\\n## Learn More\\n\\nTo learn more about Next.js, take a look at the following resources:\\n\\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\\n\\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\\n\\n## Deploy on Vercel\\n\\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\\n\\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/README.md\"\r\n    },\r\n    {\r\n      \"path\": \"./authWithCredentials.json\",\r\n      \"content\": \"\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/authWithCredentials.json\"\r\n    },\r\n    {\r\n      \"path\": \"./postcss.config.js\",\r\n      \"content\": \"module.exports = {\\n  plugins: {\\n    tailwindcss: {},\\n    autoprefixer: {},\\n  },\\n}\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/postcss.config.js\"\r\n    },\r\n    {\r\n      \"path\": \"./prisma/migrations/20241014112709_init/migration.sql\",\r\n      \"content\": \"-- CreateTable\\nCREATE TABLE \\\"User\\\" (\\n    \\\"id\\\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\\n    \\\"email\\\" TEXT NOT NULL,\\n    \\\"username\\\" TEXT NOT NULL,\\n    \\\"name\\\" TEXT\\n);\\n\\n-- CreateIndex\\nCREATE UNIQUE INDEX \\\"User_email_key\\\" ON \\\"User\\\"(\\\"email\\\");\\n\\n-- CreateIndex\\nCREATE UNIQUE INDEX \\\"User_username_key\\\" ON \\\"User\\\"(\\\"username\\\");\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/prisma/migrations/20241014112709_init/migration.sql\"\r\n    },\r\n    {\r\n      \"path\": \"./prisma/migrations/20241014115814_added_password_to_user/migration.sql\",\r\n      \"content\": \"/*\\n  Warnings:\\n\\n  - Added the required column `password` to the `User` table without a default value. This is not possible if the table is not empty.\\n\\n*/\\n-- RedefineTables\\nPRAGMA defer_foreign_keys=ON;\\nPRAGMA foreign_keys=OFF;\\nCREATE TABLE \\\"new_User\\\" (\\n    \\\"id\\\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\\n    \\\"email\\\" TEXT NOT NULL,\\n    \\\"username\\\" TEXT NOT NULL,\\n    \\\"name\\\" TEXT,\\n    \\\"password\\\" TEXT NOT NULL\\n);\\nINSERT INTO \\\"new_User\\\" (\\\"email\\\", \\\"id\\\", \\\"name\\\", \\\"username\\\") SELECT \\\"email\\\", \\\"id\\\", \\\"name\\\", \\\"username\\\" FROM \\\"User\\\";\\nDROP TABLE \\\"User\\\";\\nALTER TABLE \\\"new_User\\\" RENAME TO \\\"User\\\";\\nCREATE UNIQUE INDEX \\\"User_email_key\\\" ON \\\"User\\\"(\\\"email\\\");\\nCREATE UNIQUE INDEX \\\"User_username_key\\\" ON \\\"User\\\"(\\\"username\\\");\\nPRAGMA foreign_keys=ON;\\nPRAGMA defer_foreign_keys=OFF;\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/prisma/migrations/20241014115814_added_password_to_user/migration.sql\"\r\n    },\r\n    {\r\n      \"path\": \"./prisma/migrations/migration_lock.toml\",\r\n      \"content\": \"# Please do not edit this file manually\\n# It should be added in your version-control system (i.e. Git)\\nprovider = \\\"sqlite\\\"\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/prisma/migrations/migration_lock.toml\"\r\n    },\r\n    {\r\n      \"path\": \"./prisma/schema.prisma\",\r\n      \"content\": \"// This is your Prisma schema file,\\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\\n\\ngenerator client {\\n  provider = \\\"prisma-client-js\\\"\\n}\\n\\ndatasource db {\\n  provider = \\\"sqlite\\\"\\n  url      = env(\\\"DATABASE_URL\\\")\\n}\\n\\nmodel User {\\n  id    Int     @id @default(autoincrement())\\n  email String  @unique\\n  username String @unique\\n  name  String?\\n  password String\\n}\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/prisma/schema.prisma\"\r\n    },\r\n    {\r\n      \"path\": \"./app/api/auth/[...nextauth]/route.ts\",\r\n      \"content\": \"import { handlers } from \\\"@/auth\\\"\\n\\nexport const { GET, POST } = handlers\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./app/api/auth/[...nextauth]/route.ts\"\r\n    },\r\n    {\r\n      \"path\": \"./app/layout.tsx\",\r\n      \"content\": \"import { SessionProvider } from 'next-auth/react';\\r\\nimport '@/styles/global.css';\\r\\nimport { Toaster } from '@/components/ui/toaster';\\r\\n\\r\\nexport const metadata = {\\r\\n  title: 'Next.js',\\r\\n  description: 'Generated by Next.js',\\r\\n};\\r\\n\\r\\nexport default function RootLayout({\\r\\n  children,\\r\\n}: {\\r\\n  children: React.ReactNode;\\r\\n}) {\\r\\n  return (\\r\\n    <html lang='en'>\\r\\n      <body>\\r\\n        <SessionProvider>{children}</SessionProvider>\\r\\n        <Toaster />\\r\\n      </body>\\r\\n    </html>\\r\\n  );\\r\\n}\\r\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./app/layout.tsx\"\r\n    },\r\n    {\r\n      \"path\": \"./app/page.tsx\",\r\n      \"content\": \"import AuthStatus from '@/components/AuthStatus'\\n\\nexport default function Home() {\\n  return (\\n    <div>\\n      <h1>Welcome to my app</h1>\\n      <AuthStatus />\\n    </div>\\n  )\\n}\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./app/page.tsx\"\r\n    },\r\n    {\r\n      \"path\": \"./app/protected/dashboard/page.tsx\",\r\n      \"content\": \"import AuthStatus from '@/components/AuthStatus';\\n\\nexport default function Home() {\\n  return (\\n    <div>\\n      <h1>This route is protected</h1>\\n      <AuthStatus />\\n    </div>\\n  );\\n}\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./app/protected/dashboard/page.tsx\"\r\n    },\r\n    {\r\n      \"path\": \"./app/signin/page.tsx\",\r\n      \"content\": \"import SignInForm from '@/components/login/SignInForm';\\nimport SignupResult from '@/components/login/SignupResult';\\nexport default function SignInPage({\\n  searchParams,\\n}: {\\n  searchParams: { message: string };\\n}) {\\n  return (\\n    <div className='flex min-h-screen items-center justify-center bg-gray-100'>\\n      <SignupResult message={searchParams.message} />\\n      <SignInForm />\\n    </div>\\n  );\\n}\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./app/signin/page.tsx\"\r\n    },\r\n    {\r\n      \"path\": \"./app/signup/page.tsx\",\r\n      \"content\": \"import SignUpForm from \\\"@/components/login/SignupForm\\\"\\n\\n\\n\\nexport default function SignUpPage({\\n  searchParams\\n}: {\\n  searchParams: { message: string }\\n}) {\\n  return (\\n    <div>\\n      <SignUpForm searchParams={searchParams}/>\\n    </div>\\n  )\\n}\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./app/signup/page.tsx\"\r\n    },\r\n    {\r\n      \"path\": \"./auth.ts\",\r\n      \"content\": \"import NextAuth from \\\"next-auth\\\"\\nimport Credentials from \\\"next-auth/providers/credentials\\\"\\nimport bcrypt from 'bcryptjs'\\nimport prisma from \\\"@/services/prisma\\\"\\n\\nexport const { handlers, auth, signIn, signOut } = NextAuth({\\n  providers: [\\n    Credentials({\\n      // The name to display on the sign in form (e.g. \\\"Sign in with...\\\")\\n      name: \\\"Credentials\\\",\\n      // The credentials is used to generate a suitable form on the sign in page.\\n      // You can specify whatever fields you are expecting to be submitted.\\n      credentials: {\\n        username: { label: \\\"Username\\\", type: \\\"text\\\", placeholder: \\\"jsmith\\\" },\\n        password: { label: \\\"Password\\\", type: \\\"password\\\" }\\n      },\\n      authorize: async (credentials, request) => {\\n        // let user = null;\\n        \\n        // const AdminUser = { id: \\\"1\\\", name: \\\"Admin\\\",username: \\\"admin\\\", email: \\\"admin@example.com\\\", password: \\\"admin\\\" }\\n\\n        //   if (credentials.username === AdminUser.username && credentials.password === AdminUser.password) {\\n        //     return AdminUser\\n        //   }\\n        //   return null\\n\\n        if (!credentials?.username || !credentials?.password) {\\n          return null\\n        }\\n\\n        try {\\n          // Find the user in the database\\n          const user = await prisma.user.findUnique({\\n            where: { username: credentials.username }\\n          })\\n\\n          if (!user) {\\n            return null\\n          }\\n\\n          // Compare the provided password with the hashed password in the database\\n          const isPasswordValid = await bcrypt.compare(credentials.password, user.password)\\n\\n          if (!isPasswordValid) {\\n            return null\\n          }\\n\\n          // Return user object if validation is successful\\n          return {\\n            id: user.id,\\n            name: user.name,\\n            username: user.username,\\n            email: user.email\\n          }\\n        } catch (error) {\\n          console.error('Error during authentication:', error)\\n          return null\\n        } finally {\\n          await prisma.$disconnect()\\n        }\\n\\n      }\\n\\n    \\n    })\\n  ],\\n})\\n\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./auth.ts\"\r\n    },\r\n    {\r\n      \"path\": \"./components/AuthStatus.tsx\",\r\n      \"content\": \"\\n'use client'\\n\\nimport { useSession } from \\\"next-auth/react\\\"\\nimport { signIn, signOut } from \\\"next-auth/react\\\"\\nimport Link from \\\"next/link\\\"\\n\\nexport default function AuthStatus() {\\n  const { data: session, status } = useSession()\\n\\n  if (status === \\\"loading\\\") {\\n    return <div>Loading...</div>\\n  }\\n\\n  if (status === \\\"unauthenticated\\\") {\\n    return (\\n      <div>\\n        <h2 className=\\\"text-2xl font-bold\\\">You are not signed in.</h2>\\n        <Link href=\\\"/signin\\\">\\n            <button className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\\\" >Sign In</button>\\n        </Link>\\n      </div>\\n    )\\n  }\\n\\n  return (\\n    <div>\\n      <h2 className=\\\"text-2xl font-bold\\\">Signed in as {session?.user?.name}</h2>\\n      <button className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\\\" onClick={() => signOut()}>Sign Out</button>\\n    </div>\\n  )\\n}\\n\",\r\n      \"type\": \"registry:block\"\r\n    },\r\n    {\r\n      \"path\": \"./components/login/SignInForm.tsx\",\r\n      \"content\": \"'use client';\\n\\nimport { useState } from 'react';\\nimport { signIn } from 'next-auth/react';\\nimport { useRouter, useSearchParams } from 'next/navigation';\\nimport { Button } from '@/components/ui/button';\\nimport { Input } from '@/components/ui/input';\\nimport {\\n  Card,\\n  CardHeader,\\n  CardTitle,\\n  CardContent,\\n  CardFooter,\\n} from '@/components/ui/card';\\nimport Link from 'next/link';\\n\\nexport default function SignInForm() {\\n  const [username, setUserName] = useState('');\\n  const [password, setPassword] = useState('');\\n  const [error, setError] = useState('');\\n  const router = useRouter();\\n  const searchParams = useSearchParams();\\n\\n  const callbackUrl = searchParams.get('callbackUrl') || '/';\\n\\n  const handleSubmit = async (e: React.FormEvent) => {\\n    e.preventDefault();\\n    setError('');\\n\\n    try {\\n      const result = await signIn('credentials', {\\n        redirect: false,\\n        username,\\n        password,\\n      });\\n\\n      if (result?.error) {\\n        setError('Invalid email or password');\\n      } else {\\n        router.push(callbackUrl); // Redirect to dashboard or home page\\n      }\\n    } catch (error) {\\n      setError('An error occurred. Please try again.');\\n    }\\n  };\\n\\n  return (\\n    <Card className='w-[350px]'>\\n      <CardHeader>\\n        <CardTitle>Sign In</CardTitle>\\n      </CardHeader>\\n      <CardContent>\\n        <form onSubmit={handleSubmit}>\\n          <div className='grid w-full items-center gap-4'>\\n            <div className='flex flex-col space-y-1.5'>\\n              <Input\\n                id='user-name'\\n                placeholder='user name'\\n                type='text'\\n                value={username}\\n                onChange={(e) => setUserName(e.target.value)}\\n                required\\n              />\\n            </div>\\n            <div className='flex flex-col space-y-1.5'>\\n              <Input\\n                id='password'\\n                placeholder='Password'\\n                type='password'\\n                value={password}\\n                onChange={(e) => setPassword(e.target.value)}\\n                required\\n              />\\n            </div>\\n          </div>\\n          {error && <p className='text-red-500 text-sm mt-2'>{error}</p>}\\n          <CardFooter className='flex justify-between px-0 pt-4'>\\n            <Button type='submit'>Sign In</Button>\\n          </CardFooter>\\n        </form>\\n      </CardContent>\\n      <CardFooter>\\n        <Link href='/signup' className='text-sm text-gray-500'>\\n          Don't have an account...?\\n          <Button variant='link' className='ps-3 text-blue-500 font-bold'>\\n            Sign Up\\n          </Button>\\n        </Link>\\n      </CardFooter>\\n    </Card>\\n  );\\n}\\n\",\r\n      \"type\": \"registry:block\"\r\n    },\r\n    {\r\n      \"path\": \"./components/login/SignupForm.tsx\",\r\n      \"content\": \"import { redirect } from 'next/navigation';\\nimport prisma from '@/services/prisma';\\nimport bcrypt from 'bcryptjs';\\nimport { Input } from '@/components/ui/input';\\nimport { Button } from '@/components/ui/button';\\nimport { Label } from '@/components/ui/label';\\nimport SignupResult from '@/components/login/SignupResult';\\nimport {\\n  Card,\\n  CardContent,\\n  CardDescription,\\n  CardFooter,\\n  CardHeader,\\n  CardTitle,\\n} from '@/components/ui/card';\\n\\nexport default function SignupForm({\\n  searchParams,\\n}: {\\n  searchParams: { message: string };\\n}) {\\n  async function signUp(formData: FormData) {\\n    'use server';\\n\\n    const name = formData.get('name') as string;\\n    const email = formData.get('email') as string;\\n    const username = formData.get('username') as string;\\n    const password = formData.get('password') as string;\\n\\n    if (!name || !email || !username || !password) {\\n      throw redirect('/signup?message=All fields are required');\\n      return;\\n    }\\n\\n    try {\\n      const hashedPassword = await bcrypt.hash(password, 10);\\n      await prisma.user.create({\\n        data: {\\n          name,\\n          email,\\n          username,\\n          password: hashedPassword,\\n        },\\n      });\\n    } catch (error) {\\n      console.error('Error creating user:', error);\\n      throw redirect('/signup?message=Failed to create user');\\n    }\\n    throw redirect('/signin?message=Sign up successful!');\\n  }\\n\\n  return (\\n    <div className='flex justify-center items-center h-screen'>\\n      <Card className='w-[350px] shadow-md'>\\n        <CardHeader>\\n          <CardTitle>Sign Up</CardTitle>\\n          <CardDescription>Create an account to get started</CardDescription>\\n        </CardHeader>\\n        <form action={signUp} className='space-y-4 max-w-md mx-auto'>\\n          <CardContent>\\n            <SignupResult message={searchParams.message} />\\n            <div>\\n              <Label htmlFor='name'>Name</Label>\\n              <Input\\n                type='text'\\n                id='name'\\n                name='name'\\n                placeholder='Name'\\n                required\\n              />\\n            </div>\\n            <div>\\n              <Label htmlFor='email'>Email</Label>\\n              <Input\\n                type='email'\\n                id='email'\\n                name='email'\\n                placeholder='Email'\\n                required\\n              />\\n            </div>\\n            <div>\\n              <Label htmlFor='username'>Username</Label>\\n              <Input\\n                type='text'\\n                id='username'\\n                name='username'\\n                placeholder='Username'\\n                required\\n              />\\n            </div>\\n            <div>\\n              <Label htmlFor='password'>Password</Label>\\n              <Input\\n                type='password'\\n                id='password'\\n                name='password'\\n                placeholder='Password'\\n                required\\n              />\\n            </div>\\n          </CardContent>\\n          <CardFooter>\\n            <Button type='submit' className='w-full'>\\n              Sign Up\\n            </Button>\\n          </CardFooter>\\n        </form>\\n      </Card>\\n    </div>\\n  );\\n}\\n\",\r\n      \"type\": \"registry:block\"\r\n    },\r\n    {\r\n      \"path\": \"./components/login/SignupResult.tsx\",\r\n      \"content\": \"'use client';\\n\\nimport { useEffect, useRef } from 'react';\\nimport { useToast } from '@/hooks/use-toast';\\n\\ninterface SignupResultProps {\\n  message?: string | null;\\n}\\n\\nexport default function SignupResult({ message }: SignupResultProps) {\\n  const { toast } = useToast();\\n  const toastShownRef = useRef(false);\\n\\n  useEffect(() => {\\n    if (message && !toastShownRef.current) {\\n      const isError = message.includes('Failed');\\n      console.log('Attempting to show toast:', { isError, message });\\n\\n      toast({\\n        title: isError ? 'Error' : 'Success',\\n        description: message,\\n        variant: isError ? 'destructive' : 'success',\\n        duration: 5000,\\n      });\\n\\n      toastShownRef.current = true;\\n    }\\n  }, [message, toast]);\\n\\n  return null; // This component doesn't render anything visible\\n}\\n\",\r\n      \"type\": \"registry:block\"\r\n    },\r\n    {\r\n      \"path\": \"./components/ui/toaster.tsx\",\r\n      \"content\": \"\\\"use client\\\"\\n\\nimport { useToast } from \\\"@/hooks/use-toast\\\"\\nimport {\\n  Toast,\\n  ToastClose,\\n  ToastDescription,\\n  ToastProvider,\\n  ToastTitle,\\n  ToastViewport,\\n} from \\\"@/components/ui/toast\\\"\\n\\nexport function Toaster() {\\n  const { toasts } = useToast()\\n\\n  return (\\n    <ToastProvider>\\n      {toasts.map(function ({ id, title, description, action, ...props }) {\\n        return (\\n          <Toast key={id} {...props}>\\n            <div className=\\\"grid gap-1\\\">\\n              {title && <ToastTitle>{title}</ToastTitle>}\\n              {description && (\\n                <ToastDescription>{description}</ToastDescription>\\n              )}\\n            </div>\\n            {action}\\n            <ToastClose />\\n          </Toast>\\n        )\\n      })}\\n      <ToastViewport />\\n    </ToastProvider>\\n  )\\n}\\n\",\r\n      \"type\": \"registry:ui\"\r\n    },\r\n    {\r\n      \"path\": \"./hooks/use-toast.ts\",\r\n      \"content\": \"\\\"use client\\\"\\n\\n// Inspired by react-hot-toast library\\nimport * as React from \\\"react\\\"\\n\\nimport type {\\n  ToastActionElement,\\n  ToastProps,\\n} from \\\"@/components/ui/toast\\\"\\n\\nconst TOAST_LIMIT = 1\\nconst TOAST_REMOVE_DELAY = 1000000\\n\\ntype ToasterToast = ToastProps & {\\n  id: string\\n  title?: React.ReactNode\\n  description?: React.ReactNode\\n  action?: ToastActionElement\\n}\\n\\nconst actionTypes = {\\n  ADD_TOAST: \\\"ADD_TOAST\\\",\\n  UPDATE_TOAST: \\\"UPDATE_TOAST\\\",\\n  DISMISS_TOAST: \\\"DISMISS_TOAST\\\",\\n  REMOVE_TOAST: \\\"REMOVE_TOAST\\\",\\n} as const\\n\\nlet count = 0\\n\\nfunction genId() {\\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\\n  return count.toString()\\n}\\n\\ntype ActionType = typeof actionTypes\\n\\ntype Action =\\n  | {\\n      type: ActionType[\\\"ADD_TOAST\\\"]\\n      toast: ToasterToast\\n    }\\n  | {\\n      type: ActionType[\\\"UPDATE_TOAST\\\"]\\n      toast: Partial<ToasterToast>\\n    }\\n  | {\\n      type: ActionType[\\\"DISMISS_TOAST\\\"]\\n      toastId?: ToasterToast[\\\"id\\\"]\\n    }\\n  | {\\n      type: ActionType[\\\"REMOVE_TOAST\\\"]\\n      toastId?: ToasterToast[\\\"id\\\"]\\n    }\\n\\ninterface State {\\n  toasts: ToasterToast[]\\n}\\n\\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\\n\\nconst addToRemoveQueue = (toastId: string) => {\\n  if (toastTimeouts.has(toastId)) {\\n    return\\n  }\\n\\n  const timeout = setTimeout(() => {\\n    toastTimeouts.delete(toastId)\\n    dispatch({\\n      type: \\\"REMOVE_TOAST\\\",\\n      toastId: toastId,\\n    })\\n  }, TOAST_REMOVE_DELAY)\\n\\n  toastTimeouts.set(toastId, timeout)\\n}\\n\\nexport const reducer = (state: State, action: Action): State => {\\n  switch (action.type) {\\n    case \\\"ADD_TOAST\\\":\\n      return {\\n        ...state,\\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\\n      }\\n\\n    case \\\"UPDATE_TOAST\\\":\\n      return {\\n        ...state,\\n        toasts: state.toasts.map((t) =>\\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\\n        ),\\n      }\\n\\n    case \\\"DISMISS_TOAST\\\": {\\n      const { toastId } = action\\n\\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\\n      // but I'll keep it here for simplicity\\n      if (toastId) {\\n        addToRemoveQueue(toastId)\\n      } else {\\n        state.toasts.forEach((toast) => {\\n          addToRemoveQueue(toast.id)\\n        })\\n      }\\n\\n      return {\\n        ...state,\\n        toasts: state.toasts.map((t) =>\\n          t.id === toastId || toastId === undefined\\n            ? {\\n                ...t,\\n                open: false,\\n              }\\n            : t\\n        ),\\n      }\\n    }\\n    case \\\"REMOVE_TOAST\\\":\\n      if (action.toastId === undefined) {\\n        return {\\n          ...state,\\n          toasts: [],\\n        }\\n      }\\n      return {\\n        ...state,\\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\\n      }\\n  }\\n}\\n\\nconst listeners: Array<(state: State) => void> = []\\n\\nlet memoryState: State = { toasts: [] }\\n\\nfunction dispatch(action: Action) {\\n  memoryState = reducer(memoryState, action)\\n  listeners.forEach((listener) => {\\n    listener(memoryState)\\n  })\\n}\\n\\ntype Toast = Omit<ToasterToast, \\\"id\\\">\\n\\nfunction toast({ ...props }: Toast) {\\n  const id = genId()\\n\\n  const update = (props: ToasterToast) =>\\n    dispatch({\\n      type: \\\"UPDATE_TOAST\\\",\\n      toast: { ...props, id },\\n    })\\n  const dismiss = () => dispatch({ type: \\\"DISMISS_TOAST\\\", toastId: id })\\n\\n  dispatch({\\n    type: \\\"ADD_TOAST\\\",\\n    toast: {\\n      ...props,\\n      id,\\n      open: true,\\n      onOpenChange: (open) => {\\n        if (!open) dismiss()\\n      },\\n    },\\n  })\\n\\n  return {\\n    id: id,\\n    dismiss,\\n    update,\\n  }\\n}\\n\\nfunction useToast() {\\n  const [state, setState] = React.useState<State>(memoryState)\\n\\n  React.useEffect(() => {\\n    listeners.push(setState)\\n    return () => {\\n      const index = listeners.indexOf(setState)\\n      if (index > -1) {\\n        listeners.splice(index, 1)\\n      }\\n    }\\n  }, [state])\\n\\n  return {\\n    ...state,\\n    toast,\\n    dismiss: (toastId?: string) => dispatch({ type: \\\"DISMISS_TOAST\\\", toastId }),\\n  }\\n}\\n\\nexport { useToast, toast }\\n\",\r\n      \"type\": \"registry:hook\"\r\n    },\r\n    {\r\n      \"path\": \"./lib/utils.ts\",\r\n      \"content\": \"import { clsx, type ClassValue } from \\\"clsx\\\"\\nimport { twMerge } from \\\"tailwind-merge\\\"\\n\\nexport function cn(...inputs: ClassValue[]) {\\n  return twMerge(clsx(inputs))\\n}\\n\",\r\n      \"type\": \"registry:lib\"\r\n    },\r\n    {\r\n      \"path\": \"./middleware.ts\",\r\n      \"content\": \"import { NextResponse } from 'next/server';\\nimport { auth } from '@/auth';\\n\\nexport default auth((req) => {\\n  const isProtectedRoute =\\n    req.nextUrl.pathname.startsWith('/protected') ||\\n    req.nextUrl.pathname.startsWith('/api/protected');\\n\\n  if (isProtectedRoute && !req.auth) {\\n    // Add the original URL as a callbackUrl query parameter\\n    const signInUrl = new URL('/signin', req.url);\\n\\n    signInUrl.searchParams.set('callbackUrl', req.nextUrl.pathname);\\n\\n    return NextResponse.redirect(signInUrl);\\n  }\\n});\\n\\nexport const config = {\\n  matcher: ['/((?!api|_next/static|_next/image|favicon.ico).*)'],\\n};\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./middleware.ts\"\r\n    },\r\n    {\r\n      \"path\": \"./services/prisma.ts\",\r\n      \"content\": \"import { PrismaClient } from \\\"@prisma/client\\\"\\n\\nconst prisma = new PrismaClient()\\n\\nexport default prisma\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./services/prisma.ts\"\r\n    },\r\n    {\r\n      \"path\": \"./styles/global.css\",\r\n      \"content\": \"@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n@layer base {\\n  :root {\\n    --background: 0 0% 100%;\\n    --foreground: 240 10% 3.9%;\\n    --card: 0 0% 100%;\\n    --card-foreground: 240 10% 3.9%;\\n    --popover: 0 0% 100%;\\n    --popover-foreground: 240 10% 3.9%;\\n    --primary: 240 5.9% 10%;\\n    --primary-foreground: 0 0% 98%;\\n    --secondary: 240 4.8% 95.9%;\\n    --secondary-foreground: 240 5.9% 10%;\\n    --muted: 240 4.8% 95.9%;\\n    --muted-foreground: 240 3.8% 46.1%;\\n    --accent: 240 4.8% 95.9%;\\n    --accent-foreground: 240 5.9% 10%;\\n    --destructive: 0 84.2% 60.2%;\\n    --destructive-foreground: 0 0% 98%;\\n    --border: 240 5.9% 90%;\\n    --input: 240 5.9% 90%;\\n    --ring: 240 10% 3.9%;\\n    --chart-1: 12 76% 61%;\\n    --chart-2: 173 58% 39%;\\n    --chart-3: 197 37% 24%;\\n    --chart-4: 43 74% 66%;\\n    --chart-5: 27 87% 67%;\\n    --radius: 0.5rem\\n  }\\n  .dark {\\n    --background: 240 10% 3.9%;\\n    --foreground: 0 0% 98%;\\n    --card: 240 10% 3.9%;\\n    --card-foreground: 0 0% 98%;\\n    --popover: 240 10% 3.9%;\\n    --popover-foreground: 0 0% 98%;\\n    --primary: 0 0% 98%;\\n    --primary-foreground: 240 5.9% 10%;\\n    --secondary: 240 3.7% 15.9%;\\n    --secondary-foreground: 0 0% 98%;\\n    --muted: 240 3.7% 15.9%;\\n    --muted-foreground: 240 5% 64.9%;\\n    --accent: 240 3.7% 15.9%;\\n    --accent-foreground: 0 0% 98%;\\n    --destructive: 0 62.8% 30.6%;\\n    --destructive-foreground: 0 0% 98%;\\n    --border: 240 3.7% 15.9%;\\n    --input: 240 3.7% 15.9%;\\n    --ring: 240 4.9% 83.9%;\\n    --chart-1: 220 70% 50%;\\n    --chart-2: 160 60% 45%;\\n    --chart-3: 30 80% 55%;\\n    --chart-4: 280 65% 60%;\\n    --chart-5: 340 75% 55%\\n  }\\n}\\n@layer base {\\n  * {\\n    @apply border-border;\\n  }\\n  body {\\n    @apply bg-background text-foreground;\\n  }\\n}\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./styles/global.css\"\r\n    },\r\n    {\r\n      \"path\": \"./tsconfig.json\",\r\n      \"content\": \"{\\n  \\\"compilerOptions\\\": {\\n    \\\"lib\\\": [\\\"dom\\\", \\\"dom.iterable\\\", \\\"esnext\\\"],\\n    \\\"allowJs\\\": true,\\n    \\\"skipLibCheck\\\": true,\\n    \\\"strict\\\": true,\\n    \\\"noEmit\\\": true,\\n    \\\"esModuleInterop\\\": true,\\n    \\\"module\\\": \\\"esnext\\\",\\n    \\\"moduleResolution\\\": \\\"bundler\\\",\\n    \\\"resolveJsonModule\\\": true,\\n    \\\"isolatedModules\\\": true,\\n    \\\"jsx\\\": \\\"preserve\\\",\\n    \\\"incremental\\\": true,\\n    \\\"plugins\\\": [\\n      {\\n        \\\"name\\\": \\\"next\\\"\\n      }\\n    ],\\n    \\\"paths\\\": {\\n      \\\"@/*\\\": [\\\"./src/*\\\"]\\n    }\\n  },\\n  \\\"include\\\": [\\\"next-env.d.ts\\\", \\\"**/*.ts\\\", \\\"**/*.tsx\\\", \\\".next/types/**/*.ts\\\"],\\n  \\\"exclude\\\": [\\\"node_modules\\\"]\\n}\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/tsconfig.json\"\r\n    }\r\n  ],\r\n  \"tailwind\": {},\r\n  \"cssVars\": {},\r\n  \"meta\": {}\r\n}\r\n",
      "type": "registry:example",
      "target": "~/authWithCredentials.json"
    },
    {
      "path": "./multi2FA.json",
      "content": "{\r\n  \"name\": \"2fa-totp\",\r\n  \"type\": \"registry:block\",\r\n  \"dependencies\": [\r\n    \"@prisma/client\",\r\n    \"@radix-ui/react-avatar\",\r\n    \"@radix-ui/react-dialog\",\r\n    \"@radix-ui/react-dropdown-menu\",\r\n    \"@radix-ui/react-icons\",\r\n    \"@radix-ui/react-label\",\r\n    \"@radix-ui/react-slot\",\r\n    \"@radix-ui/react-toast\",\r\n    \"@types/bcryptjs\",\r\n    \"bcryptjs\",\r\n    \"class-variance-authority\",\r\n    \"clsx\",\r\n    \"jsqr\",\r\n    \"lucide-react\",\r\n    \"next-auth\",\r\n    \"next-themes\",\r\n    \"tailwind-merge\",\r\n    \"tailwindcss-animate\",\r\n    \"totp-generator\"\r\n  ],\r\n  \"devDependencies\": [\r\n    \"autoprefixer\",\r\n    \"prisma\"\r\n  ],\r\n  \"registryDependencies\": [\r\n    \"alert\",\r\n    \"avatar\",\r\n    \"button\",\r\n    \"card\",\r\n    \"dropdown-menu\",\r\n    \"input\",\r\n    \"label\",\r\n    \"sheet\",\r\n    \"table\",\r\n    \"toast\"\r\n  ],\r\n  \"files\": [\r\n    {\r\n      \"path\": \"./.env.example\",\r\n      \"content\": \"DATABASE_URL=\\\"file:./dev.db\\\"\\nNEXTAUTH_SECRET=\\\"your-nextauth-secret\\\"\\nNEXTAUTH_URL=\\\"http://localhost:3030\\\"\\nAUTH_TRUST_HOST=http://localhost:3030\\nGITHUB_ID=\\\"your-github-id\\\"\\nGITHUB_SECRET=\\\"your-github-secret\\\"\\nGOOGLE_CLIENT_ID=\\\"your-google-client-id\\\"\\nGOOGLE_CLIENT_SECRET=\\\"your-google-client-secret\\\"\\n\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/.env.example\"\r\n    },\r\n    {\r\n      \"path\": \"./.gitignore\",\r\n      \"content\": \"# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\\r\\n\\r\\n# dependencies\\r\\n/node_modules\\r\\n/.pnp\\r\\n.pnp.js\\r\\n.yarn/install-state.gz\\r\\n\\r\\n# testing\\r\\n/coverage\\r\\n\\r\\n# next.js\\r\\n/.next/\\r\\n/out/\\r\\n\\r\\n# production\\r\\n/build\\r\\n\\r\\n# misc\\r\\n.DS_Store\\r\\n*.pem\\r\\n\\r\\n# debug\\r\\nnpm-debug.log*\\r\\nyarn-debug.log*\\r\\nyarn-error.log*\\r\\n\\r\\n# local env files\\r\\n.env*.local\\r\\n.env.**\\r\\n.env\\r\\n!.env.example\\r\\n\\r\\n\\r\\n# vercel\\r\\n.vercel\\r\\n\\r\\n# typescript\\r\\n*.tsbuildinfo\\r\\n# next-env.d.ts\\r\\nprisma/dev.db\\r\\nprisma/dev.db-journal\\r\\n\\r\\n# jetbrains\\r\\n/.idea/\\r\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/.gitignore\"\r\n    },\r\n    {\r\n      \"path\": \"./README.md\",\r\n      \"content\": \"This is a [Next.js](https://nextjs.org) project bootstrapped with [\\r\\n`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\\r\\n\\r\\n## Getting Started\\r\\n\\r\\n### install the project\\r\\n\\r\\nFirst, install the project:\\r\\n\\r\\n```bash\\r\\nnpm install\\r\\n```\\r\\n\\r\\ninstantiate sqlite database and migrate with prisma\\r\\n\\r\\n```bash\\r\\nnpx prisma migrate dev\\r\\n```\\r\\n\\r\\n### run the project in development\\r\\n\\r\\nFirst, run the development server:\\r\\n\\r\\n```bash\\r\\nnpm run dev\\r\\n# or\\r\\nyarn dev\\r\\n# or\\r\\npnpm dev\\r\\n# or\\r\\nbun dev\\r\\n```\\r\\n\\r\\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\\r\\n\\r\\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\\r\\n\\r\\n## Dependencies\\r\\n\\r\\n### backend\\r\\n\\r\\n- [Prisma](https://www.prisma.io/)\\r\\n\\r\\n### frontend\\r\\n\\r\\n- [React](https://reactjs.org/)\\r\\n- [Next.js](https://nextjs.org)\\r\\n- [Tailwind CSS](https://tailwindcss.com/)\\r\\n- [ShadcnUi](https://shadcn-ui.vercel.app/)\\r\\n\\r\\n## run the project\\r\\n\\r\\nbuild the project first\\r\\n\\r\\n```bash\\r\\nnpm run build\\r\\nnpm start\\r\\n```\\r\\n\\r\\n### .bat option\\r\\n\\r\\nin the project root there is a .bat file edit with the folder path and it can be placed as a shortcut it will open your browser on the correct port.\\r\\n\\r\\n### build a boilerplate\\r\\n\\r\\ngenerate the json to serve :\\r\\n\\r\\n```bash\\r\\nnpx shadcn-differ@latest > multi2FA.json\\r\\n```\\r\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/README.md\"\r\n    },\r\n    {\r\n      \"path\": \"./authWithCredentials.json\",\r\n      \"content\": \"{\\n  \\\"name\\\": \\\"2fa-totp\\\",\\n  \\\"type\\\": \\\"registry:block\\\",\\n  \\\"dependencies\\\": [\\n    \\\"@prisma/client\\\",\\n    \\\"@radix-ui/react-icons\\\",\\n    \\\"@radix-ui/react-label\\\",\\n    \\\"@radix-ui/react-slot\\\",\\n    \\\"@radix-ui/react-toast\\\",\\n    \\\"@types/bcryptjs\\\",\\n    \\\"bcryptjs\\\",\\n    \\\"class-variance-authority\\\",\\n    \\\"clsx\\\",\\n    \\\"lucide-react\\\",\\n    \\\"next-auth\\\",\\n    \\\"tailwind-merge\\\",\\n    \\\"tailwindcss-animate\\\"\\n  ],\\n  \\\"devDependencies\\\": [\\n    \\\"autoprefixer\\\",\\n    \\\"prisma\\\"\\n  ],\\n  \\\"registryDependencies\\\": [\\n    \\\"alert\\\",\\n    \\\"button\\\",\\n    \\\"card\\\",\\n    \\\"input\\\",\\n    \\\"label\\\",\\n    \\\"toast\\\"\\n  ],\\n  \\\"files\\\": [\\n    {\\n      \\\"path\\\": \\\"./.gitignore\\\",\\n      \\\"content\\\": \\\"# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\\\\n\\\\n# dependencies\\\\n/node_modules\\\\n/.pnp\\\\n.pnp.js\\\\n.yarn/install-state.gz\\\\n\\\\n# testing\\\\n/coverage\\\\n\\\\n# next.js\\\\n/.next/\\\\n/out/\\\\n\\\\n# production\\\\n/build\\\\n\\\\n# misc\\\\n.DS_Store\\\\n*.pem\\\\n\\\\n# debug\\\\nnpm-debug.log*\\\\nyarn-debug.log*\\\\nyarn-error.log*\\\\n\\\\n# local env files\\\\n.env*.local\\\\n.env.**\\\\n.env\\\\n\\\\n# vercel\\\\n.vercel\\\\n\\\\n# typescript\\\\n*.tsbuildinfo\\\\n# next-env.d.ts\\\\nprisma/dev.db\\\\nprisma/dev.db-journal\\\\n\\\",\\n      \\\"type\\\": \\\"registry:example\\\",\\n      \\\"target\\\": \\\"~/.gitignore\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./README.md\\\",\\n      \\\"content\\\": \\\"This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\\\\n\\\\n## Getting Started\\\\n\\\\nFirst, run the development server:\\\\n\\\\n```bash\\\\nnpm run dev\\\\n# or\\\\nyarn dev\\\\n# or\\\\npnpm dev\\\\n# or\\\\nbun dev\\\\n```\\\\n\\\\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\\\\n\\\\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\\\\n\\\\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\\\\n\\\\n## Learn More\\\\n\\\\nTo learn more about Next.js, take a look at the following resources:\\\\n\\\\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\\\\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\\\\n\\\\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\\\\n\\\\n## Deploy on Vercel\\\\n\\\\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\\\\n\\\\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\\\\n\\\",\\n      \\\"type\\\": \\\"registry:example\\\",\\n      \\\"target\\\": \\\"~/README.md\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./authWithCredentials.json\\\",\\n      \\\"content\\\": \\\"\\\",\\n      \\\"type\\\": \\\"registry:example\\\",\\n      \\\"target\\\": \\\"~/authWithCredentials.json\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./postcss.config.js\\\",\\n      \\\"content\\\": \\\"module.exports = {\\\\n  plugins: {\\\\n    tailwindcss: {},\\\\n    autoprefixer: {},\\\\n  },\\\\n}\\\\n\\\",\\n      \\\"type\\\": \\\"registry:example\\\",\\n      \\\"target\\\": \\\"~/postcss.config.js\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./prisma/migrations/20241014112709_init/migration.sql\\\",\\n      \\\"content\\\": \\\"-- CreateTable\\\\nCREATE TABLE \\\\\\\"User\\\\\\\" (\\\\n    \\\\\\\"id\\\\\\\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\\\\n    \\\\\\\"email\\\\\\\" TEXT NOT NULL,\\\\n    \\\\\\\"username\\\\\\\" TEXT NOT NULL,\\\\n    \\\\\\\"name\\\\\\\" TEXT\\\\n);\\\\n\\\\n-- CreateIndex\\\\nCREATE UNIQUE INDEX \\\\\\\"User_email_key\\\\\\\" ON \\\\\\\"User\\\\\\\"(\\\\\\\"email\\\\\\\");\\\\n\\\\n-- CreateIndex\\\\nCREATE UNIQUE INDEX \\\\\\\"User_username_key\\\\\\\" ON \\\\\\\"User\\\\\\\"(\\\\\\\"username\\\\\\\");\\\\n\\\",\\n      \\\"type\\\": \\\"registry:example\\\",\\n      \\\"target\\\": \\\"~/prisma/migrations/20241014112709_init/migration.sql\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./prisma/migrations/20241014115814_added_password_to_user/migration.sql\\\",\\n      \\\"content\\\": \\\"/*\\\\n  Warnings:\\\\n\\\\n  - Added the required column `password` to the `User` table without a default value. This is not possible if the table is not empty.\\\\n\\\\n*/\\\\n-- RedefineTables\\\\nPRAGMA defer_foreign_keys=ON;\\\\nPRAGMA foreign_keys=OFF;\\\\nCREATE TABLE \\\\\\\"new_User\\\\\\\" (\\\\n    \\\\\\\"id\\\\\\\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\\\\n    \\\\\\\"email\\\\\\\" TEXT NOT NULL,\\\\n    \\\\\\\"username\\\\\\\" TEXT NOT NULL,\\\\n    \\\\\\\"name\\\\\\\" TEXT,\\\\n    \\\\\\\"password\\\\\\\" TEXT NOT NULL\\\\n);\\\\nINSERT INTO \\\\\\\"new_User\\\\\\\" (\\\\\\\"email\\\\\\\", \\\\\\\"id\\\\\\\", \\\\\\\"name\\\\\\\", \\\\\\\"username\\\\\\\") SELECT \\\\\\\"email\\\\\\\", \\\\\\\"id\\\\\\\", \\\\\\\"name\\\\\\\", \\\\\\\"username\\\\\\\" FROM \\\\\\\"User\\\\\\\";\\\\nDROP TABLE \\\\\\\"User\\\\\\\";\\\\nALTER TABLE \\\\\\\"new_User\\\\\\\" RENAME TO \\\\\\\"User\\\\\\\";\\\\nCREATE UNIQUE INDEX \\\\\\\"User_email_key\\\\\\\" ON \\\\\\\"User\\\\\\\"(\\\\\\\"email\\\\\\\");\\\\nCREATE UNIQUE INDEX \\\\\\\"User_username_key\\\\\\\" ON \\\\\\\"User\\\\\\\"(\\\\\\\"username\\\\\\\");\\\\nPRAGMA foreign_keys=ON;\\\\nPRAGMA defer_foreign_keys=OFF;\\\\n\\\",\\n      \\\"type\\\": \\\"registry:example\\\",\\n      \\\"target\\\": \\\"~/prisma/migrations/20241014115814_added_password_to_user/migration.sql\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./prisma/migrations/migration_lock.toml\\\",\\n      \\\"content\\\": \\\"# Please do not edit this file manually\\\\n# It should be added in your version-control system (i.e. Git)\\\\nprovider = \\\\\\\"sqlite\\\\\\\"\\\",\\n      \\\"type\\\": \\\"registry:example\\\",\\n      \\\"target\\\": \\\"~/prisma/migrations/migration_lock.toml\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./prisma/schema.prisma\\\",\\n      \\\"content\\\": \\\"// This is your Prisma schema file,\\\\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\\\\n\\\\ngenerator client {\\\\n  provider = \\\\\\\"prisma-client-js\\\\\\\"\\\\n}\\\\n\\\\ndatasource db {\\\\n  provider = \\\\\\\"sqlite\\\\\\\"\\\\n  url      = env(\\\\\\\"DATABASE_URL\\\\\\\")\\\\n}\\\\n\\\\nmodel User {\\\\n  id    Int     @id @default(autoincrement())\\\\n  email String  @unique\\\\n  username String @unique\\\\n  name  String?\\\\n  password String\\\\n}\\\",\\n      \\\"type\\\": \\\"registry:example\\\",\\n      \\\"target\\\": \\\"~/prisma/schema.prisma\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./app/api/auth/[...nextauth]/route.ts\\\",\\n      \\\"content\\\": \\\"import { handlers } from \\\\\\\"@/auth\\\\\\\"\\\\n\\\\nexport const { GET, POST } = handlers\\\\n\\\",\\n      \\\"type\\\": \\\"registry:example\\\",\\n      \\\"target\\\": \\\"./app/api/auth/[...nextauth]/route.ts\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./app/layout.tsx\\\",\\n      \\\"content\\\": \\\"import { SessionProvider } from 'next-auth/react';\\\\r\\\\nimport '@/styles/global.css';\\\\r\\\\nimport { Toaster } from '@/components/ui/toaster';\\\\r\\\\n\\\\r\\\\nexport const metadata = {\\\\r\\\\n  title: 'Next.js',\\\\r\\\\n  description: 'Generated by Next.js',\\\\r\\\\n};\\\\r\\\\n\\\\r\\\\nexport default function RootLayout({\\\\r\\\\n  children,\\\\r\\\\n}: {\\\\r\\\\n  children: React.ReactNode;\\\\r\\\\n}) {\\\\r\\\\n  return (\\\\r\\\\n    <html lang='en'>\\\\r\\\\n      <body>\\\\r\\\\n        <SessionProvider>{children}</SessionProvider>\\\\r\\\\n        <Toaster />\\\\r\\\\n      </body>\\\\r\\\\n    </html>\\\\r\\\\n  );\\\\r\\\\n}\\\\r\\\\n\\\",\\n      \\\"type\\\": \\\"registry:example\\\",\\n      \\\"target\\\": \\\"./app/layout.tsx\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./app/page.tsx\\\",\\n      \\\"content\\\": \\\"import AuthStatus from '@/components/AuthStatus'\\\\n\\\\nexport default function Home() {\\\\n  return (\\\\n    <div>\\\\n      <h1>Welcome to my app</h1>\\\\n      <AuthStatus />\\\\n    </div>\\\\n  )\\\\n}\\\\n\\\",\\n      \\\"type\\\": \\\"registry:example\\\",\\n      \\\"target\\\": \\\"./app/page.tsx\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./app/protected/dashboard/page.tsx\\\",\\n      \\\"content\\\": \\\"import AuthStatus from '@/components/AuthStatus';\\\\n\\\\nexport default function Home() {\\\\n  return (\\\\n    <div>\\\\n      <h1>This route is protected</h1>\\\\n      <AuthStatus />\\\\n    </div>\\\\n  );\\\\n}\\\\n\\\",\\n      \\\"type\\\": \\\"registry:example\\\",\\n      \\\"target\\\": \\\"./app/protected/dashboard/page.tsx\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./app/signin/page.tsx\\\",\\n      \\\"content\\\": \\\"import SignInForm from '@/components/login/SignInForm';\\\\nimport SignupResult from '@/components/login/SignupResult';\\\\nexport default function SignInPage({\\\\n  searchParams,\\\\n}: {\\\\n  searchParams: { message: string };\\\\n}) {\\\\n  return (\\\\n    <div className='flex min-h-screen items-center justify-center bg-gray-100'>\\\\n      <SignupResult message={searchParams.message} />\\\\n      <SignInForm />\\\\n    </div>\\\\n  );\\\\n}\\\\n\\\",\\n      \\\"type\\\": \\\"registry:example\\\",\\n      \\\"target\\\": \\\"./app/signin/page.tsx\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./app/signup/page.tsx\\\",\\n      \\\"content\\\": \\\"import SignUpForm from \\\\\\\"@/components/login/SignupForm\\\\\\\"\\\\n\\\\n\\\\n\\\\nexport default function SignUpPage({\\\\n  searchParams\\\\n}: {\\\\n  searchParams: { message: string }\\\\n}) {\\\\n  return (\\\\n    <div>\\\\n      <SignUpForm searchParams={searchParams}/>\\\\n    </div>\\\\n  )\\\\n}\\\",\\n      \\\"type\\\": \\\"registry:example\\\",\\n      \\\"target\\\": \\\"./app/signup/page.tsx\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./auth.ts\\\",\\n      \\\"content\\\": \\\"import NextAuth from \\\\\\\"next-auth\\\\\\\"\\\\nimport Credentials from \\\\\\\"next-auth/providers/credentials\\\\\\\"\\\\nimport bcrypt from 'bcryptjs'\\\\nimport prisma from \\\\\\\"@/services/prisma\\\\\\\"\\\\n\\\\nexport const { handlers, auth, signIn, signOut } = NextAuth({\\\\n  providers: [\\\\n    Credentials({\\\\n      // The name to display on the sign in form (e.g. \\\\\\\"Sign in with...\\\\\\\")\\\\n      name: \\\\\\\"Credentials\\\\\\\",\\\\n      // The credentials is used to generate a suitable form on the sign in page.\\\\n      // You can specify whatever fields you are expecting to be submitted.\\\\n      credentials: {\\\\n        username: { label: \\\\\\\"Username\\\\\\\", type: \\\\\\\"text\\\\\\\", placeholder: \\\\\\\"jsmith\\\\\\\" },\\\\n        password: { label: \\\\\\\"Password\\\\\\\", type: \\\\\\\"password\\\\\\\" }\\\\n      },\\\\n      authorize: async (credentials, request) => {\\\\n        // let user = null;\\\\n        \\\\n        // const AdminUser = { id: \\\\\\\"1\\\\\\\", name: \\\\\\\"Admin\\\\\\\",username: \\\\\\\"admin\\\\\\\", email: \\\\\\\"admin@example.com\\\\\\\", password: \\\\\\\"admin\\\\\\\" }\\\\n\\\\n        //   if (credentials.username === AdminUser.username && credentials.password === AdminUser.password) {\\\\n        //     return AdminUser\\\\n        //   }\\\\n        //   return null\\\\n\\\\n        if (!credentials?.username || !credentials?.password) {\\\\n          return null\\\\n        }\\\\n\\\\n        try {\\\\n          // Find the user in the database\\\\n          const user = await prisma.user.findUnique({\\\\n            where: { username: credentials.username }\\\\n          })\\\\n\\\\n          if (!user) {\\\\n            return null\\\\n          }\\\\n\\\\n          // Compare the provided password with the hashed password in the database\\\\n          const isPasswordValid = await bcrypt.compare(credentials.password, user.password)\\\\n\\\\n          if (!isPasswordValid) {\\\\n            return null\\\\n          }\\\\n\\\\n          // Return user object if validation is successful\\\\n          return {\\\\n            id: user.id,\\\\n            name: user.name,\\\\n            username: user.username,\\\\n            email: user.email\\\\n          }\\\\n        } catch (error) {\\\\n          console.error('Error during authentication:', error)\\\\n          return null\\\\n        } finally {\\\\n          await prisma.$disconnect()\\\\n        }\\\\n\\\\n      }\\\\n\\\\n    \\\\n    })\\\\n  ],\\\\n})\\\\n\\\\n\\\",\\n      \\\"type\\\": \\\"registry:example\\\",\\n      \\\"target\\\": \\\"./auth.ts\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./components/AuthStatus.tsx\\\",\\n      \\\"content\\\": \\\"\\\\n'use client'\\\\n\\\\nimport { useSession } from \\\\\\\"next-auth/react\\\\\\\"\\\\nimport { signIn, signOut } from \\\\\\\"next-auth/react\\\\\\\"\\\\nimport Link from \\\\\\\"next/link\\\\\\\"\\\\n\\\\nexport default function AuthStatus() {\\\\n  const { data: session, status } = useSession()\\\\n\\\\n  if (status === \\\\\\\"loading\\\\\\\") {\\\\n    return <div>Loading...</div>\\\\n  }\\\\n\\\\n  if (status === \\\\\\\"unauthenticated\\\\\\\") {\\\\n    return (\\\\n      <div>\\\\n        <h2 className=\\\\\\\"text-2xl font-bold\\\\\\\">You are not signed in.</h2>\\\\n        <Link href=\\\\\\\"/signin\\\\\\\">\\\\n            <button className=\\\\\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\\\\\\\" >Sign In</button>\\\\n        </Link>\\\\n      </div>\\\\n    )\\\\n  }\\\\n\\\\n  return (\\\\n    <div>\\\\n      <h2 className=\\\\\\\"text-2xl font-bold\\\\\\\">Signed in as {session?.user?.name}</h2>\\\\n      <button className=\\\\\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\\\\\\\" onClick={() => signOut()}>Sign Out</button>\\\\n    </div>\\\\n  )\\\\n}\\\\n\\\",\\n      \\\"type\\\": \\\"registry:block\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./components/login/SignInForm.tsx\\\",\\n      \\\"content\\\": \\\"'use client';\\\\n\\\\nimport { useState } from 'react';\\\\nimport { signIn } from 'next-auth/react';\\\\nimport { useRouter, useSearchParams } from 'next/navigation';\\\\nimport { Button } from '@/components/ui/button';\\\\nimport { Input } from '@/components/ui/input';\\\\nimport {\\\\n  Card,\\\\n  CardHeader,\\\\n  CardTitle,\\\\n  CardContent,\\\\n  CardFooter,\\\\n} from '@/components/ui/card';\\\\nimport Link from 'next/link';\\\\n\\\\nexport default function SignInForm() {\\\\n  const [username, setUserName] = useState('');\\\\n  const [password, setPassword] = useState('');\\\\n  const [error, setError] = useState('');\\\\n  const router = useRouter();\\\\n  const searchParams = useSearchParams();\\\\n\\\\n  const callbackUrl = searchParams.get('callbackUrl') || '/';\\\\n\\\\n  const handleSubmit = async (e: React.FormEvent) => {\\\\n    e.preventDefault();\\\\n    setError('');\\\\n\\\\n    try {\\\\n      const result = await signIn('credentials', {\\\\n        redirect: false,\\\\n        username,\\\\n        password,\\\\n      });\\\\n\\\\n      if (result?.error) {\\\\n        setError('Invalid email or password');\\\\n      } else {\\\\n        router.push(callbackUrl); // Redirect to dashboard or home page\\\\n      }\\\\n    } catch (error) {\\\\n      setError('An error occurred. Please try again.');\\\\n    }\\\\n  };\\\\n\\\\n  return (\\\\n    <Card className='w-[350px]'>\\\\n      <CardHeader>\\\\n        <CardTitle>Sign In</CardTitle>\\\\n      </CardHeader>\\\\n      <CardContent>\\\\n        <form onSubmit={handleSubmit}>\\\\n          <div className='grid w-full items-center gap-4'>\\\\n            <div className='flex flex-col space-y-1.5'>\\\\n              <Input\\\\n                id='user-name'\\\\n                placeholder='user name'\\\\n                type='text'\\\\n                value={username}\\\\n                onChange={(e) => setUserName(e.target.value)}\\\\n                required\\\\n              />\\\\n            </div>\\\\n            <div className='flex flex-col space-y-1.5'>\\\\n              <Input\\\\n                id='password'\\\\n                placeholder='Password'\\\\n                type='password'\\\\n                value={password}\\\\n                onChange={(e) => setPassword(e.target.value)}\\\\n                required\\\\n              />\\\\n            </div>\\\\n          </div>\\\\n          {error && <p className='text-red-500 text-sm mt-2'>{error}</p>}\\\\n          <CardFooter className='flex justify-between px-0 pt-4'>\\\\n            <Button type='submit'>Sign In</Button>\\\\n          </CardFooter>\\\\n        </form>\\\\n      </CardContent>\\\\n      <CardFooter>\\\\n        <Link href='/signup' className='text-sm text-gray-500'>\\\\n          Don't have an account...?\\\\n          <Button variant='link' className='ps-3 text-blue-500 font-bold'>\\\\n            Sign Up\\\\n          </Button>\\\\n        </Link>\\\\n      </CardFooter>\\\\n    </Card>\\\\n  );\\\\n}\\\\n\\\",\\n      \\\"type\\\": \\\"registry:block\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./components/login/SignupForm.tsx\\\",\\n      \\\"content\\\": \\\"import { redirect } from 'next/navigation';\\\\nimport prisma from '@/services/prisma';\\\\nimport bcrypt from 'bcryptjs';\\\\nimport { Input } from '@/components/ui/input';\\\\nimport { Button } from '@/components/ui/button';\\\\nimport { Label } from '@/components/ui/label';\\\\nimport SignupResult from '@/components/login/SignupResult';\\\\nimport {\\\\n  Card,\\\\n  CardContent,\\\\n  CardDescription,\\\\n  CardFooter,\\\\n  CardHeader,\\\\n  CardTitle,\\\\n} from '@/components/ui/card';\\\\n\\\\nexport default function SignupForm({\\\\n  searchParams,\\\\n}: {\\\\n  searchParams: { message: string };\\\\n}) {\\\\n  async function signUp(formData: FormData) {\\\\n    'use server';\\\\n\\\\n    const name = formData.get('name') as string;\\\\n    const email = formData.get('email') as string;\\\\n    const username = formData.get('username') as string;\\\\n    const password = formData.get('password') as string;\\\\n\\\\n    if (!name || !email || !username || !password) {\\\\n      throw redirect('/signup?message=All fields are required');\\\\n      return;\\\\n    }\\\\n\\\\n    try {\\\\n      const hashedPassword = await bcrypt.hash(password, 10);\\\\n      await prisma.user.create({\\\\n        data: {\\\\n          name,\\\\n          email,\\\\n          username,\\\\n          password: hashedPassword,\\\\n        },\\\\n      });\\\\n    } catch (error) {\\\\n      console.error('Error creating user:', error);\\\\n      throw redirect('/signup?message=Failed to create user');\\\\n    }\\\\n    throw redirect('/signin?message=Sign up successful!');\\\\n  }\\\\n\\\\n  return (\\\\n    <div className='flex justify-center items-center h-screen'>\\\\n      <Card className='w-[350px] shadow-md'>\\\\n        <CardHeader>\\\\n          <CardTitle>Sign Up</CardTitle>\\\\n          <CardDescription>Create an account to get started</CardDescription>\\\\n        </CardHeader>\\\\n        <form action={signUp} className='space-y-4 max-w-md mx-auto'>\\\\n          <CardContent>\\\\n            <SignupResult message={searchParams.message} />\\\\n            <div>\\\\n              <Label htmlFor='name'>Name</Label>\\\\n              <Input\\\\n                type='text'\\\\n                id='name'\\\\n                name='name'\\\\n                placeholder='Name'\\\\n                required\\\\n              />\\\\n            </div>\\\\n            <div>\\\\n              <Label htmlFor='email'>Email</Label>\\\\n              <Input\\\\n                type='email'\\\\n                id='email'\\\\n                name='email'\\\\n                placeholder='Email'\\\\n                required\\\\n              />\\\\n            </div>\\\\n            <div>\\\\n              <Label htmlFor='username'>Username</Label>\\\\n              <Input\\\\n                type='text'\\\\n                id='username'\\\\n                name='username'\\\\n                placeholder='Username'\\\\n                required\\\\n              />\\\\n            </div>\\\\n            <div>\\\\n              <Label htmlFor='password'>Password</Label>\\\\n              <Input\\\\n                type='password'\\\\n                id='password'\\\\n                name='password'\\\\n                placeholder='Password'\\\\n                required\\\\n              />\\\\n            </div>\\\\n          </CardContent>\\\\n          <CardFooter>\\\\n            <Button type='submit' className='w-full'>\\\\n              Sign Up\\\\n            </Button>\\\\n          </CardFooter>\\\\n        </form>\\\\n      </Card>\\\\n    </div>\\\\n  );\\\\n}\\\\n\\\",\\n      \\\"type\\\": \\\"registry:block\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./components/login/SignupResult.tsx\\\",\\n      \\\"content\\\": \\\"'use client';\\\\n\\\\nimport { useEffect, useRef } from 'react';\\\\nimport { useToast } from '@/hooks/use-toast';\\\\n\\\\ninterface SignupResultProps {\\\\n  message?: string | null;\\\\n}\\\\n\\\\nexport default function SignupResult({ message }: SignupResultProps) {\\\\n  const { toast } = useToast();\\\\n  const toastShownRef = useRef(false);\\\\n\\\\n  useEffect(() => {\\\\n    if (message && !toastShownRef.current) {\\\\n      const isError = message.includes('Failed');\\\\n      console.log('Attempting to show toast:', { isError, message });\\\\n\\\\n      toast({\\\\n        title: isError ? 'Error' : 'Success',\\\\n        description: message,\\\\n        variant: isError ? 'destructive' : 'success',\\\\n        duration: 5000,\\\\n      });\\\\n\\\\n      toastShownRef.current = true;\\\\n    }\\\\n  }, [message, toast]);\\\\n\\\\n  return null; // This component doesn't render anything visible\\\\n}\\\\n\\\",\\n      \\\"type\\\": \\\"registry:block\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./components/ui/toaster.tsx\\\",\\n      \\\"content\\\": \\\"\\\\\\\"use client\\\\\\\"\\\\n\\\\nimport { useToast } from \\\\\\\"@/hooks/use-toast\\\\\\\"\\\\nimport {\\\\n  Toast,\\\\n  ToastClose,\\\\n  ToastDescription,\\\\n  ToastProvider,\\\\n  ToastTitle,\\\\n  ToastViewport,\\\\n} from \\\\\\\"@/components/ui/toast\\\\\\\"\\\\n\\\\nexport function Toaster() {\\\\n  const { toasts } = useToast()\\\\n\\\\n  return (\\\\n    <ToastProvider>\\\\n      {toasts.map(function ({ id, title, description, action, ...props }) {\\\\n        return (\\\\n          <Toast key={id} {...props}>\\\\n            <div className=\\\\\\\"grid gap-1\\\\\\\">\\\\n              {title && <ToastTitle>{title}</ToastTitle>}\\\\n              {description && (\\\\n                <ToastDescription>{description}</ToastDescription>\\\\n              )}\\\\n            </div>\\\\n            {action}\\\\n            <ToastClose />\\\\n          </Toast>\\\\n        )\\\\n      })}\\\\n      <ToastViewport />\\\\n    </ToastProvider>\\\\n  )\\\\n}\\\\n\\\",\\n      \\\"type\\\": \\\"registry:ui\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./hooks/use-toast.ts\\\",\\n      \\\"content\\\": \\\"\\\\\\\"use client\\\\\\\"\\\\n\\\\n// Inspired by react-hot-toast library\\\\nimport * as React from \\\\\\\"react\\\\\\\"\\\\n\\\\nimport type {\\\\n  ToastActionElement,\\\\n  ToastProps,\\\\n} from \\\\\\\"@/components/ui/toast\\\\\\\"\\\\n\\\\nconst TOAST_LIMIT = 1\\\\nconst TOAST_REMOVE_DELAY = 1000000\\\\n\\\\ntype ToasterToast = ToastProps & {\\\\n  id: string\\\\n  title?: React.ReactNode\\\\n  description?: React.ReactNode\\\\n  action?: ToastActionElement\\\\n}\\\\n\\\\nconst actionTypes = {\\\\n  ADD_TOAST: \\\\\\\"ADD_TOAST\\\\\\\",\\\\n  UPDATE_TOAST: \\\\\\\"UPDATE_TOAST\\\\\\\",\\\\n  DISMISS_TOAST: \\\\\\\"DISMISS_TOAST\\\\\\\",\\\\n  REMOVE_TOAST: \\\\\\\"REMOVE_TOAST\\\\\\\",\\\\n} as const\\\\n\\\\nlet count = 0\\\\n\\\\nfunction genId() {\\\\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\\\\n  return count.toString()\\\\n}\\\\n\\\\ntype ActionType = typeof actionTypes\\\\n\\\\ntype Action =\\\\n  | {\\\\n      type: ActionType[\\\\\\\"ADD_TOAST\\\\\\\"]\\\\n      toast: ToasterToast\\\\n    }\\\\n  | {\\\\n      type: ActionType[\\\\\\\"UPDATE_TOAST\\\\\\\"]\\\\n      toast: Partial<ToasterToast>\\\\n    }\\\\n  | {\\\\n      type: ActionType[\\\\\\\"DISMISS_TOAST\\\\\\\"]\\\\n      toastId?: ToasterToast[\\\\\\\"id\\\\\\\"]\\\\n    }\\\\n  | {\\\\n      type: ActionType[\\\\\\\"REMOVE_TOAST\\\\\\\"]\\\\n      toastId?: ToasterToast[\\\\\\\"id\\\\\\\"]\\\\n    }\\\\n\\\\ninterface State {\\\\n  toasts: ToasterToast[]\\\\n}\\\\n\\\\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\\\\n\\\\nconst addToRemoveQueue = (toastId: string) => {\\\\n  if (toastTimeouts.has(toastId)) {\\\\n    return\\\\n  }\\\\n\\\\n  const timeout = setTimeout(() => {\\\\n    toastTimeouts.delete(toastId)\\\\n    dispatch({\\\\n      type: \\\\\\\"REMOVE_TOAST\\\\\\\",\\\\n      toastId: toastId,\\\\n    })\\\\n  }, TOAST_REMOVE_DELAY)\\\\n\\\\n  toastTimeouts.set(toastId, timeout)\\\\n}\\\\n\\\\nexport const reducer = (state: State, action: Action): State => {\\\\n  switch (action.type) {\\\\n    case \\\\\\\"ADD_TOAST\\\\\\\":\\\\n      return {\\\\n        ...state,\\\\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\\\\n      }\\\\n\\\\n    case \\\\\\\"UPDATE_TOAST\\\\\\\":\\\\n      return {\\\\n        ...state,\\\\n        toasts: state.toasts.map((t) =>\\\\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\\\\n        ),\\\\n      }\\\\n\\\\n    case \\\\\\\"DISMISS_TOAST\\\\\\\": {\\\\n      const { toastId } = action\\\\n\\\\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\\\\n      // but I'll keep it here for simplicity\\\\n      if (toastId) {\\\\n        addToRemoveQueue(toastId)\\\\n      } else {\\\\n        state.toasts.forEach((toast) => {\\\\n          addToRemoveQueue(toast.id)\\\\n        })\\\\n      }\\\\n\\\\n      return {\\\\n        ...state,\\\\n        toasts: state.toasts.map((t) =>\\\\n          t.id === toastId || toastId === undefined\\\\n            ? {\\\\n                ...t,\\\\n                open: false,\\\\n              }\\\\n            : t\\\\n        ),\\\\n      }\\\\n    }\\\\n    case \\\\\\\"REMOVE_TOAST\\\\\\\":\\\\n      if (action.toastId === undefined) {\\\\n        return {\\\\n          ...state,\\\\n          toasts: [],\\\\n        }\\\\n      }\\\\n      return {\\\\n        ...state,\\\\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\\\\n      }\\\\n  }\\\\n}\\\\n\\\\nconst listeners: Array<(state: State) => void> = []\\\\n\\\\nlet memoryState: State = { toasts: [] }\\\\n\\\\nfunction dispatch(action: Action) {\\\\n  memoryState = reducer(memoryState, action)\\\\n  listeners.forEach((listener) => {\\\\n    listener(memoryState)\\\\n  })\\\\n}\\\\n\\\\ntype Toast = Omit<ToasterToast, \\\\\\\"id\\\\\\\">\\\\n\\\\nfunction toast({ ...props }: Toast) {\\\\n  const id = genId()\\\\n\\\\n  const update = (props: ToasterToast) =>\\\\n    dispatch({\\\\n      type: \\\\\\\"UPDATE_TOAST\\\\\\\",\\\\n      toast: { ...props, id },\\\\n    })\\\\n  const dismiss = () => dispatch({ type: \\\\\\\"DISMISS_TOAST\\\\\\\", toastId: id })\\\\n\\\\n  dispatch({\\\\n    type: \\\\\\\"ADD_TOAST\\\\\\\",\\\\n    toast: {\\\\n      ...props,\\\\n      id,\\\\n      open: true,\\\\n      onOpenChange: (open) => {\\\\n        if (!open) dismiss()\\\\n      },\\\\n    },\\\\n  })\\\\n\\\\n  return {\\\\n    id: id,\\\\n    dismiss,\\\\n    update,\\\\n  }\\\\n}\\\\n\\\\nfunction useToast() {\\\\n  const [state, setState] = React.useState<State>(memoryState)\\\\n\\\\n  React.useEffect(() => {\\\\n    listeners.push(setState)\\\\n    return () => {\\\\n      const index = listeners.indexOf(setState)\\\\n      if (index > -1) {\\\\n        listeners.splice(index, 1)\\\\n      }\\\\n    }\\\\n  }, [state])\\\\n\\\\n  return {\\\\n    ...state,\\\\n    toast,\\\\n    dismiss: (toastId?: string) => dispatch({ type: \\\\\\\"DISMISS_TOAST\\\\\\\", toastId }),\\\\n  }\\\\n}\\\\n\\\\nexport { useToast, toast }\\\\n\\\",\\n      \\\"type\\\": \\\"registry:hook\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./lib/utils.ts\\\",\\n      \\\"content\\\": \\\"import { clsx, type ClassValue } from \\\\\\\"clsx\\\\\\\"\\\\nimport { twMerge } from \\\\\\\"tailwind-merge\\\\\\\"\\\\n\\\\nexport function cn(...inputs: ClassValue[]) {\\\\n  return twMerge(clsx(inputs))\\\\n}\\\\n\\\",\\n      \\\"type\\\": \\\"registry:lib\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./middleware.ts\\\",\\n      \\\"content\\\": \\\"import { NextResponse } from 'next/server';\\\\nimport { auth } from '@/auth';\\\\n\\\\nexport default auth((req) => {\\\\n  const isProtectedRoute =\\\\n    req.nextUrl.pathname.startsWith('/protected') ||\\\\n    req.nextUrl.pathname.startsWith('/api/protected');\\\\n\\\\n  if (isProtectedRoute && !req.auth) {\\\\n    // Add the original URL as a callbackUrl query parameter\\\\n    const signInUrl = new URL('/signin', req.url);\\\\n\\\\n    signInUrl.searchParams.set('callbackUrl', req.nextUrl.pathname);\\\\n\\\\n    return NextResponse.redirect(signInUrl);\\\\n  }\\\\n});\\\\n\\\\nexport const config = {\\\\n  matcher: ['/((?!api|_next/static|_next/image|favicon.ico).*)'],\\\\n};\\\\n\\\",\\n      \\\"type\\\": \\\"registry:example\\\",\\n      \\\"target\\\": \\\"./middleware.ts\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./services/prisma.ts\\\",\\n      \\\"content\\\": \\\"import { PrismaClient } from \\\\\\\"@prisma/client\\\\\\\"\\\\n\\\\nconst prisma = new PrismaClient()\\\\n\\\\nexport default prisma\\\",\\n      \\\"type\\\": \\\"registry:example\\\",\\n      \\\"target\\\": \\\"./services/prisma.ts\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./styles/global.css\\\",\\n      \\\"content\\\": \\\"@tailwind base;\\\\n@tailwind components;\\\\n@tailwind utilities;\\\\n@layer base {\\\\n  :root {\\\\n    --background: 0 0% 100%;\\\\n    --foreground: 240 10% 3.9%;\\\\n    --card: 0 0% 100%;\\\\n    --card-foreground: 240 10% 3.9%;\\\\n    --popover: 0 0% 100%;\\\\n    --popover-foreground: 240 10% 3.9%;\\\\n    --primary: 240 5.9% 10%;\\\\n    --primary-foreground: 0 0% 98%;\\\\n    --secondary: 240 4.8% 95.9%;\\\\n    --secondary-foreground: 240 5.9% 10%;\\\\n    --muted: 240 4.8% 95.9%;\\\\n    --muted-foreground: 240 3.8% 46.1%;\\\\n    --accent: 240 4.8% 95.9%;\\\\n    --accent-foreground: 240 5.9% 10%;\\\\n    --destructive: 0 84.2% 60.2%;\\\\n    --destructive-foreground: 0 0% 98%;\\\\n    --border: 240 5.9% 90%;\\\\n    --input: 240 5.9% 90%;\\\\n    --ring: 240 10% 3.9%;\\\\n    --chart-1: 12 76% 61%;\\\\n    --chart-2: 173 58% 39%;\\\\n    --chart-3: 197 37% 24%;\\\\n    --chart-4: 43 74% 66%;\\\\n    --chart-5: 27 87% 67%;\\\\n    --radius: 0.5rem\\\\n  }\\\\n  .dark {\\\\n    --background: 240 10% 3.9%;\\\\n    --foreground: 0 0% 98%;\\\\n    --card: 240 10% 3.9%;\\\\n    --card-foreground: 0 0% 98%;\\\\n    --popover: 240 10% 3.9%;\\\\n    --popover-foreground: 0 0% 98%;\\\\n    --primary: 0 0% 98%;\\\\n    --primary-foreground: 240 5.9% 10%;\\\\n    --secondary: 240 3.7% 15.9%;\\\\n    --secondary-foreground: 0 0% 98%;\\\\n    --muted: 240 3.7% 15.9%;\\\\n    --muted-foreground: 240 5% 64.9%;\\\\n    --accent: 240 3.7% 15.9%;\\\\n    --accent-foreground: 0 0% 98%;\\\\n    --destructive: 0 62.8% 30.6%;\\\\n    --destructive-foreground: 0 0% 98%;\\\\n    --border: 240 3.7% 15.9%;\\\\n    --input: 240 3.7% 15.9%;\\\\n    --ring: 240 4.9% 83.9%;\\\\n    --chart-1: 220 70% 50%;\\\\n    --chart-2: 160 60% 45%;\\\\n    --chart-3: 30 80% 55%;\\\\n    --chart-4: 280 65% 60%;\\\\n    --chart-5: 340 75% 55%\\\\n  }\\\\n}\\\\n@layer base {\\\\n  * {\\\\n    @apply border-border;\\\\n  }\\\\n  body {\\\\n    @apply bg-background text-foreground;\\\\n  }\\\\n}\\\",\\n      \\\"type\\\": \\\"registry:example\\\",\\n      \\\"target\\\": \\\"./styles/global.css\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"./tsconfig.json\\\",\\n      \\\"content\\\": \\\"{\\\\n  \\\\\\\"compilerOptions\\\\\\\": {\\\\n    \\\\\\\"lib\\\\\\\": [\\\\\\\"dom\\\\\\\", \\\\\\\"dom.iterable\\\\\\\", \\\\\\\"esnext\\\\\\\"],\\\\n    \\\\\\\"allowJs\\\\\\\": true,\\\\n    \\\\\\\"skipLibCheck\\\\\\\": true,\\\\n    \\\\\\\"strict\\\\\\\": true,\\\\n    \\\\\\\"noEmit\\\\\\\": true,\\\\n    \\\\\\\"esModuleInterop\\\\\\\": true,\\\\n    \\\\\\\"module\\\\\\\": \\\\\\\"esnext\\\\\\\",\\\\n    \\\\\\\"moduleResolution\\\\\\\": \\\\\\\"bundler\\\\\\\",\\\\n    \\\\\\\"resolveJsonModule\\\\\\\": true,\\\\n    \\\\\\\"isolatedModules\\\\\\\": true,\\\\n    \\\\\\\"jsx\\\\\\\": \\\\\\\"preserve\\\\\\\",\\\\n    \\\\\\\"incremental\\\\\\\": true,\\\\n    \\\\\\\"plugins\\\\\\\": [\\\\n      {\\\\n        \\\\\\\"name\\\\\\\": \\\\\\\"next\\\\\\\"\\\\n      }\\\\n    ],\\\\n    \\\\\\\"paths\\\\\\\": {\\\\n      \\\\\\\"@/*\\\\\\\": [\\\\\\\"./src/*\\\\\\\"]\\\\n    }\\\\n  },\\\\n  \\\\\\\"include\\\\\\\": [\\\\\\\"next-env.d.ts\\\\\\\", \\\\\\\"**/*.ts\\\\\\\", \\\\\\\"**/*.tsx\\\\\\\", \\\\\\\".next/types/**/*.ts\\\\\\\"],\\\\n  \\\\\\\"exclude\\\\\\\": [\\\\\\\"node_modules\\\\\\\"]\\\\n}\\\\n\\\",\\n      \\\"type\\\": \\\"registry:example\\\",\\n      \\\"target\\\": \\\"~/tsconfig.json\\\"\\n    }\\n  ],\\n  \\\"tailwind\\\": {},\\n  \\\"cssVars\\\": {},\\n  \\\"meta\\\": {}\\n}\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/authWithCredentials.json\"\r\n    },\r\n    {\r\n      \"path\": \"./multi2FA.json\",\r\n      \"content\": \"\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/multi2FA.json\"\r\n    },\r\n    {\r\n      \"path\": \"./postcss.config.js\",\r\n      \"content\": \"module.exports = {\\n  plugins: {\\n    tailwindcss: {},\\n    autoprefixer: {},\\n  },\\n}\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/postcss.config.js\"\r\n    },\r\n    {\r\n      \"path\": \"./prisma/migrations/20241014112709_init/migration.sql\",\r\n      \"content\": \"-- CreateTable\\nCREATE TABLE \\\"User\\\" (\\n    \\\"id\\\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\\n    \\\"email\\\" TEXT NOT NULL,\\n    \\\"username\\\" TEXT NOT NULL,\\n    \\\"name\\\" TEXT\\n);\\n\\n-- CreateIndex\\nCREATE UNIQUE INDEX \\\"User_email_key\\\" ON \\\"User\\\"(\\\"email\\\");\\n\\n-- CreateIndex\\nCREATE UNIQUE INDEX \\\"User_username_key\\\" ON \\\"User\\\"(\\\"username\\\");\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/prisma/migrations/20241014112709_init/migration.sql\"\r\n    },\r\n    {\r\n      \"path\": \"./prisma/migrations/20241014115814_added_password_to_user/migration.sql\",\r\n      \"content\": \"/*\\n  Warnings:\\n\\n  - Added the required column `password` to the `User` table without a default value. This is not possible if the table is not empty.\\n\\n*/\\n-- RedefineTables\\nPRAGMA defer_foreign_keys=ON;\\nPRAGMA foreign_keys=OFF;\\nCREATE TABLE \\\"new_User\\\" (\\n    \\\"id\\\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\\n    \\\"email\\\" TEXT NOT NULL,\\n    \\\"username\\\" TEXT NOT NULL,\\n    \\\"name\\\" TEXT,\\n    \\\"password\\\" TEXT NOT NULL\\n);\\nINSERT INTO \\\"new_User\\\" (\\\"email\\\", \\\"id\\\", \\\"name\\\", \\\"username\\\") SELECT \\\"email\\\", \\\"id\\\", \\\"name\\\", \\\"username\\\" FROM \\\"User\\\";\\nDROP TABLE \\\"User\\\";\\nALTER TABLE \\\"new_User\\\" RENAME TO \\\"User\\\";\\nCREATE UNIQUE INDEX \\\"User_email_key\\\" ON \\\"User\\\"(\\\"email\\\");\\nCREATE UNIQUE INDEX \\\"User_username_key\\\" ON \\\"User\\\"(\\\"username\\\");\\nPRAGMA foreign_keys=ON;\\nPRAGMA defer_foreign_keys=OFF;\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/prisma/migrations/20241014115814_added_password_to_user/migration.sql\"\r\n    },\r\n    {\r\n      \"path\": \"./prisma/migrations/20241014163717_link_environments_to_users/migration.sql\",\r\n      \"content\": \"-- CreateTable\\nCREATE TABLE \\\"Environment\\\" (\\n    \\\"id\\\" TEXT NOT NULL PRIMARY KEY,\\n    \\\"name\\\" TEXT NOT NULL,\\n    \\\"type\\\" TEXT NOT NULL,\\n    \\\"userId\\\" INTEGER NOT NULL,\\n    CONSTRAINT \\\"Environment_userId_fkey\\\" FOREIGN KEY (\\\"userId\\\") REFERENCES \\\"User\\\" (\\\"id\\\") ON DELETE RESTRICT ON UPDATE CASCADE\\n);\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/prisma/migrations/20241014163717_link_environments_to_users/migration.sql\"\r\n    },\r\n    {\r\n      \"path\": \"./prisma/migrations/20241014164725_link_code2_fa_to_environments/migration.sql\",\r\n      \"content\": \"-- CreateTable\\nCREATE TABLE \\\"Code2Fa\\\" (\\n    \\\"SecretCode\\\" TEXT NOT NULL PRIMARY KEY,\\n    \\\"name\\\" TEXT NOT NULL,\\n    \\\"EnvironmentId\\\" TEXT NOT NULL,\\n    CONSTRAINT \\\"Code2Fa_EnvironmentId_fkey\\\" FOREIGN KEY (\\\"EnvironmentId\\\") REFERENCES \\\"Environment\\\" (\\\"id\\\") ON DELETE RESTRICT ON UPDATE CASCADE\\n);\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/prisma/migrations/20241014164725_link_code2_fa_to_environments/migration.sql\"\r\n    },\r\n    {\r\n      \"path\": \"./prisma/migrations/20241015001601_change_key_name/migration.sql\",\r\n      \"content\": \"/*\\n  Warnings:\\n\\n  - The primary key for the `Code2Fa` table will be changed. If it partially fails, the table could be left without primary key constraint.\\n  - You are about to drop the column `SecretCode` on the `Code2Fa` table. All the data in the column will be lost.\\n  - Added the required column `secretCode` to the `Code2Fa` table without a default value. This is not possible if the table is not empty.\\n\\n*/\\n-- RedefineTables\\nPRAGMA defer_foreign_keys=ON;\\nPRAGMA foreign_keys=OFF;\\nCREATE TABLE \\\"new_Code2Fa\\\" (\\n    \\\"secretCode\\\" TEXT NOT NULL PRIMARY KEY,\\n    \\\"name\\\" TEXT NOT NULL,\\n    \\\"EnvironmentId\\\" TEXT NOT NULL,\\n    CONSTRAINT \\\"Code2Fa_EnvironmentId_fkey\\\" FOREIGN KEY (\\\"EnvironmentId\\\") REFERENCES \\\"Environment\\\" (\\\"id\\\") ON DELETE RESTRICT ON UPDATE CASCADE\\n);\\nINSERT INTO \\\"new_Code2Fa\\\" (\\\"secretCode\\\", \\\"name\\\", \\\"EnvironmentId\\\")\\nSELECT COALESCE(\\\"secretCode\\\", ''), \\\"name\\\", \\\"EnvironmentId\\\" FROM \\\"Code2Fa\\\";\\nDROP TABLE \\\"Code2Fa\\\";\\nALTER TABLE \\\"new_Code2Fa\\\" RENAME TO \\\"Code2Fa\\\";\\nPRAGMA foreign_keys=ON;\\nPRAGMA defer_foreign_keys=OFF;\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/prisma/migrations/20241015001601_change_key_name/migration.sql\"\r\n    },\r\n    {\r\n      \"path\": \"./prisma/migrations/migration_lock.toml\",\r\n      \"content\": \"# Please do not edit this file manually\\n# It should be added in your version-control system (i.e. Git)\\nprovider = \\\"sqlite\\\"\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/prisma/migrations/migration_lock.toml\"\r\n    },\r\n    {\r\n      \"path\": \"./prisma/schema.prisma\",\r\n      \"content\": \"// This is your Prisma schema file,\\r\\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\\r\\n\\r\\ngenerator client {\\r\\n  provider = \\\"prisma-client-js\\\"\\r\\n}\\r\\n\\r\\ndatasource db {\\r\\n  provider = \\\"sqlite\\\"\\r\\n  url      = env(\\\"DATABASE_URL\\\")\\r\\n}\\r\\n\\r\\nmodel User {\\r\\n  id            Int     @id @default(autoincrement())\\r\\n  email         String  @unique\\r\\n  username      String @unique\\r\\n  name          String?\\r\\n  password      String\\r\\n  environments  Environment[]\\r\\n}\\r\\n\\r\\nmodel Environment{\\r\\n  id            String @id @default(cuid())\\r\\n  name          String\\r\\n  type          String\\r\\n  userId        Int\\r\\n  user          User @relation(fields: [userId], references: [id], onDelete: Restrict)  \\r\\n  Codes2Fa      Code2Fa[]   \\r\\n}\\r\\n\\r\\nmodel Code2Fa {\\r\\n  secretCode    String @id\\r\\n  name          String\\r\\n  EnvironmentId String\\r\\n  environment   Environment @relation(fields: [EnvironmentId], references: [id], onDelete: Restrict)\\r\\n}\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/prisma/schema.prisma\"\r\n    },\r\n    {\r\n      \"path\": \"./run.bat\",\r\n      \"content\": \"@echo off\\r\\ncd \\\"path to project folder\\\"\\r\\n\\r\\n:: echo Would you like to rebuild the app? (y/n)\\r\\n:: set /p rebuild=\\r\\n\\r\\n:: if /i \\\"%rebuild%\\\"==\\\"y\\\" (\\r\\n::    echo Rebuilding the app...\\r\\n::    call npm run build\\r\\n::    if %errorlevel% neq 0 (\\r\\n::        echo Failed to build the app. Press any key to exit.\\r\\n::        pause > nul\\r\\n::        exit /b\\r\\n::    )\\r\\n:: )\\r\\n\\r\\nGOTO :endOfOldVersion\\r\\necho Starting the app...\\r\\ncall npm start\\r\\nif %errorlevel% neq 0 (\\r\\n    echo Failed to start the app. Press any key to exit.\\r\\n    pause > nul\\r\\n    exit /b\\r\\n)\\r\\n\\r\\necho App is running. Press any key to close.\\r\\npause > nul\\r\\n\\r\\n:endOfOldVersion\\r\\necho Starting the app...\\r\\n\\r\\n:: Start the Next.js app in a new window without blocking the script\\r\\nstart \\\"\\\" cmd /c \\\"npm start\\\"\\r\\n\\r\\n:: Wait for a few seconds to give the app some time to start\\r\\n:: timeout /t 1 /nobreak >nul\\r\\n\\r\\n:: Once the port is open, open the browser\\r\\nstart \\\"\\\" \\\"http://localhost:3030\\\"\\r\\n\\r\\n::close unecessarry window\\r\\nexit \\r\\n\\r\\n:: echo App is running. Press any key to close.\\r\\n:: pause > nul\\r\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/run.bat\"\r\n    },\r\n    {\r\n      \"path\": \"./app/api/auth/[...nextauth]/route.ts\",\r\n      \"content\": \"import { handlers } from \\\"@/auth\\\"\\n\\nexport const { GET, POST } = handlers\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./app/api/auth/[...nextauth]/route.ts\"\r\n    },\r\n    {\r\n      \"path\": \"./app/api/protected/code2fa/route.ts\",\r\n      \"content\": \"import { NextResponse } from 'next/server';\\r\\nimport prisma from '@/services/prisma';\\r\\nimport { generateTOTP } from '@/lib/totp'; // You'll need to implement this function\\r\\n\\r\\nexport async function GET(request: Request) {\\r\\n  const { searchParams } = new URL(request.url);\\r\\n  const secretCode = searchParams.get('secretCode');\\r\\n  const environmentId = searchParams.get('environmentId');\\r\\n\\r\\n  if (!secretCode || !environmentId) {\\r\\n    return NextResponse.json({ error: 'Missing parameters' }, { status: 400 });\\r\\n  }\\r\\n\\r\\n  try {\\r\\n    const code2fa = await prisma.code2Fa.findUnique({\\r\\n      where: { secretCode: secretCode, EnvironmentId: environmentId },\\r\\n    });\\r\\n\\r\\n    if (!code2fa) {\\r\\n      return NextResponse.json({ error: 'Code not found' }, { status: 404 });\\r\\n    }\\r\\n\\r\\n    const totpCode = generateTOTP(code2fa.secretCode);\\r\\n\\r\\n    return NextResponse.json({ code: totpCode.otp, expires: totpCode.expires });\\r\\n  } catch (error) {\\r\\n    console.error('Error generating TOTP:', error);\\r\\n    return NextResponse.json(\\r\\n      { error: 'Internal server error' },\\r\\n      { status: 500 }\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./app/api/protected/code2fa/route.ts\"\r\n    },\r\n    {\r\n      \"path\": \"./app/layout.tsx\",\r\n      \"content\": \"import { SessionProvider } from 'next-auth/react';\\r\\nimport '@/styles/global.css';\\r\\nimport { Toaster } from '@/components/ui/toaster';\\r\\nimport { Sidebar } from '@/components/Sidebar';\\r\\nimport { ThemeProvider } from '@/components/providers/ThemeProvider';\\r\\n\\r\\nexport const metadata = {\\r\\n  title: 'Next.js',\\r\\n  description: 'Generated by Next.js',\\r\\n};\\r\\n\\r\\nexport default function RootLayout({\\r\\n  children,\\r\\n}: {\\r\\n  children: React.ReactNode;\\r\\n}) {\\r\\n  return (\\r\\n    <html lang='en'>\\r\\n      <body>\\r\\n        <SessionProvider>\\r\\n          <ThemeProvider\\r\\n            attribute='class'\\r\\n            defaultTheme='system'\\r\\n            enableSystem\\r\\n            disableTransitionOnChange\\r\\n          >\\r\\n            <div className='flex h-screen bg-gray-100 dark:bg-gray-900'>\\r\\n              <Sidebar />\\r\\n              <main className='flex-1 mt-3 md:mt-0 md:ml-44'>{children}</main>\\r\\n            </div>\\r\\n          </ThemeProvider>\\r\\n        </SessionProvider>\\r\\n        <Toaster />\\r\\n      </body>\\r\\n    </html>\\r\\n  );\\r\\n}\\r\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./app/layout.tsx\"\r\n    },\r\n    {\r\n      \"path\": \"./app/page.tsx\",\r\n      \"content\": \"export default function Home() {\\r\\n  return (\\r\\n    <div className=\\\"m-4\\\">\\r\\n      <h1 className=\\\"text-4xl font-bold\\\">2FA Totp</h1>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./app/page.tsx\"\r\n    },\r\n    {\r\n      \"path\": \"./app/protected/dashboard/add-environment/page.tsx\",\r\n      \"content\": \"import { auth } from \\\"@/auth\\\";\\r\\nimport { AddToast } from \\\"@/components/AddToast\\\";\\r\\nimport { Button } from \\\"@/components/ui/button\\\";\\r\\nimport {\\r\\n  Card,\\r\\n  CardContent,\\r\\n  CardDescription,\\r\\n  CardFooter,\\r\\n  CardHeader,\\r\\n  CardTitle,\\r\\n} from \\\"@/components/ui/card\\\";\\r\\n\\r\\nimport { Input } from \\\"@/components/ui/input\\\";\\r\\nimport prisma from \\\"@/services/prisma\\\";\\r\\nimport { Label } from \\\"@/components/ui/label\\\";\\r\\nimport { redirect } from \\\"next/navigation\\\";\\r\\n\\r\\nexport default function AddEnvironmentPage({\\r\\n  searchParams,\\r\\n}: {\\r\\n  searchParams: { [key: string]: string | string[] | undefined };\\r\\n}) {\\r\\n  const addEnvironment = async (formData: FormData) => {\\r\\n    \\\"use server\\\";\\r\\n    const session = await auth();\\r\\n    const name = formData.get(\\\"name\\\") as string;\\r\\n    const type = formData.get(\\\"type\\\") as string;\\r\\n    const randomCallId = Math.random().toString(36).substring(2, 15);\\r\\n\\r\\n    if (!session?.user) {\\r\\n      throw redirect(\\\"/signin\\\");\\r\\n    }\\r\\n    try {\\r\\n      const user = await prisma.user.findUnique({\\r\\n        where: { email: session?.user?.email as string },\\r\\n      });\\r\\n\\r\\n      await prisma.environment.create({\\r\\n        data: {\\r\\n          name,\\r\\n          type,\\r\\n          userId: user?.id as unknown as number,\\r\\n        },\\r\\n      });\\r\\n    } catch (error) {\\r\\n      console.log(error);\\r\\n      throw redirect(\\r\\n        `/protected/dashboard/add-environment?title=Error&description=Failed+to+create+environment&variant=destructive&call=${randomCallId}`\\r\\n      );\\r\\n    }\\r\\n    throw redirect(\\r\\n      \\\"/protected/dashboard/?title=Success&description=Environment+added+successfully&variant=success\\\"\\r\\n    );\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div className=\\\"container mx-auto mt-8\\\">\\r\\n      <AddToast\\r\\n        title={searchParams.title as string}\\r\\n        description={searchParams.description as string}\\r\\n        variant={\\r\\n          searchParams.variant as\\r\\n            | \\\"default\\\"\\r\\n            | \\\"destructive\\\"\\r\\n            | \\\"success\\\"\\r\\n            | null\\r\\n            | undefined\\r\\n        }\\r\\n        callId={searchParams.call as string}\\r\\n      />\\r\\n      <Card className=\\\"shadow-md mx-2 md:w-1/2 md:mx-auto\\\">\\r\\n        <CardHeader>\\r\\n          <CardTitle>\\r\\n            <div className=\\\"text-2xl font-bold\\\">Add an environment</div>\\r\\n          </CardTitle>\\r\\n          <CardDescription>Add an environment to your account</CardDescription>\\r\\n        </CardHeader>\\r\\n        <form action={addEnvironment}>\\r\\n          <CardContent>\\r\\n            <div className=\\\"flex flex-col gap-2\\\">\\r\\n              <div className=\\\"flex flex-row flex-wrap\\\">\\r\\n                <div className=\\\"flex flex-col w-full lg:w-1/2 lg:pr-2 mb-2\\\">\\r\\n                  <Label className=\\\"mb-1\\\" htmlFor=\\\"environment-name\\\">\\r\\n                    Environment Name\\r\\n                  </Label>\\r\\n                  <Input\\r\\n                    type=\\\"text\\\"\\r\\n                    name=\\\"name\\\"\\r\\n                    id=\\\"environment-name\\\"\\r\\n                    placeholder=\\\"Environment Name\\\"\\r\\n                    required\\r\\n                  />\\r\\n                </div>\\r\\n                <div className=\\\"flex flex-col w-full lg:w-1/2 lg:pl-2\\\">\\r\\n                  <Label className=\\\"mb-1\\\" htmlFor=\\\"environment-type\\\">\\r\\n                    Environment Type\\r\\n                  </Label>\\r\\n                  <Input\\r\\n                    type=\\\"text\\\"\\r\\n                    name=\\\"type\\\"\\r\\n                    id=\\\"environment-type\\\"\\r\\n                    placeholder=\\\"Environment Type\\\"\\r\\n                  />\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </CardContent>\\r\\n          <CardFooter className=\\\"flex justify-end pt-4\\\">\\r\\n            <Button type=\\\"submit\\\">Save</Button>\\r\\n          </CardFooter>\\r\\n        </form>\\r\\n      </Card>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./app/protected/dashboard/add-environment/page.tsx\"\r\n    },\r\n    {\r\n      \"path\": \"./app/protected/dashboard/environments/[environmentId]/add-code/page.tsx\",\r\n      \"content\": \"import { Button } from \\\"@/components/ui/button\\\";\\r\\nimport { Input } from \\\"@/components/ui/input\\\";\\r\\nimport prisma from \\\"@/services/prisma\\\";\\r\\nimport { Label } from \\\"@/components/ui/label\\\";\\r\\nimport { AddToast } from \\\"@/components/AddToast\\\";\\r\\nimport {\\r\\n  Card,\\r\\n  CardContent,\\r\\n  CardDescription,\\r\\n  CardFooter,\\r\\n  CardHeader,\\r\\n  CardTitle,\\r\\n} from \\\"@/components/ui/card\\\";\\r\\nimport { redirect } from \\\"next/navigation\\\";\\r\\nimport { getUser } from \\\"@/auth\\\";\\r\\nimport SecretInput from \\\"@/components/SecretInput\\\";\\r\\n\\r\\nexport default async function AddCodePage({\\r\\n  params,\\r\\n  searchParams,\\r\\n}: {\\r\\n  params: { environmentId: string };\\r\\n  searchParams: { [key: string]: string | string[] | undefined };\\r\\n}) {\\r\\n  const createCode = async (formData: FormData) => {\\r\\n    \\\"use server\\\";\\r\\n    const user = await getUser();\\r\\n    if (!user) {\\r\\n      const randomCallId = Math.random().toString(36).substring(2, 15);\\r\\n      const searchParams = new URLSearchParams();\\r\\n      searchParams.set(\\\"title\\\", \\\"Unauthorized\\\");\\r\\n      searchParams.set(\\\"description\\\", \\\"Unauthorized\\\");\\r\\n      searchParams.set(\\\"variant\\\", \\\"destructive\\\");\\r\\n      searchParams.set(\\\"callId\\\", randomCallId);\\r\\n      throw redirect(\\\"/protected/dashboard/?\\\" + searchParams.toString());\\r\\n    }\\r\\n    const name = formData.get(\\\"name\\\") as string;\\r\\n    const secretCode = formData.get(\\\"secretCode\\\") as string;\\r\\n    const environmentId = formData.get(\\\"environmentId\\\") as string;\\r\\n\\r\\n    try {\\r\\n      await prisma.code2Fa.create({\\r\\n        data: {\\r\\n          name,\\r\\n          secretCode: secretCode,\\r\\n          EnvironmentId: environmentId,\\r\\n        },\\r\\n      });\\r\\n    } catch (error) {\\r\\n      console.error(\\\"Error creating code:\\\", error);\\r\\n      const randomCallId = Math.random().toString(36).substring(2, 15);\\r\\n      const searchParams = new URLSearchParams();\\r\\n      searchParams.set(\\\"title\\\", \\\"Failed to create code\\\");\\r\\n      searchParams.set(\\\"description\\\", \\\"Failed to create code\\\");\\r\\n      searchParams.set(\\\"variant\\\", \\\"destructive\\\");\\r\\n      searchParams.set(\\\"callId\\\", randomCallId);\\r\\n      throw redirect(\\r\\n        \\\"/protected/dashboard/environments/\\\" +\\r\\n          environmentId +\\r\\n          \\\"/add-code/\\\" +\\r\\n          \\\"?\\\" +\\r\\n          searchParams.toString()\\r\\n      );\\r\\n    }\\r\\n    const randomCallId = Math.random().toString(36).substring(2, 15);\\r\\n    const searchParams = new URLSearchParams();\\r\\n    searchParams.set(\\\"title\\\", \\\"Code created\\\");\\r\\n    searchParams.set(\\\"description\\\", \\\"Code created\\\");\\r\\n    searchParams.set(\\\"variant\\\", \\\"success\\\");\\r\\n    searchParams.set(\\\"callId\\\", randomCallId);\\r\\n    throw redirect(\\\"/protected/dashboard/?\\\" + searchParams.toString());\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div className=\\\"container mx-auto mt-8\\\">\\r\\n      <AddToast\\r\\n        title={searchParams.title as string}\\r\\n        description={searchParams.description as string}\\r\\n        variant={\\r\\n          searchParams.variant as\\r\\n            | \\\"default\\\"\\r\\n            | \\\"destructive\\\"\\r\\n            | \\\"success\\\"\\r\\n            | null\\r\\n            | undefined\\r\\n        }\\r\\n        callId={searchParams.call as string}\\r\\n      />\\r\\n      <Card className=\\\"shadow-md mx-2 md:w-1/2 md:mx-auto\\\">\\r\\n        <CardHeader>\\r\\n          <CardTitle>\\r\\n            <div className=\\\"text-2xl font-bold\\\">Add a 2fa code</div>\\r\\n          </CardTitle>\\r\\n          <CardDescription>Add a 2fa code to your environment</CardDescription>\\r\\n        </CardHeader>\\r\\n        <form action={createCode} className=\\\"space-y-4\\\">\\r\\n          <CardContent>\\r\\n            <input\\r\\n              type=\\\"hidden\\\"\\r\\n              name=\\\"environmentId\\\"\\r\\n              value={params.environmentId}\\r\\n            />\\r\\n            <div>\\r\\n              <Label htmlFor=\\\"name\\\">Name</Label>\\r\\n              <Input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" required />\\r\\n            </div>\\r\\n            <SecretInput />\\r\\n          </CardContent>\\r\\n          <CardFooter className=\\\"flex justify-end pt-4\\\">\\r\\n            <Button type=\\\"submit\\\">Save</Button>\\r\\n          </CardFooter>\\r\\n        </form>\\r\\n      </Card>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./app/protected/dashboard/environments/[environmentId]/add-code/page.tsx\"\r\n    },\r\n    {\r\n      \"path\": \"./app/protected/dashboard/environments/actions.ts\",\r\n      \"content\": \"'use server';\\r\\n\\r\\nimport prisma from '@/services/prisma';\\r\\nimport { getUser } from '@/auth';\\r\\n\\r\\nexport async function deleteCode(codeId: string) {\\r\\n  const user = await getUser();\\r\\n  if (!user) {\\r\\n    return { success: false, error: 'User not found' };\\r\\n  }\\r\\n\\r\\n  // find the code and its environemnt if nvironment user is user then delete it\\r\\n  const code = await prisma.code2Fa.findUnique({\\r\\n    where: {\\r\\n      secretCode: codeId,\\r\\n    },\\r\\n    include: {\\r\\n      environment: true,\\r\\n    },\\r\\n  });\\r\\n  if (!code) {\\r\\n    return { error: 'Code not found' };\\r\\n  }\\r\\n  if (code.environment.userId !== user.id) {\\r\\n    return { error: 'You are not authorized to delete this code' };\\r\\n  }\\r\\n  await prisma.code2Fa.delete({\\r\\n    where: {\\r\\n      secretCode: codeId,\\r\\n    },\\r\\n  });\\r\\n  return { success: 'Code deleted' };\\r\\n}\\r\\n\\r\\nexport async function deleteEnvironment(environmentId: string | undefined): Promise<{ success?: string; error?: string }> {\\r\\n  const user = await getUser();\\r\\n  if (!user) {\\r\\n    return { error: 'User not found'};\\r\\n  }\\r\\n  const environment = await prisma.environment.findUnique({\\r\\n    where: {\\r\\n      id: environmentId,\\r\\n    },\\r\\n    include: {\\r\\n      Codes2Fa: true,\\r\\n    },\\r\\n  });\\r\\n  if (!environment) {\\r\\n    return { error: 'Environment not found' };\\r\\n  }\\r\\n  if (environment.userId !== user.id) {\\r\\n    return { error: 'You are not authorized to delete this environment' };\\r\\n  }\\r\\n  try {\\r\\n    await prisma.environment.delete({\\r\\n      where: {\\r\\n        id: environmentId,\\r\\n      },\\r\\n    });\\r\\n  } catch (error) {\\r\\n    console.error('Error deleting environment:', error);\\r\\n    return { error: 'Error deleting environment'};\\r\\n  }\\r\\n  return { success: 'Environment deleted' };\\r\\n}\\r\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./app/protected/dashboard/environments/actions.ts\"\r\n    },\r\n    {\r\n      \"path\": \"./app/protected/dashboard/page.tsx\",\r\n      \"content\": \"import Link from \\\"next/link\\\";\\r\\nimport { Button } from \\\"@/components/ui/button\\\";\\r\\n\\r\\nimport { AddToast } from \\\"@/components/AddToast\\\";\\r\\nimport { auth } from \\\"@/auth\\\";\\r\\nimport prisma from \\\"@/services/prisma\\\";\\r\\nimport { EnvironmentCard } from \\\"@/components/EnvironmentCard\\\";\\r\\n\\r\\nexport default async function DashboardPage({\\r\\n  searchParams,\\r\\n}: {\\r\\n  searchParams: { [key: string]: string | string[] | undefined };\\r\\n}) {\\r\\n  const session = await auth();\\r\\n  const user = await prisma.user.findUniqueOrThrow({\\r\\n    where: { email: session?.user?.email as string },\\r\\n  });\\r\\n\\r\\n  const environments = await prisma.environment.findMany({\\r\\n    where: { userId: user.id },\\r\\n    include: { Codes2Fa: true },\\r\\n  });\\r\\n\\r\\n  return (\\r\\n    <div className=\\\"container mx-auto px-2 py-8\\\">\\r\\n      <AddToast\\r\\n        title={searchParams.title as string}\\r\\n        description={searchParams.description as string}\\r\\n        variant={\\r\\n          searchParams.variant as\\r\\n            | \\\"default\\\"\\r\\n            | \\\"destructive\\\"\\r\\n            | \\\"success\\\"\\r\\n            | null\\r\\n            | undefined\\r\\n        }\\r\\n        callId={searchParams.call as string}\\r\\n      />\\r\\n      <div className=\\\"flex flex-wrap justify-between items-center mb-8 mx-2\\\">\\r\\n        <h1 className=\\\"mr-2 text-3xl font-bold mb-2\\\">Dashboard</h1>\\r\\n        <Link href=\\\"/protected/dashboard/add-environment\\\">\\r\\n          <Button>Add Environment</Button>\\r\\n        </Link>\\r\\n      </div>\\r\\n\\r\\n      <div className=\\\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2\\\">\\r\\n        {environments.map((environment) => (\\r\\n          <EnvironmentCard environment={environment} key={environment.id} />\\r\\n        ))}\\r\\n      </div>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./app/protected/dashboard/page.tsx\"\r\n    },\r\n    {\r\n      \"path\": \"./app/signin/page.tsx\",\r\n      \"content\": \"import SignInForm from '@/components/login/SignInForm';\\nimport SignupResult from '@/components/login/SignupResult';\\nexport default function SignInPage({\\n  searchParams,\\n}: {\\n  searchParams: { message: string };\\n}) {\\n  return (\\n    <div className='flex min-h-screen items-center justify-center bg-gray-100'>\\n      <SignupResult message={searchParams.message} />\\n      <SignInForm />\\n    </div>\\n  );\\n}\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./app/signin/page.tsx\"\r\n    },\r\n    {\r\n      \"path\": \"./app/signup/page.tsx\",\r\n      \"content\": \"import SignUpForm from \\\"@/components/login/SignupForm\\\"\\n\\n\\n\\nexport default function SignUpPage({\\n  searchParams\\n}: {\\n  searchParams: { message: string }\\n}) {\\n  return (\\n    <div>\\n      <SignUpForm searchParams={searchParams}/>\\n    </div>\\n  )\\n}\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./app/signup/page.tsx\"\r\n    },\r\n    {\r\n      \"path\": \"./auth.ts\",\r\n      \"content\": \"import NextAuth from 'next-auth';\\r\\nimport Credentials from 'next-auth/providers/credentials';\\r\\nimport bcrypt from 'bcryptjs';\\r\\nimport prisma from '@/services/prisma';\\r\\n\\r\\nexport const { handlers, auth, signIn, signOut } = NextAuth({\\r\\n  providers: [\\r\\n    Credentials({\\r\\n      // The name to display on the sign in form (e.g. \\\"Sign in with...\\\")\\r\\n      name: 'Credentials',\\r\\n      // The credentials is used to generate a suitable form on the sign in page.\\r\\n      // You can specify whatever fields you are expecting to be submitted.\\r\\n      credentials: {\\r\\n        username: { label: 'Username', type: 'text', placeholder: 'jsmith' },\\r\\n        password: { label: 'Password', type: 'password' },\\r\\n      },\\r\\n      authorize: async (credentials, request) => {\\r\\n        const { username, password } = credentials as { username: string; password: string };\\r\\n        console.log(request);\\r\\n        \\r\\n        if (!credentials?.username || !credentials?.password) {\\r\\n          return null;\\r\\n        }\\r\\n\\r\\n        try {\\r\\n          // Find the user in the database\\r\\n          const user = await prisma.user.findUnique({\\r\\n            where: { username: username },\\r\\n          });\\r\\n\\r\\n          if (!user) {\\r\\n            return null;\\r\\n          }\\r\\n\\r\\n          // Compare the provided password with the hashed password in the database\\r\\n          const isPasswordValid = await bcrypt.compare(\\r\\n            password,\\r\\n            user.password\\r\\n          );\\r\\n\\r\\n          if (!isPasswordValid) {\\r\\n            return null;\\r\\n          }\\r\\n          \\r\\n\\r\\n          // Return user object if validation is successful\\r\\n          return {\\r\\n            id: user.id.toString(), // Convert id to string\\r\\n            name: user.name,\\r\\n            username: user.username,\\r\\n            email: user.email,\\r\\n          };\\r\\n        } catch (error) {\\r\\n          console.error('Error during authentication:', error);\\r\\n          return null;\\r\\n        } finally {\\r\\n          await prisma.$disconnect();\\r\\n        }\\r\\n      },\\r\\n    }),\\r\\n  ],\\r\\n});\\r\\n\\r\\nexport const getUser = async () => {\\r\\n  const session = await auth();\\r\\n  const user = await prisma.user.findUnique({\\r\\n    where: {\\r\\n      email: session?.user?.email as string,\\r\\n    },\\r\\n  });\\r\\n  return user;\\r\\n};\\r\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./auth.ts\"\r\n    },\r\n    {\r\n      \"path\": \"./components/AddToast.tsx\",\r\n      \"content\": \"\\\"use client\\\";\\r\\n\\r\\nimport { useToast } from \\\"@/hooks/use-toast\\\";\\r\\nimport { useEffect } from \\\"react\\\";\\r\\n\\r\\nexport function AddToast({\\r\\n  title,\\r\\n  description,\\r\\n  variant,\\r\\n  callId,\\r\\n}: {\\r\\n  title: string | null;\\r\\n  description: string | null;\\r\\n  callId: string | null;\\r\\n  variant: \\\"default\\\" | \\\"destructive\\\" | \\\"success\\\" | null | undefined;\\r\\n}) {\\r\\n  const { toast } = useToast();\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (title || description || variant || callId)\\r\\n      toast({\\r\\n        title: title || \\\"\\\",\\r\\n        description: description || \\\"\\\",\\r\\n        variant: variant || \\\"default\\\",\\r\\n        duration: 5000,\\r\\n      });\\r\\n  }, [title, description, toast, callId, variant]);\\r\\n\\r\\n  return null;\\r\\n}\\r\\n\",\r\n      \"type\": \"registry:block\"\r\n    },\r\n    {\r\n      \"path\": \"./components/AuthStatus.tsx\",\r\n      \"content\": \"\\\"use client\\\";\\r\\n\\r\\nimport { useSession } from \\\"next-auth/react\\\";\\r\\nimport { signOut } from \\\"next-auth/react\\\";\\r\\nimport Link from \\\"next/link\\\";\\r\\n\\r\\nexport default function AuthStatus() {\\r\\n  const { data: session, status } = useSession();\\r\\n\\r\\n  if (status === \\\"loading\\\") {\\r\\n    return <div>Loading...</div>;\\r\\n  }\\r\\n\\r\\n  if (status === \\\"unauthenticated\\\") {\\r\\n    return (\\r\\n      <div>\\r\\n        <h2 className=\\\"text-2xl font-bold\\\">You are not signed in.</h2>\\r\\n        <Link href=\\\"/signin\\\">\\r\\n          <button className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\\\">\\r\\n            Sign In\\r\\n          </button>\\r\\n        </Link>\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <h2 className=\\\"text-2xl font-bold\\\">Signed in as {session?.user?.name}</h2>\\r\\n      <button\\r\\n        className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\\\"\\r\\n        onClick={() => signOut()}\\r\\n      >\\r\\n        Sign Out\\r\\n      </button>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\",\r\n      \"type\": \"registry:block\"\r\n    },\r\n    {\r\n      \"path\": \"./components/Code2FaCell.tsx\",\r\n      \"content\": \"\\\"use client\\\";\\r\\n\\r\\nimport { useState, useEffect } from \\\"react\\\";\\r\\nimport { Button } from \\\"@/components/ui/button\\\";\\r\\n\\r\\nexport function Code2FaCell({\\r\\n  secretCode,\\r\\n  environmentId,\\r\\n}: {\\r\\n  secretCode: string;\\r\\n  environmentId: string;\\r\\n}) {\\r\\n  const [code, setCode] = useState<string>(\\\"\\\");\\r\\n  const [timeLeft, setTimeLeft] = useState<number>(0); // Assuming 30 seconds validity\\r\\n  const [isLoading, setIsLoading] = useState<boolean>(true);\\r\\n  const [error, setError] = useState<string | null>(null);\\r\\n  const [copyStatus, setCopyStatus] = useState<string>(\\\"Copy\\\");\\r\\n\\r\\n  console.log(isLoading);\\r\\n\\r\\n  useEffect(() => {\\r\\n    const fetchCode = async () => {\\r\\n      setIsLoading(true);\\r\\n      setError(null);\\r\\n      try {\\r\\n        const response = await fetch(\\r\\n          `/api/protected/code2fa/?secretCode=${encodeURIComponent(\\r\\n            secretCode\\r\\n          )}&environmentId=${encodeURIComponent(environmentId)}`\\r\\n        );\\r\\n        if (!response.ok) {\\r\\n          throw new Error(\\\"Failed to fetch 2FA code\\\");\\r\\n        }\\r\\n        const data = await response.json();\\r\\n        setCode(data.code);\\r\\n        setTimeLeft(Math.floor((Date.now() - data.expires) / -1000)); // Reset timer when new code is fetched\\r\\n      } catch (err) {\\r\\n        setError(\\\"Error fetching 2FA code\\\");\\r\\n        console.error(err);\\r\\n      } finally {\\r\\n        setIsLoading(false);\\r\\n      }\\r\\n    };\\r\\n\\r\\n    fetchCode();\\r\\n\\r\\n    const timer = setInterval(() => {\\r\\n      setTimeLeft((prevTime) => {\\r\\n        if (prevTime <= 1) {\\r\\n          fetchCode(); // Fetch new code when timer reaches 0\\r\\n          return 30; // Reset timer to 30 seconds\\r\\n        }\\r\\n        return prevTime - 1;\\r\\n      });\\r\\n    }, 1000);\\r\\n\\r\\n    return () => clearInterval(timer);\\r\\n  }, [secretCode, environmentId]);\\r\\n\\r\\n  const copyToClipboard = async () => {\\r\\n    try {\\r\\n      await navigator.clipboard.writeText(code);\\r\\n      setCopyStatus(\\\"Copied!\\\");\\r\\n      setTimeout(() => setCopyStatus(\\\"Copy\\\"), 2000);\\r\\n    } catch (err) {\\r\\n      console.error(\\\"Failed to copy: \\\", err);\\r\\n      setCopyStatus(\\\"Failed to copy\\\");\\r\\n    }\\r\\n  };\\r\\n\\r\\n  // if (isLoading) return <span>Loading...</span>;\\r\\n  if (error) return <span>{error}</span>;\\r\\n\\r\\n  return (\\r\\n    <div className=\\\"flex items-center flex-wrap\\\">\\r\\n      <span>{code}</span>\\r\\n      <span className=\\\"text-xs text-gray-500 px-1\\\">\\r\\n        (Valid for {timeLeft} seconds)\\r\\n      </span>\\r\\n      <Button\\r\\n        className=\\\"text-xs text-gray-500 px-1 \\\"\\r\\n        variant=\\\"ghost\\\"\\r\\n        onClick={copyToClipboard}\\r\\n      >\\r\\n        {copyStatus}\\r\\n      </Button>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\",\r\n      \"type\": \"registry:block\"\r\n    },\r\n    {\r\n      \"path\": \"./components/Code2FaTable.tsx\",\r\n      \"content\": \"\\\"use client\\\";\\r\\n\\r\\nimport { Code2Fa } from \\\"@prisma/client\\\";\\r\\nimport {\\r\\n  Table,\\r\\n  TableBody,\\r\\n  TableCell,\\r\\n  TableHead,\\r\\n  TableHeader,\\r\\n  TableRow,\\r\\n} from \\\"@/components/ui/table\\\";\\r\\n\\r\\nimport { Button } from \\\"@/components/ui/button\\\";\\r\\nimport { Code2FaCell } from \\\"@/components/Code2FaCell\\\";\\r\\nimport Link from \\\"next/link\\\";\\r\\nimport { deleteCode } from \\\"@/app/protected/dashboard/environments/actions\\\";\\r\\nimport { AddToast } from \\\"./AddToast\\\";\\r\\nimport { useState } from \\\"react\\\";\\r\\nimport { Trash } from \\\"lucide-react\\\";\\r\\n\\r\\nexport function Code2FaTable({\\r\\n  codes,\\r\\n  environmentId,\\r\\n}: {\\r\\n  codes: Code2Fa[];\\r\\n  environmentId: string;\\r\\n}) {\\r\\n  const [toast, setToast] = useState<{\\r\\n    title: string;\\r\\n    description: string;\\r\\n    variant: \\\"default\\\" | \\\"destructive\\\" | \\\"success\\\";\\r\\n    callId: string;\\r\\n  } | null>();\\r\\n  const [displayedCodes, setDisplayedCodes] = useState<Code2Fa[]>(codes);\\r\\n\\r\\n  const handleDelete = async (secretCode: string) => {\\r\\n    // Implement delete functionality\\r\\n    const response = await deleteCode(secretCode);\\r\\n    if (response.error) {\\r\\n      setToast({\\r\\n        title: \\\"Error\\\",\\r\\n        description: response.error,\\r\\n        variant: \\\"destructive\\\",\\r\\n        callId: secretCode,\\r\\n      });\\r\\n    }\\r\\n    if (response.success) {\\r\\n      setToast({\\r\\n        title: \\\"Success\\\",\\r\\n        description:\\r\\n          typeof response.success === \\\"string\\\" ? response.success : \\\"\\\",\\r\\n        variant: \\\"success\\\",\\r\\n        callId: secretCode,\\r\\n      });\\r\\n      setDisplayedCodes(\\r\\n        displayedCodes.filter((code) => code.secretCode !== secretCode)\\r\\n      );\\r\\n    }\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <AddToast\\r\\n        title={toast?.title || null}\\r\\n        description={toast?.description || null}\\r\\n        variant={toast?.variant || null}\\r\\n        callId={toast?.callId || null}\\r\\n      />\\r\\n      <div className=\\\"mb-4\\\">\\r\\n        <Link\\r\\n          href={`/protected/dashboard/environments/${environmentId}/add-code`}\\r\\n        >\\r\\n          <Button>Add New Code</Button>\\r\\n        </Link>\\r\\n      </div>\\r\\n      <Table>\\r\\n        <TableHeader>\\r\\n          <TableRow>\\r\\n            <TableHead>Name</TableHead>\\r\\n            <TableHead>Code</TableHead>\\r\\n            <TableHead>Actions</TableHead>\\r\\n          </TableRow>\\r\\n        </TableHeader>\\r\\n        <TableBody>\\r\\n          {displayedCodes?.map((code, index) => (\\r\\n            <TableRow\\r\\n              key={index}\\r\\n              //   key={code.SecretCode}\\r\\n            >\\r\\n              <TableCell>{code.name}</TableCell>\\r\\n              <TableCell>\\r\\n                <Code2FaCell\\r\\n                  secretCode={code.secretCode}\\r\\n                  environmentId={environmentId}\\r\\n                />\\r\\n              </TableCell>\\r\\n              <TableCell>\\r\\n                <Button\\r\\n                  variant=\\\"destructive\\\"\\r\\n                  size=\\\"icon\\\"\\r\\n                  onClick={() => handleDelete(code.secretCode)}\\r\\n                >\\r\\n                  <Trash className=\\\"w-4 h-4\\\" />\\r\\n                </Button>\\r\\n              </TableCell>\\r\\n            </TableRow>\\r\\n          ))}\\r\\n        </TableBody>\\r\\n      </Table>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\",\r\n      \"type\": \"registry:block\"\r\n    },\r\n    {\r\n      \"path\": \"./components/DeleteButton.tsx\",\r\n      \"content\": \"'use client';\\r\\n\\r\\nimport { Button } from './ui/button';\\r\\nimport { AddToast } from './AddToast';\\r\\nimport { useState } from 'react';\\r\\nimport { useRouter } from 'next/navigation';\\r\\n\\r\\nexport function DeleteButton({\\r\\n  deleteAction,\\r\\n  id,\\r\\n}: {\\r\\n  deleteAction: (\\r\\n    id: string | number\\r\\n  ) => Promise<{ success?: string; error?: string }>;\\r\\n  id: string | number;\\r\\n}) {\\r\\n  const router = useRouter();\\r\\n  const [toast, setToast] = useState<{\\r\\n    variant: 'success' | 'destructive' | 'default' | null;\\r\\n    title: string;\\r\\n    description: string;\\r\\n    callId: string;\\r\\n  } | null>(null);\\r\\n  return (\\r\\n    <Button\\r\\n      variant='destructive'\\r\\n      onClick={async () => {\\r\\n        const response = await deleteAction(id);\\r\\n        const randomId = Math.random().toString(36).substring(7);\\r\\n        setToast({\\r\\n          variant: response.success ? 'success' : 'destructive',\\r\\n          title: response.success ? 'Success' : 'Error',\\r\\n          description: response.success\\r\\n            ? 'Operation successful'\\r\\n            : response.error || 'An error occurred',\\r\\n          callId: randomId,\\r\\n        });\\r\\n        // refresh the page\\r\\n        router.refresh();\\r\\n      }}\\r\\n    >\\r\\n      <AddToast\\r\\n        variant={toast?.variant || null}\\r\\n        title={toast?.title || null}\\r\\n        description={toast?.description || null}\\r\\n        callId={toast?.callId || null}\\r\\n      />\\r\\n      Delete\\r\\n    </Button>\\r\\n  );\\r\\n}\\r\\n\",\r\n      \"type\": \"registry:block\"\r\n    },\r\n    {\r\n      \"path\": \"./components/EnvironmentCard.tsx\",\r\n      \"content\": \"import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\\r\\nimport { Environment, Code2Fa } from '@prisma/client';\\r\\nimport { Code2FaTable } from '@/components/Code2FaTable';\\r\\nimport { DeleteButton } from '@/components/DeleteButton';\\r\\nimport { deleteEnvironment } from '@/app/protected/dashboard/environments/actions';\\r\\n\\r\\n// Adjust the deleteEnvironment function to accept string | number\\r\\nconst adjustedDeleteEnvironment = async (id: string | number) => {\\r\\n  'use server';\\r\\n  const result = await deleteEnvironment(id.toString());\\r\\n  return {\\r\\n    ...result,\\r\\n  };\\r\\n};\\r\\n\\r\\nexport function EnvironmentCard({\\r\\n  environment,\\r\\n}: {\\r\\n  environment: Environment & { Codes2Fa: Code2Fa[] };\\r\\n}) {\\r\\n  return (\\r\\n    <Card>\\r\\n      <CardHeader>\\r\\n        <CardTitle className='text-xl font-bold flex flex-wrap justify-between'>\\r\\n          <div className='flex flex-col'>\\r\\n            <div>{environment.name}</div>\\r\\n            <div>{environment.type}</div>\\r\\n          </div>\\r\\n          <div className=''>\\r\\n            <DeleteButton\\r\\n              deleteAction={adjustedDeleteEnvironment}\\r\\n              id={environment.id}\\r\\n            />\\r\\n          </div>\\r\\n        </CardTitle>\\r\\n      </CardHeader>\\r\\n      <CardContent>\\r\\n        <Code2FaTable\\r\\n          codes={environment.Codes2Fa}\\r\\n          environmentId={environment.id}\\r\\n        />\\r\\n      </CardContent>\\r\\n    </Card>\\r\\n  );\\r\\n}\\r\\n\",\r\n      \"type\": \"registry:block\"\r\n    },\r\n    {\r\n      \"path\": \"./components/SecretInput.tsx\",\r\n      \"content\": \"'use client'\\r\\n\\r\\nimport { useState } from 'react';\\r\\nimport { Label } from \\\"@/components/ui/label\\\";\\r\\nimport { Input } from \\\"@/components/ui/input\\\";\\r\\nimport jsQR from 'jsqr';\\r\\n\\r\\nexport default function SecretInput() {\\r\\n\\tconst [secret, setSecret] = useState('');\\r\\n\\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n\\tconst [_, setImageFile] = useState<File | null>(null);\\r\\n\\r\\n\\tconst handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\r\\n\\t\\tconst file = e.target.files?.[0] || null;\\r\\n\\t\\tsetImageFile(file);\\r\\n\\t\\tif (file) {\\r\\n\\t\\t\\tconst reader = new FileReader();\\r\\n\\t\\t\\treader.onload = async () => {\\r\\n\\t\\t\\t\\tif (reader.result) {\\r\\n\\t\\t\\t\\t\\tprocessImage(reader.result as string);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t};\\r\\n\\t\\t\\treader.readAsDataURL(file);\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\r\\n\\tconst handlePaste = (e: React.ClipboardEvent<HTMLTextAreaElement>) => {\\r\\n\\t\\tconst items = Array.from(e.clipboardData.items);\\r\\n\\t\\tfor (const item of items) {\\r\\n\\t\\t\\tif (item.type.startsWith('image/')) {\\r\\n\\t\\t\\t\\tconst file = item.getAsFile();\\r\\n\\t\\t\\t\\tif (file) {\\r\\n\\t\\t\\t\\t\\tconst reader = new FileReader();\\r\\n\\t\\t\\t\\t\\treader.onload = async () => {\\r\\n\\t\\t\\t\\t\\t\\tif (reader.result) {\\r\\n\\t\\t\\t\\t\\t\\t\\tprocessImage(reader.result as string);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t};\\r\\n\\t\\t\\t\\t\\treader.readAsDataURL(file);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\r\\n\\tconst processImage = (imageSrc: string) => {\\r\\n\\t\\tconst img = new Image();\\r\\n\\t\\timg.src = imageSrc;\\r\\n\\t\\timg.onload = () => {\\r\\n\\t\\t\\tconst canvas = document.createElement('canvas');\\r\\n\\t\\t\\tcanvas.width = img.width;\\r\\n\\t\\t\\tcanvas.height = img.height;\\r\\n\\t\\t\\tconst ctx = canvas.getContext('2d');\\r\\n\\t\\t\\tif (ctx) {\\r\\n\\t\\t\\t\\tctx.drawImage(img, 0, 0, img.width, img.height);\\r\\n\\t\\t\\t\\tconst imageData = ctx.getImageData(0, 0, img.width, img.height);\\r\\n\\t\\t\\t\\tconst code = jsQR(imageData.data, imageData.width, imageData.height);\\r\\n\\t\\t\\t\\tif (code) {\\r\\n\\t\\t\\t\\t\\tconst Url = new URL(code.data);\\r\\n\\t\\t\\t\\t\\tconst secret = Url.searchParams.get('secret');\\r\\n\\t\\t\\t\\t\\tsetSecret(secret || '');\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tconsole.error('No QR code found.');\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t};\\r\\n\\t};\\r\\n\\r\\n\\treturn (\\r\\n\\t\\t<div className=\\\"space-y-2\\\">\\r\\n\\t\\t\\t<Label htmlFor=\\\"secret\\\">\\r\\n\\t\\t\\t\\tSecret&nbsp;\\r\\n\\t\\t\\t\\t<small>\\r\\n\\t\\t\\t\\t\\t( will accept pasted screenshot of a QR code )\\r\\n\\t\\t\\t\\t</small>\\r\\n\\t\\t\\t</Label>\\r\\n\\t\\t\\t<textarea\\r\\n\\t\\t\\t\\tid=\\\"secret\\\"\\r\\n\\t\\t\\t\\tname=\\\"secretCode\\\"\\r\\n\\t\\t\\t\\tvalue={secret || ''}\\r\\n\\t\\t\\t\\tonChange={(e) => setSecret(e.target.value)}\\r\\n\\t\\t\\t\\tonPaste={handlePaste}\\r\\n\\t\\t\\t\\tclassName=\\\"w-full p-2 border rounded-md\\\"\\r\\n\\t\\t\\t\\trows={4}\\r\\n\\t\\t\\t/>\\r\\n\\t\\t\\t<Label htmlFor=\\\"qr-file\\\">Upload QR Code Image</Label>\\r\\n\\t\\t\\t<Input\\r\\n\\t\\t\\t\\ttype=\\\"file\\\"\\r\\n\\t\\t\\t\\tid=\\\"qr-file\\\"\\r\\n\\t\\t\\t\\tname=\\\"qr-file\\\"\\r\\n\\t\\t\\t\\taccept=\\\"image/*\\\"\\r\\n\\t\\t\\t\\tonChange={handleFileChange}\\r\\n\\t\\t\\t/>\\r\\n\\t\\t</div>\\r\\n\\t);\\r\\n}\",\r\n      \"type\": \"registry:block\"\r\n    },\r\n    {\r\n      \"path\": \"./components/Sidebar.tsx\",\r\n      \"content\": \"'use client';\\r\\n\\r\\nimport Link from 'next/link';\\r\\nimport { Button } from '@/components/ui/button';\\r\\nimport { UserButton } from '@/components/UserButton';\\r\\nimport { ThemeToggleButton } from './ThemeToggleButton';\\r\\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\\r\\nimport { Menu } from 'lucide-react';\\r\\nimport { useState, useEffect } from 'react';\\r\\n\\r\\nconst navItems = [\\r\\n  { name: 'Dashboard', href: '/protected/dashboard' },\\r\\n  { name: 'Add Environment', href: '/protected/dashboard/add-environment' },\\r\\n];\\r\\n\\r\\nexport function Sidebar() {\\r\\n  const [isMobile, setIsMobile] = useState(false);\\r\\n\\r\\n  useEffect(() => {\\r\\n    const checkMobile = () => setIsMobile(window.innerWidth < 768);\\r\\n    checkMobile();\\r\\n    window.addEventListener('resize', checkMobile);\\r\\n    return () => window.removeEventListener('resize', checkMobile);\\r\\n  }, []);\\r\\n\\r\\n  const SidebarContent = () => (\\r\\n    <div className='flex flex-col h-full w-full bg-gray-100 dark:bg-gray-900 p-4 shadow-lg shadow-gray-500'>\\r\\n      <div className='mb-6 flex justify-between mt-10 md:mt-0'>\\r\\n        <ThemeToggleButton />\\r\\n        <UserButton />\\r\\n      </div>\\r\\n      <nav className='space-y-2'>\\r\\n        {navItems.map((item) => (\\r\\n          <Link key={item.href} href={item.href}>\\r\\n            <Button variant='ghost' className='w-full justify-start'>\\r\\n              {item.name}\\r\\n            </Button>\\r\\n          </Link>\\r\\n        ))}\\r\\n      </nav>\\r\\n    </div>\\r\\n  );\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      {isMobile ? (\\r\\n        <Sheet>\\r\\n          <SheetTrigger asChild>\\r\\n            <Button\\r\\n              variant='outline'\\r\\n              size='icon'\\r\\n              className='fixed top-1 right-4 z-50'\\r\\n            >\\r\\n              <Menu className='h-[1.2rem] w-[1.2rem]' />\\r\\n            </Button>\\r\\n          </SheetTrigger>\\r\\n          <SheetContent side='left' className='p-0 w-64'>\\r\\n            <SidebarContent />\\r\\n          </SheetContent>\\r\\n        </Sheet>\\r\\n      ) : (\\r\\n        <div\\r\\n          className='hidden md:flex md:w-44\\r\\n         md:flex-col md:fixed md:inset-y-0'\\r\\n        >\\r\\n          <SidebarContent />\\r\\n        </div>\\r\\n      )}\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n\",\r\n      \"type\": \"registry:block\"\r\n    },\r\n    {\r\n      \"path\": \"./components/ThemeToggleButton.tsx\",\r\n      \"content\": \"'use client';\\n\\nimport * as React from 'react';\\nimport { MoonIcon, SunIcon } from '@radix-ui/react-icons';\\nimport { useTheme } from 'next-themes';\\n\\nimport { Button } from '@/components/ui/button';\\nimport {\\n  DropdownMenu,\\n  DropdownMenuContent,\\n  DropdownMenuItem,\\n  DropdownMenuTrigger,\\n} from '@/components/ui/dropdown-menu';\\n\\nexport function ThemeToggleButton() {\\n  const { setTheme } = useTheme();\\n\\n  return (\\n    <DropdownMenu>\\n      <DropdownMenuTrigger asChild>\\n        <Button variant='outline' size='icon'>\\n          <SunIcon className='h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0' />\\n          <MoonIcon className='absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100' />\\n          <span className='sr-only'>Toggle theme</span>\\n        </Button>\\n      </DropdownMenuTrigger>\\n      <DropdownMenuContent align='end'>\\n        <DropdownMenuItem onClick={() => setTheme('light')}>\\n          Light\\n        </DropdownMenuItem>\\n        <DropdownMenuItem onClick={() => setTheme('dark')}>\\n          Dark\\n        </DropdownMenuItem>\\n        <DropdownMenuItem onClick={() => setTheme('system')}>\\n          System\\n        </DropdownMenuItem>\\n      </DropdownMenuContent>\\n    </DropdownMenu>\\n  );\\n}\\n\",\r\n      \"type\": \"registry:block\"\r\n    },\r\n    {\r\n      \"path\": \"./components/UserButton.tsx\",\r\n      \"content\": \"\\\"use client\\\";\\r\\n\\r\\nimport { Avatar, AvatarFallback } from \\\"@/components/ui/avatar\\\";\\r\\nimport { Button } from \\\"@/components/ui/button\\\";\\r\\nimport {\\r\\n  DropdownMenu,\\r\\n  DropdownMenuContent,\\r\\n  DropdownMenuItem,\\r\\n  DropdownMenuLabel,\\r\\n  DropdownMenuSeparator,\\r\\n  DropdownMenuTrigger,\\r\\n} from \\\"@/components/ui/dropdown-menu\\\";\\r\\nimport Link from \\\"next/link\\\";\\r\\nimport { LogOutButton } from \\\"@/components/login/LogOutButton\\\";\\r\\nimport { useSession } from \\\"next-auth/react\\\";\\r\\n\\r\\nexport function UserButton() {\\r\\n  const { data: session } = useSession();\\r\\n  const user = session?.user;\\r\\n\\r\\n  const initials = session?.user?.name\\r\\n    ? `${session.user.name[0]}${session.user.name[1] || \\\"\\\"}`\\r\\n    : \\\"UN\\\";\\r\\n\\r\\n  if (!session) {\\r\\n    return (\\r\\n      <Link href=\\\"/signin\\\">\\r\\n        <Button>Login</Button>\\r\\n      </Link>\\r\\n    );\\r\\n  }\\r\\n  return (\\r\\n    <DropdownMenu>\\r\\n      <DropdownMenuTrigger asChild>\\r\\n        <Button variant=\\\"ghost\\\" className=\\\"relative h-8 w-8 rounded-full\\\">\\r\\n          <Avatar className=\\\"h-8 w-8\\\">\\r\\n            <AvatarFallback>{initials}</AvatarFallback>\\r\\n          </Avatar>\\r\\n        </Button>\\r\\n      </DropdownMenuTrigger>\\r\\n      <DropdownMenuContent className=\\\"w-56\\\" align=\\\"end\\\" forceMount>\\r\\n        <DropdownMenuLabel className=\\\"font-normal\\\">\\r\\n          <div className=\\\"flex flex-col space-y-1\\\">\\r\\n            <p className=\\\"text-sm font-medium leading-none\\\">{user?.name}</p>\\r\\n            <p className=\\\"text-xs leading-none text-muted-foreground\\\">\\r\\n              {user?.email}\\r\\n            </p>\\r\\n          </div>\\r\\n        </DropdownMenuLabel>\\r\\n        <DropdownMenuSeparator />\\r\\n        <DropdownMenuItem>\\r\\n          <LogOutButton />\\r\\n        </DropdownMenuItem>\\r\\n      </DropdownMenuContent>\\r\\n    </DropdownMenu>\\r\\n  );\\r\\n}\\r\\n\",\r\n      \"type\": \"registry:block\"\r\n    },\r\n    {\r\n      \"path\": \"./components/login/LogOutButton.tsx\",\r\n      \"content\": \"\\\"use client\\\";\\r\\n\\r\\nimport { signOut } from \\\"next-auth/react\\\";\\r\\nimport { Button } from \\\"@/components/ui/button\\\";\\r\\n\\r\\nexport function LogOutButton() {\\r\\n  return (\\r\\n    <Button className=\\\"font-bold py-2 px-4 rounded\\\" onClick={() => signOut()}>\\r\\n      Sign Out\\r\\n    </Button>\\r\\n  );\\r\\n}\\r\\n\",\r\n      \"type\": \"registry:block\"\r\n    },\r\n    {\r\n      \"path\": \"./components/login/SignInForm.tsx\",\r\n      \"content\": \"\\\"use client\\\";\\r\\n\\r\\nimport { useState } from \\\"react\\\";\\r\\nimport { signIn } from \\\"next-auth/react\\\";\\r\\nimport { useRouter, useSearchParams } from \\\"next/navigation\\\";\\r\\nimport { Button } from \\\"@/components/ui/button\\\";\\r\\nimport { Input } from \\\"@/components/ui/input\\\";\\r\\nimport {\\r\\n  Card,\\r\\n  CardHeader,\\r\\n  CardTitle,\\r\\n  CardContent,\\r\\n  CardFooter,\\r\\n} from \\\"@/components/ui/card\\\";\\r\\nimport Link from \\\"next/link\\\";\\r\\n\\r\\nexport default function SignInForm() {\\r\\n  const [username, setUserName] = useState(\\\"\\\");\\r\\n  const [password, setPassword] = useState(\\\"\\\");\\r\\n  const [error, setError] = useState(\\\"\\\");\\r\\n  const router = useRouter();\\r\\n  const searchParams = useSearchParams();\\r\\n\\r\\n  const callbackUrl = searchParams.get(\\\"callbackUrl\\\") || \\\"/protected/dashboard\\\";\\r\\n\\r\\n  const handleSubmit = async (e: React.FormEvent) => {\\r\\n    e.preventDefault();\\r\\n    setError(\\\"\\\");\\r\\n\\r\\n    try {\\r\\n      const result = await signIn(\\\"credentials\\\", {\\r\\n        redirect: false,\\r\\n        username,\\r\\n        password,\\r\\n      });\\r\\n\\r\\n      if (result?.error) {\\r\\n        setError(\\\"Invalid email or password\\\");\\r\\n      } else {\\r\\n        router.push(callbackUrl); // Redirect to dashboard or home page\\r\\n      }\\r\\n    } catch (error) {\\r\\n      console.error(\\\"An error occurred:\\\", error);\\r\\n      setError(\\\"An error occurred. Please try again.\\\");\\r\\n    }\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <Card className=\\\"w-[350px]\\\">\\r\\n      <CardHeader>\\r\\n        <CardTitle>Sign In</CardTitle>\\r\\n      </CardHeader>\\r\\n      <CardContent>\\r\\n        <form onSubmit={handleSubmit}>\\r\\n          <div className=\\\"grid w-full items-center gap-4\\\">\\r\\n            <div className=\\\"flex flex-col space-y-1.5\\\">\\r\\n              <Input\\r\\n                id=\\\"user-name\\\"\\r\\n                placeholder=\\\"user name\\\"\\r\\n                type=\\\"text\\\"\\r\\n                value={username}\\r\\n                onChange={(e) => setUserName(e.target.value)}\\r\\n                required\\r\\n              />\\r\\n            </div>\\r\\n            <div className=\\\"flex flex-col space-y-1.5\\\">\\r\\n              <Input\\r\\n                id=\\\"password\\\"\\r\\n                placeholder=\\\"Password\\\"\\r\\n                type=\\\"password\\\"\\r\\n                value={password}\\r\\n                onChange={(e) => setPassword(e.target.value)}\\r\\n                required\\r\\n              />\\r\\n            </div>\\r\\n          </div>\\r\\n          {error && <p className=\\\"text-red-500 text-sm mt-2\\\">{error}</p>}\\r\\n          <CardFooter className=\\\"flex justify-between px-0 pt-4\\\">\\r\\n            <Button type=\\\"submit\\\">Sign In</Button>\\r\\n          </CardFooter>\\r\\n        </form>\\r\\n      </CardContent>\\r\\n      <CardFooter>\\r\\n        <Link href=\\\"/signup\\\" className=\\\"text-sm text-gray-500\\\">\\r\\n          {\\\"Don't have an account...?\\\"}\\r\\n          <Button variant=\\\"link\\\" className=\\\"ps-3 text-blue-500 font-bold\\\">\\r\\n            Sign Up\\r\\n          </Button>\\r\\n        </Link>\\r\\n      </CardFooter>\\r\\n    </Card>\\r\\n  );\\r\\n}\\r\\n\",\r\n      \"type\": \"registry:block\"\r\n    },\r\n    {\r\n      \"path\": \"./components/login/SignupForm.tsx\",\r\n      \"content\": \"import { redirect } from 'next/navigation';\\nimport prisma from '@/services/prisma';\\nimport bcrypt from 'bcryptjs';\\nimport { Input } from '@/components/ui/input';\\nimport { Button } from '@/components/ui/button';\\nimport { Label } from '@/components/ui/label';\\nimport SignupResult from '@/components/login/SignupResult';\\nimport {\\n  Card,\\n  CardContent,\\n  CardDescription,\\n  CardFooter,\\n  CardHeader,\\n  CardTitle,\\n} from '@/components/ui/card';\\n\\nexport default function SignupForm({\\n  searchParams,\\n}: {\\n  searchParams: { message: string };\\n}) {\\n  async function signUp(formData: FormData) {\\n    'use server';\\n\\n    const name = formData.get('name') as string;\\n    const email = formData.get('email') as string;\\n    const username = formData.get('username') as string;\\n    const password = formData.get('password') as string;\\n\\n    if (!name || !email || !username || !password) {\\n      throw redirect('/signup?message=All fields are required');\\n      return;\\n    }\\n\\n    try {\\n      const hashedPassword = await bcrypt.hash(password, 10);\\n      await prisma.user.create({\\n        data: {\\n          name,\\n          email,\\n          username,\\n          password: hashedPassword,\\n        },\\n      });\\n    } catch (error) {\\n      console.error('Error creating user:', error);\\n      throw redirect('/signup?message=Failed to create user');\\n    }\\n    throw redirect('/signin?message=Sign up successful!');\\n  }\\n\\n  return (\\n    <div className='flex justify-center items-center h-screen'>\\n      <Card className='w-[350px] shadow-md'>\\n        <CardHeader>\\n          <CardTitle>Sign Up</CardTitle>\\n          <CardDescription>Create an account to get started</CardDescription>\\n        </CardHeader>\\n        <form action={signUp} className='space-y-4 max-w-md mx-auto'>\\n          <CardContent>\\n            <SignupResult message={searchParams.message} />\\n            <div>\\n              <Label htmlFor='name'>Name</Label>\\n              <Input\\n                type='text'\\n                id='name'\\n                name='name'\\n                placeholder='Name'\\n                required\\n              />\\n            </div>\\n            <div>\\n              <Label htmlFor='email'>Email</Label>\\n              <Input\\n                type='email'\\n                id='email'\\n                name='email'\\n                placeholder='Email'\\n                required\\n              />\\n            </div>\\n            <div>\\n              <Label htmlFor='username'>Username</Label>\\n              <Input\\n                type='text'\\n                id='username'\\n                name='username'\\n                placeholder='Username'\\n                required\\n              />\\n            </div>\\n            <div>\\n              <Label htmlFor='password'>Password</Label>\\n              <Input\\n                type='password'\\n                id='password'\\n                name='password'\\n                placeholder='Password'\\n                required\\n              />\\n            </div>\\n          </CardContent>\\n          <CardFooter>\\n            <Button type='submit' className='w-full'>\\n              Sign Up\\n            </Button>\\n          </CardFooter>\\n        </form>\\n      </Card>\\n    </div>\\n  );\\n}\\n\",\r\n      \"type\": \"registry:block\"\r\n    },\r\n    {\r\n      \"path\": \"./components/login/SignupResult.tsx\",\r\n      \"content\": \"'use client';\\n\\nimport { useEffect, useRef } from 'react';\\nimport { useToast } from '@/hooks/use-toast';\\n\\ninterface SignupResultProps {\\n  message?: string | null;\\n}\\n\\nexport default function SignupResult({ message }: SignupResultProps) {\\n  const { toast } = useToast();\\n  const toastShownRef = useRef(false);\\n\\n  useEffect(() => {\\n    if (message && !toastShownRef.current) {\\n      const isError = message.includes('Failed');\\n      console.log('Attempting to show toast:', { isError, message });\\n\\n      toast({\\n        title: isError ? 'Error' : 'Success',\\n        description: message,\\n        variant: isError ? 'destructive' : 'success',\\n        duration: 5000,\\n      });\\n\\n      toastShownRef.current = true;\\n    }\\n  }, [message, toast]);\\n\\n  return null; // This component doesn't render anything visible\\n}\\n\",\r\n      \"type\": \"registry:block\"\r\n    },\r\n    {\r\n      \"path\": \"./components/providers/ThemeProvider.tsx\",\r\n      \"content\": \"'use client';\\n\\nimport * as React from 'react';\\nimport { ThemeProvider as NextThemesProvider } from 'next-themes';\\nimport { type ThemeProviderProps } from 'next-themes/dist/types';\\n\\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;\\n}\\n\",\r\n      \"type\": \"registry:block\"\r\n    },\r\n    {\r\n      \"path\": \"./components/ui/toaster.tsx\",\r\n      \"content\": \"\\\"use client\\\"\\n\\nimport { useToast } from \\\"@/hooks/use-toast\\\"\\nimport {\\n  Toast,\\n  ToastClose,\\n  ToastDescription,\\n  ToastProvider,\\n  ToastTitle,\\n  ToastViewport,\\n} from \\\"@/components/ui/toast\\\"\\n\\nexport function Toaster() {\\n  const { toasts } = useToast()\\n\\n  return (\\n    <ToastProvider>\\n      {toasts.map(function ({ id, title, description, action, ...props }) {\\n        return (\\n          <Toast key={id} {...props}>\\n            <div className=\\\"grid gap-1\\\">\\n              {title && <ToastTitle>{title}</ToastTitle>}\\n              {description && (\\n                <ToastDescription>{description}</ToastDescription>\\n              )}\\n            </div>\\n            {action}\\n            <ToastClose />\\n          </Toast>\\n        )\\n      })}\\n      <ToastViewport />\\n    </ToastProvider>\\n  )\\n}\\n\",\r\n      \"type\": \"registry:ui\"\r\n    },\r\n    {\r\n      \"path\": \"./hooks/use-toast.ts\",\r\n      \"content\": \"\\\"use client\\\"\\r\\n\\r\\n// Inspired by react-hot-toast library\\r\\nimport * as React from \\\"react\\\"\\r\\n\\r\\nimport type {\\r\\n  ToastActionElement,\\r\\n  ToastProps,\\r\\n} from \\\"@/components/ui/toast\\\"\\r\\n\\r\\nconst TOAST_LIMIT = 1\\r\\nconst TOAST_REMOVE_DELAY = 1000000\\r\\n\\r\\ntype ToasterToast = ToastProps & {\\r\\n  id: string\\r\\n  title?: React.ReactNode\\r\\n  description?: React.ReactNode\\r\\n  action?: ToastActionElement\\r\\n}\\r\\n\\r\\ntype ActionTypes = {\\r\\n  ADD_TOAST: \\\"ADD_TOAST\\\";\\r\\n  UPDATE_TOAST: \\\"UPDATE_TOAST\\\";\\r\\n  DISMISS_TOAST: \\\"DISMISS_TOAST\\\";\\r\\n  REMOVE_TOAST: \\\"REMOVE_TOAST\\\";\\r\\n};\\r\\n\\r\\nconst actionTypes: ActionTypes = {\\r\\n  ADD_TOAST: \\\"ADD_TOAST\\\",\\r\\n  UPDATE_TOAST: \\\"UPDATE_TOAST\\\",\\r\\n  DISMISS_TOAST: \\\"DISMISS_TOAST\\\",\\r\\n  REMOVE_TOAST: \\\"REMOVE_TOAST\\\",\\r\\n} as const;\\r\\n\\r\\n// Use actionTypes somewhere in your code to avoid the unused variable error\\r\\nconsole.log(actionTypes.ADD_TOAST);\\r\\n\\r\\nlet count = 0\\r\\n\\r\\nfunction genId() {\\r\\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\\r\\n  return count.toString()\\r\\n}\\r\\n\\r\\ntype ActionType = typeof actionTypes\\r\\n\\r\\ntype Action =\\r\\n  | {\\r\\n      type: ActionType[\\\"ADD_TOAST\\\"]\\r\\n      toast: ToasterToast\\r\\n    }\\r\\n  | {\\r\\n      type: ActionType[\\\"UPDATE_TOAST\\\"]\\r\\n      toast: Partial<ToasterToast>\\r\\n    }\\r\\n  | {\\r\\n      type: ActionType[\\\"DISMISS_TOAST\\\"]\\r\\n      toastId?: ToasterToast[\\\"id\\\"]\\r\\n    }\\r\\n  | {\\r\\n      type: ActionType[\\\"REMOVE_TOAST\\\"]\\r\\n      toastId?: ToasterToast[\\\"id\\\"]\\r\\n    }\\r\\n\\r\\ninterface State {\\r\\n  toasts: ToasterToast[]\\r\\n}\\r\\n\\r\\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\\r\\n\\r\\nconst addToRemoveQueue = (toastId: string) => {\\r\\n  if (toastTimeouts.has(toastId)) {\\r\\n    return\\r\\n  }\\r\\n\\r\\n  const timeout = setTimeout(() => {\\r\\n    toastTimeouts.delete(toastId)\\r\\n    dispatch({\\r\\n      type: \\\"REMOVE_TOAST\\\",\\r\\n      toastId: toastId,\\r\\n    })\\r\\n  }, TOAST_REMOVE_DELAY)\\r\\n\\r\\n  toastTimeouts.set(toastId, timeout)\\r\\n}\\r\\n\\r\\nexport const reducer = (state: State, action: Action): State => {\\r\\n  switch (action.type) {\\r\\n    case \\\"ADD_TOAST\\\":\\r\\n      return {\\r\\n        ...state,\\r\\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\\r\\n      }\\r\\n\\r\\n    case \\\"UPDATE_TOAST\\\":\\r\\n      return {\\r\\n        ...state,\\r\\n        toasts: state.toasts.map((t) =>\\r\\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\\r\\n        ),\\r\\n      }\\r\\n\\r\\n    case \\\"DISMISS_TOAST\\\": {\\r\\n      const { toastId } = action\\r\\n\\r\\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\\r\\n      // but I'll keep it here for simplicity\\r\\n      if (toastId) {\\r\\n        addToRemoveQueue(toastId)\\r\\n      } else {\\r\\n        state.toasts.forEach((toast) => {\\r\\n          addToRemoveQueue(toast.id)\\r\\n        })\\r\\n      }\\r\\n\\r\\n      return {\\r\\n        ...state,\\r\\n        toasts: state.toasts.map((t) =>\\r\\n          t.id === toastId || toastId === undefined\\r\\n            ? {\\r\\n                ...t,\\r\\n                open: false,\\r\\n              }\\r\\n            : t\\r\\n        ),\\r\\n      }\\r\\n    }\\r\\n    case \\\"REMOVE_TOAST\\\":\\r\\n      if (action.toastId === undefined) {\\r\\n        return {\\r\\n          ...state,\\r\\n          toasts: [],\\r\\n        }\\r\\n      }\\r\\n      return {\\r\\n        ...state,\\r\\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\\r\\n      }\\r\\n  }\\r\\n}\\r\\n\\r\\nconst listeners: Array<(state: State) => void> = []\\r\\n\\r\\nlet memoryState: State = { toasts: [] }\\r\\n\\r\\nfunction dispatch(action: Action) {\\r\\n  memoryState = reducer(memoryState, action)\\r\\n  listeners.forEach((listener) => {\\r\\n    listener(memoryState)\\r\\n  })\\r\\n}\\r\\n\\r\\ntype Toast = Omit<ToasterToast, \\\"id\\\">\\r\\n\\r\\nfunction toast({ ...props }: Toast) {\\r\\n  const id = genId()\\r\\n\\r\\n  const update = (props: ToasterToast) =>\\r\\n    dispatch({\\r\\n      type: \\\"UPDATE_TOAST\\\",\\r\\n      toast: { ...props, id },\\r\\n    })\\r\\n  const dismiss = () => dispatch({ type: \\\"DISMISS_TOAST\\\", toastId: id })\\r\\n\\r\\n  dispatch({\\r\\n    type: \\\"ADD_TOAST\\\",\\r\\n    toast: {\\r\\n      ...props,\\r\\n      id,\\r\\n      open: true,\\r\\n      onOpenChange: (open) => {\\r\\n        if (!open) dismiss()\\r\\n      },\\r\\n    },\\r\\n  })\\r\\n\\r\\n  return {\\r\\n    id: id,\\r\\n    dismiss,\\r\\n    update,\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction useToast() {\\r\\n  const [state, setState] = React.useState<State>(memoryState)\\r\\n\\r\\n  React.useEffect(() => {\\r\\n    listeners.push(setState)\\r\\n    return () => {\\r\\n      const index = listeners.indexOf(setState)\\r\\n      if (index > -1) {\\r\\n        listeners.splice(index, 1)\\r\\n      }\\r\\n    }\\r\\n  }, [state])\\r\\n\\r\\n  return {\\r\\n    ...state,\\r\\n    toast,\\r\\n    dismiss: (toastId?: string) => dispatch({ type: \\\"DISMISS_TOAST\\\", toastId }),\\r\\n  }\\r\\n}\\r\\n\\r\\nexport { useToast, toast }\\r\\n\",\r\n      \"type\": \"registry:hook\"\r\n    },\r\n    {\r\n      \"path\": \"./lib/totp.ts\",\r\n      \"content\": \"import { TOTP } from 'totp-generator';\\n\\nexport function generateTOTP(secret: string): { otp: string; expires: number } {\\n  console.log('generating TOTP', secret);\\n  const { otp, expires } = TOTP.generate(secret);\\n\\n  return { otp, expires };\\n}\\n\",\r\n      \"type\": \"registry:lib\"\r\n    },\r\n    {\r\n      \"path\": \"./lib/utils.ts\",\r\n      \"content\": \"import { clsx, type ClassValue } from \\\"clsx\\\"\\nimport { twMerge } from \\\"tailwind-merge\\\"\\n\\nexport function cn(...inputs: ClassValue[]) {\\n  return twMerge(clsx(inputs))\\n}\\n\",\r\n      \"type\": \"registry:lib\"\r\n    },\r\n    {\r\n      \"path\": \"./middleware.ts\",\r\n      \"content\": \"import { NextResponse } from 'next/server';\\nimport { auth } from '@/auth';\\n\\nexport default auth((req) => {\\n  const isProtectedRoute =\\n    req.nextUrl.pathname.startsWith('/protected') ||\\n    req.nextUrl.pathname.startsWith('/api/protected');\\n\\n  if (isProtectedRoute && !req.auth) {\\n    // Add the original URL as a callbackUrl query parameter\\n    const signInUrl = new URL('/signin', req.url);\\n\\n    signInUrl.searchParams.set('callbackUrl', req.nextUrl.pathname);\\n\\n    return NextResponse.redirect(signInUrl);\\n  }\\n});\\n\\nexport const config = {\\n  matcher: ['/((?!api|_next/static|_next/image|favicon.ico).*)'],\\n};\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./middleware.ts\"\r\n    },\r\n    {\r\n      \"path\": \"./services/prisma.ts\",\r\n      \"content\": \"import { PrismaClient } from \\\"@prisma/client\\\"\\n\\nconst prisma = new PrismaClient()\\n\\nexport default prisma\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./services/prisma.ts\"\r\n    },\r\n    {\r\n      \"path\": \"./styles/global.css\",\r\n      \"content\": \"@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n@layer base {\\n  :root {\\n    --background: 0 0% 100%;\\n    --foreground: 240 10% 3.9%;\\n    --card: 0 0% 100%;\\n    --card-foreground: 240 10% 3.9%;\\n    --popover: 0 0% 100%;\\n    --popover-foreground: 240 10% 3.9%;\\n    --primary: 240 5.9% 10%;\\n    --primary-foreground: 0 0% 98%;\\n    --secondary: 240 4.8% 95.9%;\\n    --secondary-foreground: 240 5.9% 10%;\\n    --muted: 240 4.8% 95.9%;\\n    --muted-foreground: 240 3.8% 46.1%;\\n    --accent: 240 4.8% 95.9%;\\n    --accent-foreground: 240 5.9% 10%;\\n    --destructive: 0 84.2% 60.2%;\\n    --destructive-foreground: 0 0% 98%;\\n    --border: 240 5.9% 90%;\\n    --input: 240 5.9% 90%;\\n    --ring: 240 10% 3.9%;\\n    --chart-1: 12 76% 61%;\\n    --chart-2: 173 58% 39%;\\n    --chart-3: 197 37% 24%;\\n    --chart-4: 43 74% 66%;\\n    --chart-5: 27 87% 67%;\\n    --radius: 0.5rem\\n  }\\n  .dark {\\n    --background: 240 10% 3.9%;\\n    --foreground: 0 0% 98%;\\n    --card: 240 10% 3.9%;\\n    --card-foreground: 0 0% 98%;\\n    --popover: 240 10% 3.9%;\\n    --popover-foreground: 0 0% 98%;\\n    --primary: 0 0% 98%;\\n    --primary-foreground: 240 5.9% 10%;\\n    --secondary: 240 3.7% 15.9%;\\n    --secondary-foreground: 0 0% 98%;\\n    --muted: 240 3.7% 15.9%;\\n    --muted-foreground: 240 5% 64.9%;\\n    --accent: 240 3.7% 15.9%;\\n    --accent-foreground: 0 0% 98%;\\n    --destructive: 0 62.8% 30.6%;\\n    --destructive-foreground: 0 0% 98%;\\n    --border: 240 3.7% 15.9%;\\n    --input: 240 3.7% 15.9%;\\n    --ring: 240 4.9% 83.9%;\\n    --chart-1: 220 70% 50%;\\n    --chart-2: 160 60% 45%;\\n    --chart-3: 30 80% 55%;\\n    --chart-4: 280 65% 60%;\\n    --chart-5: 340 75% 55%\\n  }\\n}\\n@layer base {\\n  * {\\n    @apply border-border;\\n  }\\n  body {\\n    @apply bg-background text-foreground;\\n  }\\n}\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"./styles/global.css\"\r\n    },\r\n    {\r\n      \"path\": \"./tsconfig.json\",\r\n      \"content\": \"{\\n  \\\"compilerOptions\\\": {\\n    \\\"lib\\\": [\\\"dom\\\", \\\"dom.iterable\\\", \\\"esnext\\\"],\\n    \\\"allowJs\\\": true,\\n    \\\"skipLibCheck\\\": true,\\n    \\\"strict\\\": true,\\n    \\\"noEmit\\\": true,\\n    \\\"esModuleInterop\\\": true,\\n    \\\"module\\\": \\\"esnext\\\",\\n    \\\"moduleResolution\\\": \\\"bundler\\\",\\n    \\\"resolveJsonModule\\\": true,\\n    \\\"isolatedModules\\\": true,\\n    \\\"jsx\\\": \\\"preserve\\\",\\n    \\\"incremental\\\": true,\\n    \\\"plugins\\\": [\\n      {\\n        \\\"name\\\": \\\"next\\\"\\n      }\\n    ],\\n    \\\"paths\\\": {\\n      \\\"@/*\\\": [\\\"./src/*\\\"]\\n    }\\n  },\\n  \\\"include\\\": [\\\"next-env.d.ts\\\", \\\"**/*.ts\\\", \\\"**/*.tsx\\\", \\\".next/types/**/*.ts\\\"],\\n  \\\"exclude\\\": [\\\"node_modules\\\"]\\n}\\n\",\r\n      \"type\": \"registry:example\",\r\n      \"target\": \"~/tsconfig.json\"\r\n    }\r\n  ],\r\n  \"tailwind\": {},\r\n  \"cssVars\": {},\r\n  \"meta\": {}\r\n}\r\n",
      "type": "registry:example",
      "target": "~/multi2FA.json"
    },
    {
      "path": "./postcss.config.js",
      "content": "module.exports = {\r\n  plugins: {\r\n    tailwindcss: {},\r\n    autoprefixer: {},\r\n  },\r\n}\r\n",
      "type": "registry:example",
      "target": "~/postcss.config.js"
    },
    {
      "path": "./prisma\\migrations\\20241014112709_init\\migration.sql",
      "content": "-- CreateTable\r\nCREATE TABLE \"User\" (\r\n    \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\r\n    \"email\" TEXT NOT NULL,\r\n    \"username\" TEXT NOT NULL,\r\n    \"name\" TEXT\r\n);\r\n\r\n-- CreateIndex\r\nCREATE UNIQUE INDEX \"User_email_key\" ON \"User\"(\"email\");\r\n\r\n-- CreateIndex\r\nCREATE UNIQUE INDEX \"User_username_key\" ON \"User\"(\"username\");\r\n",
      "type": "registry:example",
      "target": "~/prisma\\migrations\\20241014112709_init\\migration.sql"
    },
    {
      "path": "./prisma\\migrations\\20241014115814_added_password_to_user\\migration.sql",
      "content": "/*\r\n  Warnings:\r\n\r\n  - Added the required column `password` to the `User` table without a default value. This is not possible if the table is not empty.\r\n\r\n*/\r\n-- RedefineTables\r\nPRAGMA defer_foreign_keys=ON;\r\nPRAGMA foreign_keys=OFF;\r\nCREATE TABLE \"new_User\" (\r\n    \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\r\n    \"email\" TEXT NOT NULL,\r\n    \"username\" TEXT NOT NULL,\r\n    \"name\" TEXT,\r\n    \"password\" TEXT NOT NULL\r\n);\r\nINSERT INTO \"new_User\" (\"email\", \"id\", \"name\", \"username\") SELECT \"email\", \"id\", \"name\", \"username\" FROM \"User\";\r\nDROP TABLE \"User\";\r\nALTER TABLE \"new_User\" RENAME TO \"User\";\r\nCREATE UNIQUE INDEX \"User_email_key\" ON \"User\"(\"email\");\r\nCREATE UNIQUE INDEX \"User_username_key\" ON \"User\"(\"username\");\r\nPRAGMA foreign_keys=ON;\r\nPRAGMA defer_foreign_keys=OFF;\r\n",
      "type": "registry:example",
      "target": "~/prisma\\migrations\\20241014115814_added_password_to_user\\migration.sql"
    },
    {
      "path": "./prisma\\migrations\\20241014163717_link_environments_to_users\\migration.sql",
      "content": "-- CreateTable\r\nCREATE TABLE \"Environment\" (\r\n    \"id\" TEXT NOT NULL PRIMARY KEY,\r\n    \"name\" TEXT NOT NULL,\r\n    \"type\" TEXT NOT NULL,\r\n    \"userId\" INTEGER NOT NULL,\r\n    CONSTRAINT \"Environment_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE\r\n);\r\n",
      "type": "registry:example",
      "target": "~/prisma\\migrations\\20241014163717_link_environments_to_users\\migration.sql"
    },
    {
      "path": "./prisma\\migrations\\20241014164725_link_code2_fa_to_environments\\migration.sql",
      "content": "-- CreateTable\r\nCREATE TABLE \"Code2Fa\" (\r\n    \"SecretCode\" TEXT NOT NULL PRIMARY KEY,\r\n    \"name\" TEXT NOT NULL,\r\n    \"EnvironmentId\" TEXT NOT NULL,\r\n    CONSTRAINT \"Code2Fa_EnvironmentId_fkey\" FOREIGN KEY (\"EnvironmentId\") REFERENCES \"Environment\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE\r\n);\r\n",
      "type": "registry:example",
      "target": "~/prisma\\migrations\\20241014164725_link_code2_fa_to_environments\\migration.sql"
    },
    {
      "path": "./prisma\\migrations\\20241015001601_change_key_name\\migration.sql",
      "content": "/*\r\n  Warnings:\r\n\r\n  - The primary key for the `Code2Fa` table will be changed. If it partially fails, the table could be left without primary key constraint.\r\n  - You are about to drop the column `SecretCode` on the `Code2Fa` table. All the data in the column will be lost.\r\n  - Added the required column `secretCode` to the `Code2Fa` table without a default value. This is not possible if the table is not empty.\r\n\r\n*/\r\n-- RedefineTables\r\nPRAGMA defer_foreign_keys=ON;\r\nPRAGMA foreign_keys=OFF;\r\nCREATE TABLE \"new_Code2Fa\" (\r\n    \"secretCode\" TEXT NOT NULL PRIMARY KEY,\r\n    \"name\" TEXT NOT NULL,\r\n    \"EnvironmentId\" TEXT NOT NULL,\r\n    CONSTRAINT \"Code2Fa_EnvironmentId_fkey\" FOREIGN KEY (\"EnvironmentId\") REFERENCES \"Environment\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE\r\n);\r\nINSERT INTO \"new_Code2Fa\" (\"secretCode\", \"name\", \"EnvironmentId\")\r\nSELECT COALESCE(\"secretCode\", ''), \"name\", \"EnvironmentId\" FROM \"Code2Fa\";\r\nDROP TABLE \"Code2Fa\";\r\nALTER TABLE \"new_Code2Fa\" RENAME TO \"Code2Fa\";\r\nPRAGMA foreign_keys=ON;\r\nPRAGMA defer_foreign_keys=OFF;\r\n",
      "type": "registry:example",
      "target": "~/prisma\\migrations\\20241015001601_change_key_name\\migration.sql"
    },
    {
      "path": "./prisma\\migrations\\migration_lock.toml",
      "content": "# Please do not edit this file manually\r\n# It should be added in your version-control system (i.e. Git)\r\nprovider = \"sqlite\"",
      "type": "registry:example",
      "target": "~/prisma\\migrations\\migration_lock.toml"
    },
    {
      "path": "./prisma\\schema.prisma",
      "content": "// This is your Prisma schema file,\r\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\r\n\r\ngenerator client {\r\n  provider = \"prisma-client-js\"\r\n}\r\n\r\ndatasource db {\r\n  provider = \"sqlite\"\r\n  url      = env(\"DATABASE_URL\")\r\n}\r\n\r\nmodel User {\r\n  id            Int     @id @default(autoincrement())\r\n  email         String  @unique\r\n  username      String @unique\r\n  name          String?\r\n  password      String\r\n  environments  Environment[]\r\n}\r\n\r\nmodel Environment{\r\n  id            String @id @default(cuid())\r\n  name          String\r\n  type          String\r\n  userId        Int\r\n  user          User @relation(fields: [userId], references: [id], onDelete: Restrict)  \r\n  Codes2Fa      Code2Fa[]   \r\n}\r\n\r\nmodel Code2Fa {\r\n  secretCode    String @id\r\n  name          String\r\n  EnvironmentId String\r\n  environment   Environment @relation(fields: [EnvironmentId], references: [id], onDelete: Restrict)\r\n}",
      "type": "registry:example",
      "target": "~/prisma\\schema.prisma"
    },
    {
      "path": "./README.md",
      "content": "This is a [Next.js](https://nextjs.org) project bootstrapped with [\r\n`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\r\n\r\n## Getting Started\r\n\r\n### install the project\r\n\r\nFirst, install the project:\r\n\r\n```bash\r\nnpm install\r\n```\r\n\r\ninstantiate sqlite database and migrate with prisma\r\n\r\n```bash\r\nnpx prisma migrate dev\r\n```\r\n\r\n### run the project in development\r\n\r\nFirst, run the development server:\r\n\r\n```bash\r\nnpm run dev\r\n# or\r\nyarn dev\r\n# or\r\npnpm dev\r\n# or\r\nbun dev\r\n```\r\n\r\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\r\n\r\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\r\n\r\n## Dependencies\r\n\r\n### backend\r\n\r\n- [Prisma](https://www.prisma.io/)\r\n\r\n### frontend\r\n\r\n- [React](https://reactjs.org/)\r\n- [Next.js](https://nextjs.org)\r\n- [Tailwind CSS](https://tailwindcss.com/)\r\n- [ShadcnUi](https://shadcn-ui.vercel.app/)\r\n\r\n## run the project\r\n\r\nbuild the project first\r\n\r\n```bash\r\nnpm run build\r\nnpm start\r\n```\r\n\r\n### .bat option\r\n\r\nin the project root there is a .bat file edit with the folder path and it can be placed as a shortcut it will open your browser on the correct port.\r\n\r\n### build a boilerplate\r\n\r\ngenerate the json to serve :\r\n\r\n```bash\r\nnpx shadcn-differ@latest > multi2FA.json\r\n```\r\n\r\ndownload and install a boiler plate : \r\n\r\n```bash\r\nnpx shadcn add \"url to the raw json to install\"\r\n```\r\n",
      "type": "registry:example",
      "target": "~/README.md"
    },
    {
      "path": "./run.bat",
      "content": "@echo off\r\ncd \"path to project folder\"\r\n\r\n:: echo Would you like to rebuild the app? (y/n)\r\n:: set /p rebuild=\r\n\r\n:: if /i \"%rebuild%\"==\"y\" (\r\n::    echo Rebuilding the app...\r\n::    call npm run build\r\n::    if %errorlevel% neq 0 (\r\n::        echo Failed to build the app. Press any key to exit.\r\n::        pause > nul\r\n::        exit /b\r\n::    )\r\n:: )\r\n\r\nGOTO :endOfOldVersion\r\necho Starting the app...\r\ncall npm start\r\nif %errorlevel% neq 0 (\r\n    echo Failed to start the app. Press any key to exit.\r\n    pause > nul\r\n    exit /b\r\n)\r\n\r\necho App is running. Press any key to close.\r\npause > nul\r\n\r\n:endOfOldVersion\r\necho Starting the app...\r\n\r\n:: Start the Next.js app in a new window without blocking the script\r\nstart \"\" cmd /c \"npm start\"\r\n\r\n:: Wait for a few seconds to give the app some time to start\r\n:: timeout /t 1 /nobreak >nul\r\n\r\n:: Once the port is open, open the browser\r\nstart \"\" \"http://localhost:3030\"\r\n\r\n::close unecessarry window\r\nexit \r\n\r\n:: echo App is running. Press any key to close.\r\n:: pause > nul\r\n",
      "type": "registry:example",
      "target": "~/run.bat"
    },
    {
      "path": "./src\\app\\api\\auth\\[...nextauth]\\route.ts",
      "content": "import { handlers } from \"@/auth\"\r\n\r\nexport const { GET, POST } = handlers\r\n",
      "type": "registry:example",
      "target": "~/src\\app\\api\\auth\\[...nextauth]\\route.ts"
    },
    {
      "path": "./src\\app\\api\\protected\\code2fa\\route.ts",
      "content": "import { NextResponse } from 'next/server';\r\nimport prisma from '@/services/prisma';\r\nimport { generateTOTP } from '@/lib/totp'; // You'll need to implement this function\r\n\r\nexport async function GET(request: Request) {\r\n  const { searchParams } = new URL(request.url);\r\n  const secretCode = searchParams.get('secretCode');\r\n  const environmentId = searchParams.get('environmentId');\r\n\r\n  if (!secretCode || !environmentId) {\r\n    return NextResponse.json({ error: 'Missing parameters' }, { status: 400 });\r\n  }\r\n\r\n  try {\r\n    const code2fa = await prisma.code2Fa.findUnique({\r\n      where: { secretCode: secretCode, EnvironmentId: environmentId },\r\n    });\r\n\r\n    if (!code2fa) {\r\n      return NextResponse.json({ error: 'Code not found' }, { status: 404 });\r\n    }\r\n\r\n    const totpCode = generateTOTP(code2fa.secretCode);\r\n\r\n    return NextResponse.json({ code: totpCode.otp, expires: totpCode.expires });\r\n  } catch (error) {\r\n    console.error('Error generating TOTP:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\app\\api\\protected\\code2fa\\route.ts"
    },
    {
      "path": "./src\\app\\layout.tsx",
      "content": "import { SessionProvider } from 'next-auth/react';\r\nimport '@/styles/global.css';\r\nimport { Toaster } from '@/components/ui/toaster';\r\nimport { Sidebar } from '@/components/Sidebar';\r\nimport { ThemeProvider } from '@/components/providers/ThemeProvider';\r\n\r\nexport const metadata = {\r\n  title: 'Next.js',\r\n  description: 'Generated by Next.js',\r\n};\r\n\r\nexport default function RootLayout({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  return (\r\n    <html lang='en'>\r\n      <body>\r\n        <SessionProvider>\r\n          <ThemeProvider\r\n            attribute='class'\r\n            defaultTheme='system'\r\n            enableSystem\r\n            disableTransitionOnChange\r\n          >\r\n            <div className='flex h-screen bg-gray-100 dark:bg-gray-900'>\r\n              <Sidebar />\r\n              <main className='flex-1 mt-3 md:mt-0 md:ml-44'>{children}</main>\r\n            </div>\r\n          </ThemeProvider>\r\n        </SessionProvider>\r\n        <Toaster />\r\n      </body>\r\n    </html>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\app\\layout.tsx"
    },
    {
      "path": "./src\\app\\page.tsx",
      "content": "export default function Home() {\r\n  return (\r\n    <div className=\"m-4\">\r\n      <h1 className=\"text-4xl font-bold\">2FA Totp</h1>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\app\\page.tsx"
    },
    {
      "path": "./src\\app\\protected\\dashboard\\add-environment\\page.tsx",
      "content": "import { auth } from \"@/auth\";\r\nimport { AddToast } from \"@/components/AddToast\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\";\r\n\r\nimport { Input } from \"@/components/ui/input\";\r\nimport prisma from \"@/services/prisma\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { redirect } from \"next/navigation\";\r\n\r\nexport default function AddEnvironmentPage({\r\n  searchParams,\r\n}: {\r\n  searchParams: { [key: string]: string | string[] | undefined };\r\n}) {\r\n  const addEnvironment = async (formData: FormData) => {\r\n    \"use server\";\r\n    const session = await auth();\r\n    const name = formData.get(\"name\") as string;\r\n    const type = formData.get(\"type\") as string;\r\n    const randomCallId = Math.random().toString(36).substring(2, 15);\r\n\r\n    if (!session?.user) {\r\n      throw redirect(\"/signin\");\r\n    }\r\n    try {\r\n      const user = await prisma.user.findUnique({\r\n        where: { email: session?.user?.email as string },\r\n      });\r\n\r\n      await prisma.environment.create({\r\n        data: {\r\n          name,\r\n          type,\r\n          userId: user?.id as unknown as number,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw redirect(\r\n        `/protected/dashboard/add-environment?title=Error&description=Failed+to+create+environment&variant=destructive&call=${randomCallId}`\r\n      );\r\n    }\r\n    throw redirect(\r\n      \"/protected/dashboard/?title=Success&description=Environment+added+successfully&variant=success\"\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto mt-8\">\r\n      <AddToast\r\n        title={searchParams.title as string}\r\n        description={searchParams.description as string}\r\n        variant={\r\n          searchParams.variant as\r\n            | \"default\"\r\n            | \"destructive\"\r\n            | \"success\"\r\n            | null\r\n            | undefined\r\n        }\r\n        callId={searchParams.call as string}\r\n      />\r\n      <Card className=\"shadow-md mx-2 md:w-1/2 md:mx-auto\">\r\n        <CardHeader>\r\n          <CardTitle>\r\n            <div className=\"text-2xl font-bold\">Add an environment</div>\r\n          </CardTitle>\r\n          <CardDescription>Add an environment to your account</CardDescription>\r\n        </CardHeader>\r\n        <form action={addEnvironment}>\r\n          <CardContent>\r\n            <div className=\"flex flex-col gap-2\">\r\n              <div className=\"flex flex-row flex-wrap\">\r\n                <div className=\"flex flex-col w-full lg:w-1/2 lg:pr-2 mb-2\">\r\n                  <Label className=\"mb-1\" htmlFor=\"environment-name\">\r\n                    Environment Name\r\n                  </Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    id=\"environment-name\"\r\n                    placeholder=\"Environment Name\"\r\n                    required\r\n                  />\r\n                </div>\r\n                <div className=\"flex flex-col w-full lg:w-1/2 lg:pl-2\">\r\n                  <Label className=\"mb-1\" htmlFor=\"environment-type\">\r\n                    Environment Type\r\n                  </Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"type\"\r\n                    id=\"environment-type\"\r\n                    placeholder=\"Environment Type\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n          <CardFooter className=\"flex justify-end pt-4\">\r\n            <Button type=\"submit\">Save</Button>\r\n          </CardFooter>\r\n        </form>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\app\\protected\\dashboard\\add-environment\\page.tsx"
    },
    {
      "path": "./src\\app\\protected\\dashboard\\environments\\actions.ts",
      "content": "'use server';\r\n\r\nimport prisma from '@/services/prisma';\r\nimport { getUser } from '@/auth';\r\n\r\nexport async function deleteCode(codeId: string) {\r\n  const user = await getUser();\r\n  if (!user) {\r\n    return { success: false, error: 'User not found' };\r\n  }\r\n\r\n  // find the code and its environemnt if nvironment user is user then delete it\r\n  const code = await prisma.code2Fa.findUnique({\r\n    where: {\r\n      secretCode: codeId,\r\n    },\r\n    include: {\r\n      environment: true,\r\n    },\r\n  });\r\n  if (!code) {\r\n    return { error: 'Code not found' };\r\n  }\r\n  if (code.environment.userId !== user.id) {\r\n    return { error: 'You are not authorized to delete this code' };\r\n  }\r\n  await prisma.code2Fa.delete({\r\n    where: {\r\n      secretCode: codeId,\r\n    },\r\n  });\r\n  return { success: 'Code deleted' };\r\n}\r\n\r\nexport async function deleteEnvironment(environmentId: string | undefined): Promise<{ success?: string; error?: string }> {\r\n  const user = await getUser();\r\n  if (!user) {\r\n    return { error: 'User not found'};\r\n  }\r\n  const environment = await prisma.environment.findUnique({\r\n    where: {\r\n      id: environmentId,\r\n    },\r\n    include: {\r\n      Codes2Fa: true,\r\n    },\r\n  });\r\n  if (!environment) {\r\n    return { error: 'Environment not found' };\r\n  }\r\n  if (environment.userId !== user.id) {\r\n    return { error: 'You are not authorized to delete this environment' };\r\n  }\r\n  try {\r\n    await prisma.environment.delete({\r\n      where: {\r\n        id: environmentId,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error('Error deleting environment:', error);\r\n    return { error: 'Error deleting environment'};\r\n  }\r\n  return { success: 'Environment deleted' };\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\app\\protected\\dashboard\\environments\\actions.ts"
    },
    {
      "path": "./src\\app\\protected\\dashboard\\environments\\[environmentId]\\add-code\\page.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport prisma from \"@/services/prisma\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { AddToast } from \"@/components/AddToast\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\";\r\nimport { redirect } from \"next/navigation\";\r\nimport { getUser } from \"@/auth\";\r\nimport SecretInput from \"@/components/SecretInput\";\r\n\r\nexport default async function AddCodePage({\r\n  params,\r\n  searchParams,\r\n}: {\r\n  params: { environmentId: string };\r\n  searchParams: { [key: string]: string | string[] | undefined };\r\n}) {\r\n  const createCode = async (formData: FormData) => {\r\n    \"use server\";\r\n    const user = await getUser();\r\n    if (!user) {\r\n      const randomCallId = Math.random().toString(36).substring(2, 15);\r\n      const searchParams = new URLSearchParams();\r\n      searchParams.set(\"title\", \"Unauthorized\");\r\n      searchParams.set(\"description\", \"Unauthorized\");\r\n      searchParams.set(\"variant\", \"destructive\");\r\n      searchParams.set(\"callId\", randomCallId);\r\n      throw redirect(\"/protected/dashboard/?\" + searchParams.toString());\r\n    }\r\n    const name = formData.get(\"name\") as string;\r\n    const secretCode = formData.get(\"secretCode\") as string;\r\n    const environmentId = formData.get(\"environmentId\") as string;\r\n\r\n    try {\r\n      await prisma.code2Fa.create({\r\n        data: {\r\n          name,\r\n          secretCode: secretCode,\r\n          EnvironmentId: environmentId,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error creating code:\", error);\r\n      const randomCallId = Math.random().toString(36).substring(2, 15);\r\n      const searchParams = new URLSearchParams();\r\n      searchParams.set(\"title\", \"Failed to create code\");\r\n      searchParams.set(\"description\", \"Failed to create code\");\r\n      searchParams.set(\"variant\", \"destructive\");\r\n      searchParams.set(\"callId\", randomCallId);\r\n      throw redirect(\r\n        \"/protected/dashboard/environments/\" +\r\n          environmentId +\r\n          \"/add-code/\" +\r\n          \"?\" +\r\n          searchParams.toString()\r\n      );\r\n    }\r\n    const randomCallId = Math.random().toString(36).substring(2, 15);\r\n    const searchParams = new URLSearchParams();\r\n    searchParams.set(\"title\", \"Code created\");\r\n    searchParams.set(\"description\", \"Code created\");\r\n    searchParams.set(\"variant\", \"success\");\r\n    searchParams.set(\"callId\", randomCallId);\r\n    throw redirect(\"/protected/dashboard/?\" + searchParams.toString());\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto mt-8\">\r\n      <AddToast\r\n        title={searchParams.title as string}\r\n        description={searchParams.description as string}\r\n        variant={\r\n          searchParams.variant as\r\n            | \"default\"\r\n            | \"destructive\"\r\n            | \"success\"\r\n            | null\r\n            | undefined\r\n        }\r\n        callId={searchParams.call as string}\r\n      />\r\n      <Card className=\"shadow-md mx-2 md:w-1/2 md:mx-auto\">\r\n        <CardHeader>\r\n          <CardTitle>\r\n            <div className=\"text-2xl font-bold\">Add a 2fa code</div>\r\n          </CardTitle>\r\n          <CardDescription>Add a 2fa code to your environment</CardDescription>\r\n        </CardHeader>\r\n        <form action={createCode} className=\"space-y-4\">\r\n          <CardContent>\r\n            <input\r\n              type=\"hidden\"\r\n              name=\"environmentId\"\r\n              value={params.environmentId}\r\n            />\r\n            <div>\r\n              <Label htmlFor=\"name\">Name</Label>\r\n              <Input type=\"text\" id=\"name\" name=\"name\" required />\r\n            </div>\r\n            <SecretInput />\r\n          </CardContent>\r\n          <CardFooter className=\"flex justify-end pt-4\">\r\n            <Button type=\"submit\">Save</Button>\r\n          </CardFooter>\r\n        </form>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\app\\protected\\dashboard\\environments\\[environmentId]\\add-code\\page.tsx"
    },
    {
      "path": "./src\\app\\protected\\dashboard\\page.tsx",
      "content": "import Link from \"next/link\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\nimport { AddToast } from \"@/components/AddToast\";\r\nimport { auth } from \"@/auth\";\r\nimport prisma from \"@/services/prisma\";\r\nimport { EnvironmentCard } from \"@/components/EnvironmentCard\";\r\n\r\nexport default async function DashboardPage({\r\n  searchParams,\r\n}: {\r\n  searchParams: { [key: string]: string | string[] | undefined };\r\n}) {\r\n  const session = await auth();\r\n  const user = await prisma.user.findUniqueOrThrow({\r\n    where: { email: session?.user?.email as string },\r\n  });\r\n\r\n  const environments = await prisma.environment.findMany({\r\n    where: { userId: user.id },\r\n    include: { Codes2Fa: true },\r\n  });\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-2 py-8\">\r\n      <AddToast\r\n        title={searchParams.title as string}\r\n        description={searchParams.description as string}\r\n        variant={\r\n          searchParams.variant as\r\n            | \"default\"\r\n            | \"destructive\"\r\n            | \"success\"\r\n            | null\r\n            | undefined\r\n        }\r\n        callId={searchParams.call as string}\r\n      />\r\n      <div className=\"flex flex-wrap justify-between items-center mb-8 mx-2\">\r\n        <h1 className=\"mr-2 text-3xl font-bold mb-2\">Dashboard</h1>\r\n        <Link href=\"/protected/dashboard/add-environment\">\r\n          <Button>Add Environment</Button>\r\n        </Link>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2\">\r\n        {environments.map((environment) => (\r\n          <EnvironmentCard environment={environment} key={environment.id} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\app\\protected\\dashboard\\page.tsx"
    },
    {
      "path": "./src\\app\\signin\\page.tsx",
      "content": "import SignInForm from '@/components/login/SignInForm';\r\nimport SignupResult from '@/components/login/SignupResult';\r\nexport default function SignInPage({\r\n  searchParams,\r\n}: {\r\n  searchParams: { message: string };\r\n}) {\r\n  return (\r\n    <div className='flex min-h-screen items-center justify-center bg-gray-100'>\r\n      <SignupResult message={searchParams.message} />\r\n      <SignInForm />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\app\\signin\\page.tsx"
    },
    {
      "path": "./src\\app\\signup\\page.tsx",
      "content": "import SignUpForm from \"@/components/login/SignupForm\"\r\n\r\n\r\n\r\nexport default function SignUpPage({\r\n  searchParams\r\n}: {\r\n  searchParams: { message: string }\r\n}) {\r\n  return (\r\n    <div>\r\n      <SignUpForm searchParams={searchParams}/>\r\n    </div>\r\n  )\r\n}",
      "type": "registry:example",
      "target": "~/src\\app\\signup\\page.tsx"
    },
    {
      "path": "./src\\auth.ts",
      "content": "import NextAuth from 'next-auth';\r\nimport Credentials from 'next-auth/providers/credentials';\r\nimport bcrypt from 'bcryptjs';\r\nimport prisma from '@/services/prisma';\r\n\r\nexport const { handlers, auth, signIn, signOut } = NextAuth({\r\n  providers: [\r\n    Credentials({\r\n      // The name to display on the sign in form (e.g. \"Sign in with...\")\r\n      name: 'Credentials',\r\n      // The credentials is used to generate a suitable form on the sign in page.\r\n      // You can specify whatever fields you are expecting to be submitted.\r\n      credentials: {\r\n        username: { label: 'Username', type: 'text', placeholder: 'jsmith' },\r\n        password: { label: 'Password', type: 'password' },\r\n      },\r\n      authorize: async (credentials, request) => {\r\n        const { username, password } = credentials as { username: string; password: string };\r\n        console.log(request);\r\n        \r\n        if (!credentials?.username || !credentials?.password) {\r\n          return null;\r\n        }\r\n\r\n        try {\r\n          // Find the user in the database\r\n          const user = await prisma.user.findUnique({\r\n            where: { username: username },\r\n          });\r\n\r\n          if (!user) {\r\n            return null;\r\n          }\r\n\r\n          // Compare the provided password with the hashed password in the database\r\n          const isPasswordValid = await bcrypt.compare(\r\n            password,\r\n            user.password\r\n          );\r\n\r\n          if (!isPasswordValid) {\r\n            return null;\r\n          }\r\n          \r\n\r\n          // Return user object if validation is successful\r\n          return {\r\n            id: user.id.toString(), // Convert id to string\r\n            name: user.name,\r\n            username: user.username,\r\n            email: user.email,\r\n          };\r\n        } catch (error) {\r\n          console.error('Error during authentication:', error);\r\n          return null;\r\n        } finally {\r\n          await prisma.$disconnect();\r\n        }\r\n      },\r\n    }),\r\n  ],\r\n});\r\n\r\nexport const getUser = async () => {\r\n  const session = await auth();\r\n  const user = await prisma.user.findUnique({\r\n    where: {\r\n      email: session?.user?.email as string,\r\n    },\r\n  });\r\n  return user;\r\n};\r\n",
      "type": "registry:example",
      "target": "~/src\\auth.ts"
    },
    {
      "path": "./src\\components\\AddToast.tsx",
      "content": "\"use client\";\r\n\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport function AddToast({\r\n  title,\r\n  description,\r\n  variant,\r\n  callId,\r\n}: {\r\n  title: string | null;\r\n  description: string | null;\r\n  callId: string | null;\r\n  variant: \"default\" | \"destructive\" | \"success\" | null | undefined;\r\n}) {\r\n  const { toast } = useToast();\r\n\r\n  useEffect(() => {\r\n    if (title || description || variant || callId)\r\n      toast({\r\n        title: title || \"\",\r\n        description: description || \"\",\r\n        variant: variant || \"default\",\r\n        duration: 5000,\r\n      });\r\n  }, [title, description, toast, callId, variant]);\r\n\r\n  return null;\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\AddToast.tsx"
    },
    {
      "path": "./src\\components\\AuthStatus.tsx",
      "content": "\"use client\";\r\n\r\nimport { useSession } from \"next-auth/react\";\r\nimport { signOut } from \"next-auth/react\";\r\nimport Link from \"next/link\";\r\n\r\nexport default function AuthStatus() {\r\n  const { data: session, status } = useSession();\r\n\r\n  if (status === \"loading\") {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (status === \"unauthenticated\") {\r\n    return (\r\n      <div>\r\n        <h2 className=\"text-2xl font-bold\">You are not signed in.</h2>\r\n        <Link href=\"/signin\">\r\n          <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\r\n            Sign In\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"text-2xl font-bold\">Signed in as {session?.user?.name}</h2>\r\n      <button\r\n        className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\r\n        onClick={() => signOut()}\r\n      >\r\n        Sign Out\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\AuthStatus.tsx"
    },
    {
      "path": "./src\\components\\Code2FaCell.tsx",
      "content": "\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\nexport function Code2FaCell({\r\n  secretCode,\r\n  environmentId,\r\n}: {\r\n  secretCode: string;\r\n  environmentId: string;\r\n}) {\r\n  const [code, setCode] = useState<string>(\"\");\r\n  const [timeLeft, setTimeLeft] = useState<number>(0); // Assuming 30 seconds validity\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [copyStatus, setCopyStatus] = useState<string>(\"Copy\");\r\n\r\n  console.log(isLoading);\r\n\r\n  useEffect(() => {\r\n    const fetchCode = async () => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      try {\r\n        const response = await fetch(\r\n          `/api/protected/code2fa/?secretCode=${encodeURIComponent(\r\n            secretCode\r\n          )}&environmentId=${encodeURIComponent(environmentId)}`\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch 2FA code\");\r\n        }\r\n        const data = await response.json();\r\n        setCode(data.code);\r\n        setTimeLeft(Math.floor((Date.now() - data.expires) / -1000)); // Reset timer when new code is fetched\r\n      } catch (err) {\r\n        setError(\"Error fetching 2FA code\");\r\n        console.error(err);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchCode();\r\n\r\n    const timer = setInterval(() => {\r\n      setTimeLeft((prevTime) => {\r\n        if (prevTime <= 1) {\r\n          fetchCode(); // Fetch new code when timer reaches 0\r\n          return 30; // Reset timer to 30 seconds\r\n        }\r\n        return prevTime - 1;\r\n      });\r\n    }, 1000);\r\n\r\n    return () => clearInterval(timer);\r\n  }, [secretCode, environmentId]);\r\n\r\n  const copyToClipboard = async () => {\r\n    try {\r\n      await navigator.clipboard.writeText(code);\r\n      setCopyStatus(\"Copied!\");\r\n      setTimeout(() => setCopyStatus(\"Copy\"), 2000);\r\n    } catch (err) {\r\n      console.error(\"Failed to copy: \", err);\r\n      setCopyStatus(\"Failed to copy\");\r\n    }\r\n  };\r\n\r\n  // if (isLoading) return <span>Loading...</span>;\r\n  if (error) return <span>{error}</span>;\r\n\r\n  return (\r\n    <div className=\"flex items-center flex-wrap\">\r\n      <span>{code}</span>\r\n      <span className=\"text-xs text-gray-500 px-1\">\r\n        (Valid for {timeLeft} seconds)\r\n      </span>\r\n      <Button\r\n        className=\"text-xs text-gray-500 px-1 \"\r\n        variant=\"ghost\"\r\n        onClick={copyToClipboard}\r\n      >\r\n        {copyStatus}\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\Code2FaCell.tsx"
    },
    {
      "path": "./src\\components\\Code2FaTable.tsx",
      "content": "\"use client\";\r\n\r\nimport { Code2Fa } from \"@prisma/client\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Code2FaCell } from \"@/components/Code2FaCell\";\r\nimport Link from \"next/link\";\r\nimport { deleteCode } from \"@/app/protected/dashboard/environments/actions\";\r\nimport { AddToast } from \"./AddToast\";\r\nimport { useState } from \"react\";\r\nimport { Trash } from \"lucide-react\";\r\n\r\nexport function Code2FaTable({\r\n  codes,\r\n  environmentId,\r\n}: {\r\n  codes: Code2Fa[];\r\n  environmentId: string;\r\n}) {\r\n  const [toast, setToast] = useState<{\r\n    title: string;\r\n    description: string;\r\n    variant: \"default\" | \"destructive\" | \"success\";\r\n    callId: string;\r\n  } | null>();\r\n  const [displayedCodes, setDisplayedCodes] = useState<Code2Fa[]>(codes);\r\n\r\n  const handleDelete = async (secretCode: string) => {\r\n    // Implement delete functionality\r\n    const response = await deleteCode(secretCode);\r\n    if (response.error) {\r\n      setToast({\r\n        title: \"Error\",\r\n        description: response.error,\r\n        variant: \"destructive\",\r\n        callId: secretCode,\r\n      });\r\n    }\r\n    if (response.success) {\r\n      setToast({\r\n        title: \"Success\",\r\n        description:\r\n          typeof response.success === \"string\" ? response.success : \"\",\r\n        variant: \"success\",\r\n        callId: secretCode,\r\n      });\r\n      setDisplayedCodes(\r\n        displayedCodes.filter((code) => code.secretCode !== secretCode)\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <AddToast\r\n        title={toast?.title || null}\r\n        description={toast?.description || null}\r\n        variant={toast?.variant || null}\r\n        callId={toast?.callId || null}\r\n      />\r\n      <div className=\"mb-4\">\r\n        <Link\r\n          href={`/protected/dashboard/environments/${environmentId}/add-code`}\r\n        >\r\n          <Button>Add New Code</Button>\r\n        </Link>\r\n      </div>\r\n      <Table>\r\n        <TableHeader>\r\n          <TableRow>\r\n            <TableHead>Name</TableHead>\r\n            <TableHead>Code</TableHead>\r\n            <TableHead>Actions</TableHead>\r\n          </TableRow>\r\n        </TableHeader>\r\n        <TableBody>\r\n          {displayedCodes?.map((code, index) => (\r\n            <TableRow\r\n              key={index}\r\n              //   key={code.SecretCode}\r\n            >\r\n              <TableCell>{code.name}</TableCell>\r\n              <TableCell>\r\n                <Code2FaCell\r\n                  secretCode={code.secretCode}\r\n                  environmentId={environmentId}\r\n                />\r\n              </TableCell>\r\n              <TableCell>\r\n                <Button\r\n                  variant=\"destructive\"\r\n                  size=\"icon\"\r\n                  onClick={() => handleDelete(code.secretCode)}\r\n                >\r\n                  <Trash className=\"w-4 h-4\" />\r\n                </Button>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\Code2FaTable.tsx"
    },
    {
      "path": "./src\\components\\DeleteButton.tsx",
      "content": "'use client';\r\n\r\nimport { Button } from './ui/button';\r\nimport { AddToast } from './AddToast';\r\nimport { useState } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\n\r\nexport function DeleteButton({\r\n  deleteAction,\r\n  id,\r\n}: {\r\n  deleteAction: (\r\n    id: string | number\r\n  ) => Promise<{ success?: string; error?: string }>;\r\n  id: string | number;\r\n}) {\r\n  const router = useRouter();\r\n  const [toast, setToast] = useState<{\r\n    variant: 'success' | 'destructive' | 'default' | null;\r\n    title: string;\r\n    description: string;\r\n    callId: string;\r\n  } | null>(null);\r\n  return (\r\n    <Button\r\n      variant='destructive'\r\n      onClick={async () => {\r\n        const response = await deleteAction(id);\r\n        const randomId = Math.random().toString(36).substring(7);\r\n        setToast({\r\n          variant: response.success ? 'success' : 'destructive',\r\n          title: response.success ? 'Success' : 'Error',\r\n          description: response.success\r\n            ? 'Operation successful'\r\n            : response.error || 'An error occurred',\r\n          callId: randomId,\r\n        });\r\n        // refresh the page\r\n        router.refresh();\r\n      }}\r\n    >\r\n      <AddToast\r\n        variant={toast?.variant || null}\r\n        title={toast?.title || null}\r\n        description={toast?.description || null}\r\n        callId={toast?.callId || null}\r\n      />\r\n      Delete\r\n    </Button>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\DeleteButton.tsx"
    },
    {
      "path": "./src\\components\\EnvironmentCard.tsx",
      "content": "import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\r\nimport { Environment, Code2Fa } from '@prisma/client';\r\nimport { Code2FaTable } from '@/components/Code2FaTable';\r\nimport { DeleteButton } from '@/components/DeleteButton';\r\nimport { deleteEnvironment } from '@/app/protected/dashboard/environments/actions';\r\n\r\n// Adjust the deleteEnvironment function to accept string | number\r\nconst adjustedDeleteEnvironment = async (id: string | number) => {\r\n  'use server';\r\n  const result = await deleteEnvironment(id.toString());\r\n  return {\r\n    ...result,\r\n  };\r\n};\r\n\r\nexport function EnvironmentCard({\r\n  environment,\r\n}: {\r\n  environment: Environment & { Codes2Fa: Code2Fa[] };\r\n}) {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className='text-xl font-bold flex flex-wrap justify-between'>\r\n          <div className='flex flex-col'>\r\n            <div>{environment.name}</div>\r\n            <div>{environment.type}</div>\r\n          </div>\r\n          <div className=''>\r\n            <DeleteButton\r\n              deleteAction={adjustedDeleteEnvironment}\r\n              id={environment.id}\r\n            />\r\n          </div>\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <Code2FaTable\r\n          codes={environment.Codes2Fa}\r\n          environmentId={environment.id}\r\n        />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\EnvironmentCard.tsx"
    },
    {
      "path": "./src\\components\\login\\LogOutButton.tsx",
      "content": "\"use client\";\r\n\r\nimport { signOut } from \"next-auth/react\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\nexport function LogOutButton() {\r\n  return (\r\n    <Button className=\"font-bold py-2 px-4 rounded\" onClick={() => signOut()}>\r\n      Sign Out\r\n    </Button>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\login\\LogOutButton.tsx"
    },
    {
      "path": "./src\\components\\login\\SignInForm.tsx",
      "content": "\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { signIn } from \"next-auth/react\";\r\nimport { useRouter, useSearchParams } from \"next/navigation\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardContent,\r\n  CardFooter,\r\n} from \"@/components/ui/card\";\r\nimport Link from \"next/link\";\r\n\r\nexport default function SignInForm() {\r\n  const [username, setUserName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const router = useRouter();\r\n  const searchParams = useSearchParams();\r\n\r\n  const callbackUrl = searchParams.get(\"callbackUrl\") || \"/protected/dashboard\";\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError(\"\");\r\n\r\n    try {\r\n      const result = await signIn(\"credentials\", {\r\n        redirect: false,\r\n        username,\r\n        password,\r\n      });\r\n\r\n      if (result?.error) {\r\n        setError(\"Invalid email or password\");\r\n      } else {\r\n        router.push(callbackUrl); // Redirect to dashboard or home page\r\n      }\r\n    } catch (error) {\r\n      console.error(\"An error occurred:\", error);\r\n      setError(\"An error occurred. Please try again.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className=\"w-[350px]\">\r\n      <CardHeader>\r\n        <CardTitle>Sign In</CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"grid w-full items-center gap-4\">\r\n            <div className=\"flex flex-col space-y-1.5\">\r\n              <Input\r\n                id=\"user-name\"\r\n                placeholder=\"user name\"\r\n                type=\"text\"\r\n                value={username}\r\n                onChange={(e) => setUserName(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"flex flex-col space-y-1.5\">\r\n              <Input\r\n                id=\"password\"\r\n                placeholder=\"Password\"\r\n                type=\"password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n          {error && <p className=\"text-red-500 text-sm mt-2\">{error}</p>}\r\n          <CardFooter className=\"flex justify-between px-0 pt-4\">\r\n            <Button type=\"submit\">Sign In</Button>\r\n          </CardFooter>\r\n        </form>\r\n      </CardContent>\r\n      <CardFooter>\r\n        <Link href=\"/signup\" className=\"text-sm text-gray-500\">\r\n          {\"Don't have an account...?\"}\r\n          <Button variant=\"link\" className=\"ps-3 text-blue-500 font-bold\">\r\n            Sign Up\r\n          </Button>\r\n        </Link>\r\n      </CardFooter>\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\login\\SignInForm.tsx"
    },
    {
      "path": "./src\\components\\login\\SignupForm.tsx",
      "content": "import { redirect } from 'next/navigation';\r\nimport prisma from '@/services/prisma';\r\nimport bcrypt from 'bcryptjs';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Label } from '@/components/ui/label';\r\nimport SignupResult from '@/components/login/SignupResult';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/components/ui/card';\r\n\r\nexport default function SignupForm({\r\n  searchParams,\r\n}: {\r\n  searchParams: { message: string };\r\n}) {\r\n  async function signUp(formData: FormData) {\r\n    'use server';\r\n\r\n    const name = formData.get('name') as string;\r\n    const email = formData.get('email') as string;\r\n    const username = formData.get('username') as string;\r\n    const password = formData.get('password') as string;\r\n\r\n    if (!name || !email || !username || !password) {\r\n      throw redirect('/signup?message=All fields are required');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const hashedPassword = await bcrypt.hash(password, 10);\r\n      await prisma.user.create({\r\n        data: {\r\n          name,\r\n          email,\r\n          username,\r\n          password: hashedPassword,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.error('Error creating user:', error);\r\n      throw redirect('/signup?message=Failed to create user');\r\n    }\r\n    throw redirect('/signin?message=Sign up successful!');\r\n  }\r\n\r\n  return (\r\n    <div className='flex justify-center items-center h-screen'>\r\n      <Card className='w-[350px] shadow-md'>\r\n        <CardHeader>\r\n          <CardTitle>Sign Up</CardTitle>\r\n          <CardDescription>Create an account to get started</CardDescription>\r\n        </CardHeader>\r\n        <form action={signUp} className='space-y-4 max-w-md mx-auto'>\r\n          <CardContent>\r\n            <SignupResult message={searchParams.message} />\r\n            <div>\r\n              <Label htmlFor='name'>Name</Label>\r\n              <Input\r\n                type='text'\r\n                id='name'\r\n                name='name'\r\n                placeholder='Name'\r\n                required\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor='email'>Email</Label>\r\n              <Input\r\n                type='email'\r\n                id='email'\r\n                name='email'\r\n                placeholder='Email'\r\n                required\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor='username'>Username</Label>\r\n              <Input\r\n                type='text'\r\n                id='username'\r\n                name='username'\r\n                placeholder='Username'\r\n                required\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor='password'>Password</Label>\r\n              <Input\r\n                type='password'\r\n                id='password'\r\n                name='password'\r\n                placeholder='Password'\r\n                required\r\n              />\r\n            </div>\r\n          </CardContent>\r\n          <CardFooter>\r\n            <Button type='submit' className='w-full'>\r\n              Sign Up\r\n            </Button>\r\n          </CardFooter>\r\n        </form>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\login\\SignupForm.tsx"
    },
    {
      "path": "./src\\components\\login\\SignupResult.tsx",
      "content": "'use client';\r\n\r\nimport { useEffect, useRef } from 'react';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\ninterface SignupResultProps {\r\n  message?: string | null;\r\n}\r\n\r\nexport default function SignupResult({ message }: SignupResultProps) {\r\n  const { toast } = useToast();\r\n  const toastShownRef = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (message && !toastShownRef.current) {\r\n      const isError = message.includes('Failed');\r\n      console.log('Attempting to show toast:', { isError, message });\r\n\r\n      toast({\r\n        title: isError ? 'Error' : 'Success',\r\n        description: message,\r\n        variant: isError ? 'destructive' : 'success',\r\n        duration: 5000,\r\n      });\r\n\r\n      toastShownRef.current = true;\r\n    }\r\n  }, [message, toast]);\r\n\r\n  return null; // This component doesn't render anything visible\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\login\\SignupResult.tsx"
    },
    {
      "path": "./src\\components\\providers\\ThemeProvider.tsx",
      "content": "'use client';\r\n\r\nimport * as React from 'react';\r\nimport { ThemeProvider as NextThemesProvider } from 'next-themes';\r\nimport { type ThemeProviderProps } from 'next-themes/dist/types';\r\n\r\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\r\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\providers\\ThemeProvider.tsx"
    },
    {
      "path": "./src\\components\\SecretInput.tsx",
      "content": "'use client'\r\n\r\nimport { useState } from 'react';\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport jsQR from 'jsqr';\r\n\r\nexport default function SecretInput() {\r\n\tconst [secret, setSecret] = useState('');\r\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\tconst [_, setImageFile] = useState<File | null>(null);\r\n\r\n\tconst handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst file = e.target.files?.[0] || null;\r\n\t\tsetImageFile(file);\r\n\t\tif (file) {\r\n\t\t\tconst reader = new FileReader();\r\n\t\t\treader.onload = async () => {\r\n\t\t\t\tif (reader.result) {\r\n\t\t\t\t\tprocessImage(reader.result as string);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\treader.readAsDataURL(file);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handlePaste = (e: React.ClipboardEvent<HTMLTextAreaElement>) => {\r\n\t\tconst items = Array.from(e.clipboardData.items);\r\n\t\tfor (const item of items) {\r\n\t\t\tif (item.type.startsWith('image/')) {\r\n\t\t\t\tconst file = item.getAsFile();\r\n\t\t\t\tif (file) {\r\n\t\t\t\t\tconst reader = new FileReader();\r\n\t\t\t\t\treader.onload = async () => {\r\n\t\t\t\t\t\tif (reader.result) {\r\n\t\t\t\t\t\t\tprocessImage(reader.result as string);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\treader.readAsDataURL(file);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst processImage = (imageSrc: string) => {\r\n\t\tconst img = new Image();\r\n\t\timg.src = imageSrc;\r\n\t\timg.onload = () => {\r\n\t\t\tconst canvas = document.createElement('canvas');\r\n\t\t\tcanvas.width = img.width;\r\n\t\t\tcanvas.height = img.height;\r\n\t\t\tconst ctx = canvas.getContext('2d');\r\n\t\t\tif (ctx) {\r\n\t\t\t\tctx.drawImage(img, 0, 0, img.width, img.height);\r\n\t\t\t\tconst imageData = ctx.getImageData(0, 0, img.width, img.height);\r\n\t\t\t\tconst code = jsQR(imageData.data, imageData.width, imageData.height);\r\n\t\t\t\tif (code) {\r\n\t\t\t\t\tconst Url = new URL(code.data);\r\n\t\t\t\t\tconst secret = Url.searchParams.get('secret');\r\n\t\t\t\t\tsetSecret(secret || '');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.error('No QR code found.');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"space-y-2\">\r\n\t\t\t<Label htmlFor=\"secret\">\r\n\t\t\t\tSecret&nbsp;\r\n\t\t\t\t<small>\r\n\t\t\t\t\t( will accept pasted screenshot of a QR code )\r\n\t\t\t\t</small>\r\n\t\t\t</Label>\r\n\t\t\t<textarea\r\n\t\t\t\tid=\"secret\"\r\n\t\t\t\tname=\"secretCode\"\r\n\t\t\t\tvalue={secret || ''}\r\n\t\t\t\tonChange={(e) => setSecret(e.target.value)}\r\n\t\t\t\tonPaste={handlePaste}\r\n\t\t\t\tclassName=\"w-full p-2 border rounded-md\"\r\n\t\t\t\trows={4}\r\n\t\t\t/>\r\n\t\t\t<Label htmlFor=\"qr-file\">Upload QR Code Image</Label>\r\n\t\t\t<Input\r\n\t\t\t\ttype=\"file\"\r\n\t\t\t\tid=\"qr-file\"\r\n\t\t\t\tname=\"qr-file\"\r\n\t\t\t\taccept=\"image/*\"\r\n\t\t\t\tonChange={handleFileChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}",
      "type": "registry:example",
      "target": "~/src\\components\\SecretInput.tsx"
    },
    {
      "path": "./src\\components\\Sidebar.tsx",
      "content": "'use client';\r\n\r\nimport Link from 'next/link';\r\nimport { Button } from '@/components/ui/button';\r\nimport { UserButton } from '@/components/UserButton';\r\nimport { ThemeToggleButton } from './ThemeToggleButton';\r\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\r\nimport { Menu } from 'lucide-react';\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst navItems = [\r\n  { name: 'Dashboard', href: '/protected/dashboard' },\r\n  { name: 'Add Environment', href: '/protected/dashboard/add-environment' },\r\n];\r\n\r\nexport function Sidebar() {\r\n  const [isMobile, setIsMobile] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const checkMobile = () => setIsMobile(window.innerWidth < 768);\r\n    checkMobile();\r\n    window.addEventListener('resize', checkMobile);\r\n    return () => window.removeEventListener('resize', checkMobile);\r\n  }, []);\r\n\r\n  const SidebarContent = () => (\r\n    <div className='flex flex-col h-full w-full bg-gray-100 dark:bg-gray-900 p-4 shadow-lg shadow-gray-500'>\r\n      <div className='mb-6 flex justify-between mt-10 md:mt-0'>\r\n        <ThemeToggleButton />\r\n        <UserButton />\r\n      </div>\r\n      <nav className='space-y-2'>\r\n        {navItems.map((item) => (\r\n          <Link key={item.href} href={item.href}>\r\n            <Button variant='ghost' className='w-full justify-start'>\r\n              {item.name}\r\n            </Button>\r\n          </Link>\r\n        ))}\r\n      </nav>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {isMobile ? (\r\n        <Sheet>\r\n          <SheetTrigger asChild>\r\n            <Button\r\n              variant='outline'\r\n              size='icon'\r\n              className='fixed top-1 right-4 z-50'\r\n            >\r\n              <Menu className='h-[1.2rem] w-[1.2rem]' />\r\n            </Button>\r\n          </SheetTrigger>\r\n          <SheetContent side='left' className='p-0 w-64'>\r\n            <SidebarContent />\r\n          </SheetContent>\r\n        </Sheet>\r\n      ) : (\r\n        <div\r\n          className='hidden md:flex md:w-44\r\n         md:flex-col md:fixed md:inset-y-0'\r\n        >\r\n          <SidebarContent />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\Sidebar.tsx"
    },
    {
      "path": "./src\\components\\ThemeToggleButton.tsx",
      "content": "'use client';\r\n\r\nimport * as React from 'react';\r\nimport { MoonIcon, SunIcon } from '@radix-ui/react-icons';\r\nimport { useTheme } from 'next-themes';\r\n\r\nimport { Button } from '@/components/ui/button';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from '@/components/ui/dropdown-menu';\r\n\r\nexport function ThemeToggleButton() {\r\n  const { setTheme } = useTheme();\r\n\r\n  return (\r\n    <DropdownMenu>\r\n      <DropdownMenuTrigger asChild>\r\n        <Button variant='outline' size='icon'>\r\n          <SunIcon className='h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0' />\r\n          <MoonIcon className='absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100' />\r\n          <span className='sr-only'>Toggle theme</span>\r\n        </Button>\r\n      </DropdownMenuTrigger>\r\n      <DropdownMenuContent align='end'>\r\n        <DropdownMenuItem onClick={() => setTheme('light')}>\r\n          Light\r\n        </DropdownMenuItem>\r\n        <DropdownMenuItem onClick={() => setTheme('dark')}>\r\n          Dark\r\n        </DropdownMenuItem>\r\n        <DropdownMenuItem onClick={() => setTheme('system')}>\r\n          System\r\n        </DropdownMenuItem>\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\ThemeToggleButton.tsx"
    },
    {
      "path": "./src\\components\\ui\\alert.tsx",
      "content": "import * as React from \"react\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst alertVariants = cva(\r\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-background text-foreground\",\r\n        destructive:\r\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nconst Alert = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\r\n>(({ className, variant, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    role=\"alert\"\r\n    className={cn(alertVariants({ variant }), className)}\r\n    {...props}\r\n  />\r\n))\r\nAlert.displayName = \"Alert\"\r\n\r\nconst AlertTitle = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLHeadingElement>\r\n>(({ className, ...props }, ref) => (\r\n  <h5\r\n    ref={ref}\r\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\r\n    {...props}\r\n  />\r\n))\r\nAlertTitle.displayName = \"AlertTitle\"\r\n\r\nconst AlertDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\r\n    {...props}\r\n  />\r\n))\r\nAlertDescription.displayName = \"AlertDescription\"\r\n\r\nexport { Alert, AlertTitle, AlertDescription }\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\ui\\alert.tsx"
    },
    {
      "path": "./src\\components\\ui\\avatar.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Avatar = React.forwardRef<\r\n  React.ElementRef<typeof AvatarPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\r\n>(({ className, ...props }, ref) => (\r\n  <AvatarPrimitive.Root\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nAvatar.displayName = AvatarPrimitive.Root.displayName\r\n\r\nconst AvatarImage = React.forwardRef<\r\n  React.ElementRef<typeof AvatarPrimitive.Image>,\r\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\r\n>(({ className, ...props }, ref) => (\r\n  <AvatarPrimitive.Image\r\n    ref={ref}\r\n    className={cn(\"aspect-square h-full w-full\", className)}\r\n    {...props}\r\n  />\r\n))\r\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\r\n\r\nconst AvatarFallback = React.forwardRef<\r\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\r\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\r\n>(({ className, ...props }, ref) => (\r\n  <AvatarPrimitive.Fallback\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\r\n\r\nexport { Avatar, AvatarImage, AvatarFallback }\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\ui\\avatar.tsx"
    },
    {
      "path": "./src\\components\\ui\\button.tsx",
      "content": "import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\r\n        destructive:\r\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\r\n        outline:\r\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\r\n        secondary:\r\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\r\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-9 px-4 py-2\",\r\n        sm: \"h-8 rounded-md px-3 text-xs\",\r\n        lg: \"h-10 rounded-md px-8\",\r\n        icon: \"h-9 w-9\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : \"button\"\r\n    return (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nButton.displayName = \"Button\"\r\n\r\nexport { Button, buttonVariants }\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\ui\\button.tsx"
    },
    {
      "path": "./src\\components\\ui\\card.tsx",
      "content": "import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Card = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"rounded-xl border bg-card text-card-foreground shadow\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nCard.displayName = \"Card\"\r\n\r\nconst CardHeader = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardHeader.displayName = \"CardHeader\"\r\n\r\nconst CardTitle = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLHeadingElement>\r\n>(({ className, ...props }, ref) => (\r\n  <h3\r\n    ref={ref}\r\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardTitle.displayName = \"CardTitle\"\r\n\r\nconst CardDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => (\r\n  <p\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardDescription.displayName = \"CardDescription\"\r\n\r\nconst CardContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\r\n))\r\nCardContent.displayName = \"CardContent\"\r\n\r\nconst CardFooter = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex items-center p-6 pt-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardFooter.displayName = \"CardFooter\"\r\n\r\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\ui\\card.tsx"
    },
    {
      "path": "./src\\components\\ui\\dropdown-menu.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\r\nimport {\r\n  CheckIcon,\r\n  ChevronRightIcon,\r\n  DotFilledIcon,\r\n} from \"@radix-ui/react-icons\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst DropdownMenu = DropdownMenuPrimitive.Root\r\n\r\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\r\n\r\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\r\n\r\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\r\n\r\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\r\n\r\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\r\n\r\nconst DropdownMenuSubTrigger = React.forwardRef<\r\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\r\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\r\n    inset?: boolean\r\n  }\r\n>(({ className, inset, children, ...props }, ref) => (\r\n  <DropdownMenuPrimitive.SubTrigger\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\r\n      inset && \"pl-8\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    {children}\r\n    <ChevronRightIcon className=\"ml-auto h-4 w-4\" />\r\n  </DropdownMenuPrimitive.SubTrigger>\r\n))\r\nDropdownMenuSubTrigger.displayName =\r\n  DropdownMenuPrimitive.SubTrigger.displayName\r\n\r\nconst DropdownMenuSubContent = React.forwardRef<\r\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\r\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\r\n>(({ className, ...props }, ref) => (\r\n  <DropdownMenuPrimitive.SubContent\r\n    ref={ref}\r\n    className={cn(\r\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nDropdownMenuSubContent.displayName =\r\n  DropdownMenuPrimitive.SubContent.displayName\r\n\r\nconst DropdownMenuContent = React.forwardRef<\r\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\r\n>(({ className, sideOffset = 4, ...props }, ref) => (\r\n  <DropdownMenuPrimitive.Portal>\r\n    <DropdownMenuPrimitive.Content\r\n      ref={ref}\r\n      sideOffset={sideOffset}\r\n      className={cn(\r\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\r\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  </DropdownMenuPrimitive.Portal>\r\n))\r\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\r\n\r\nconst DropdownMenuItem = React.forwardRef<\r\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\r\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\r\n    inset?: boolean\r\n  }\r\n>(({ className, inset, ...props }, ref) => (\r\n  <DropdownMenuPrimitive.Item\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\r\n      inset && \"pl-8\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\r\n\r\nconst DropdownMenuCheckboxItem = React.forwardRef<\r\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\r\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\r\n>(({ className, children, checked, ...props }, ref) => (\r\n  <DropdownMenuPrimitive.CheckboxItem\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\r\n      className\r\n    )}\r\n    checked={checked}\r\n    {...props}\r\n  >\r\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\r\n      <DropdownMenuPrimitive.ItemIndicator>\r\n        <CheckIcon className=\"h-4 w-4\" />\r\n      </DropdownMenuPrimitive.ItemIndicator>\r\n    </span>\r\n    {children}\r\n  </DropdownMenuPrimitive.CheckboxItem>\r\n))\r\nDropdownMenuCheckboxItem.displayName =\r\n  DropdownMenuPrimitive.CheckboxItem.displayName\r\n\r\nconst DropdownMenuRadioItem = React.forwardRef<\r\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\r\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\r\n>(({ className, children, ...props }, ref) => (\r\n  <DropdownMenuPrimitive.RadioItem\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\r\n      <DropdownMenuPrimitive.ItemIndicator>\r\n        <DotFilledIcon className=\"h-4 w-4 fill-current\" />\r\n      </DropdownMenuPrimitive.ItemIndicator>\r\n    </span>\r\n    {children}\r\n  </DropdownMenuPrimitive.RadioItem>\r\n))\r\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\r\n\r\nconst DropdownMenuLabel = React.forwardRef<\r\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\r\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\r\n    inset?: boolean\r\n  }\r\n>(({ className, inset, ...props }, ref) => (\r\n  <DropdownMenuPrimitive.Label\r\n    ref={ref}\r\n    className={cn(\r\n      \"px-2 py-1.5 text-sm font-semibold\",\r\n      inset && \"pl-8\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\r\n\r\nconst DropdownMenuSeparator = React.forwardRef<\r\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\r\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\r\n>(({ className, ...props }, ref) => (\r\n  <DropdownMenuPrimitive.Separator\r\n    ref={ref}\r\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\r\n    {...props}\r\n  />\r\n))\r\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\r\n\r\nconst DropdownMenuShortcut = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLSpanElement>) => {\r\n  return (\r\n    <span\r\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\r\n\r\nexport {\r\n  DropdownMenu,\r\n  DropdownMenuTrigger,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuRadioItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuShortcut,\r\n  DropdownMenuGroup,\r\n  DropdownMenuPortal,\r\n  DropdownMenuSub,\r\n  DropdownMenuSubContent,\r\n  DropdownMenuSubTrigger,\r\n  DropdownMenuRadioGroup,\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\ui\\dropdown-menu.tsx"
    },
    {
      "path": "./src\\components\\ui\\input.tsx",
      "content": "import * as React from \"react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\n// export interface InputProps\r\n//   extends React.InputHTMLAttributes<HTMLInputElement> {}\r\n\r\nconst Input = React.forwardRef<\r\n  HTMLInputElement,\r\n  React.InputHTMLAttributes<HTMLInputElement>\r\n>(({ className, type, ...props }, ref) => {\r\n  return (\r\n    <input\r\n      type={type}\r\n      className={cn(\r\n        \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\r\n        className\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nInput.displayName = \"Input\";\r\n\r\nexport { Input };\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\ui\\input.tsx"
    },
    {
      "path": "./src\\components\\ui\\label.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst labelVariants = cva(\r\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n)\r\n\r\nconst Label = React.forwardRef<\r\n  React.ElementRef<typeof LabelPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\r\n    VariantProps<typeof labelVariants>\r\n>(({ className, ...props }, ref) => (\r\n  <LabelPrimitive.Root\r\n    ref={ref}\r\n    className={cn(labelVariants(), className)}\r\n    {...props}\r\n  />\r\n))\r\nLabel.displayName = LabelPrimitive.Root.displayName\r\n\r\nexport { Label }\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\ui\\label.tsx"
    },
    {
      "path": "./src\\components\\ui\\sheet.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\r\nimport { Cross2Icon } from \"@radix-ui/react-icons\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Sheet = SheetPrimitive.Root\r\n\r\nconst SheetTrigger = SheetPrimitive.Trigger\r\n\r\nconst SheetClose = SheetPrimitive.Close\r\n\r\nconst SheetPortal = SheetPrimitive.Portal\r\n\r\nconst SheetOverlay = React.forwardRef<\r\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\r\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\r\n>(({ className, ...props }, ref) => (\r\n  <SheetPrimitive.Overlay\r\n    className={cn(\r\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\r\n      className\r\n    )}\r\n    {...props}\r\n    ref={ref}\r\n  />\r\n))\r\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\r\n\r\nconst sheetVariants = cva(\r\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\r\n  {\r\n    variants: {\r\n      side: {\r\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\r\n        bottom:\r\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\r\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\r\n        right:\r\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      side: \"right\",\r\n    },\r\n  }\r\n)\r\n\r\ninterface SheetContentProps\r\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\r\n    VariantProps<typeof sheetVariants> {}\r\n\r\nconst SheetContent = React.forwardRef<\r\n  React.ElementRef<typeof SheetPrimitive.Content>,\r\n  SheetContentProps\r\n>(({ side = \"right\", className, children, ...props }, ref) => (\r\n  <SheetPortal>\r\n    <SheetOverlay />\r\n    <SheetPrimitive.Content\r\n      ref={ref}\r\n      className={cn(sheetVariants({ side }), className)}\r\n      {...props}\r\n    >\r\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\r\n        <Cross2Icon className=\"h-4 w-4\" />\r\n        <span className=\"sr-only\">Close</span>\r\n      </SheetPrimitive.Close>\r\n      {children}\r\n    </SheetPrimitive.Content>\r\n  </SheetPortal>\r\n))\r\nSheetContent.displayName = SheetPrimitive.Content.displayName\r\n\r\nconst SheetHeader = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn(\r\n      \"flex flex-col space-y-2 text-center sm:text-left\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n)\r\nSheetHeader.displayName = \"SheetHeader\"\r\n\r\nconst SheetFooter = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn(\r\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n)\r\nSheetFooter.displayName = \"SheetFooter\"\r\n\r\nconst SheetTitle = React.forwardRef<\r\n  React.ElementRef<typeof SheetPrimitive.Title>,\r\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\r\n>(({ className, ...props }, ref) => (\r\n  <SheetPrimitive.Title\r\n    ref={ref}\r\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSheetTitle.displayName = SheetPrimitive.Title.displayName\r\n\r\nconst SheetDescription = React.forwardRef<\r\n  React.ElementRef<typeof SheetPrimitive.Description>,\r\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\r\n>(({ className, ...props }, ref) => (\r\n  <SheetPrimitive.Description\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSheetDescription.displayName = SheetPrimitive.Description.displayName\r\n\r\nexport {\r\n  Sheet,\r\n  SheetPortal,\r\n  SheetOverlay,\r\n  SheetTrigger,\r\n  SheetClose,\r\n  SheetContent,\r\n  SheetHeader,\r\n  SheetFooter,\r\n  SheetTitle,\r\n  SheetDescription,\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\ui\\sheet.tsx"
    },
    {
      "path": "./src\\components\\ui\\table.tsx",
      "content": "import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Table = React.forwardRef<\r\n  HTMLTableElement,\r\n  React.HTMLAttributes<HTMLTableElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div className=\"relative w-full overflow-auto\">\r\n    <table\r\n      ref={ref}\r\n      className={cn(\"w-full caption-bottom text-sm\", className)}\r\n      {...props}\r\n    />\r\n  </div>\r\n))\r\nTable.displayName = \"Table\"\r\n\r\nconst TableHeader = React.forwardRef<\r\n  HTMLTableSectionElement,\r\n  React.HTMLAttributes<HTMLTableSectionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\r\n))\r\nTableHeader.displayName = \"TableHeader\"\r\n\r\nconst TableBody = React.forwardRef<\r\n  HTMLTableSectionElement,\r\n  React.HTMLAttributes<HTMLTableSectionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <tbody\r\n    ref={ref}\r\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nTableBody.displayName = \"TableBody\"\r\n\r\nconst TableFooter = React.forwardRef<\r\n  HTMLTableSectionElement,\r\n  React.HTMLAttributes<HTMLTableSectionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <tfoot\r\n    ref={ref}\r\n    className={cn(\r\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableFooter.displayName = \"TableFooter\"\r\n\r\nconst TableRow = React.forwardRef<\r\n  HTMLTableRowElement,\r\n  React.HTMLAttributes<HTMLTableRowElement>\r\n>(({ className, ...props }, ref) => (\r\n  <tr\r\n    ref={ref}\r\n    className={cn(\r\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableRow.displayName = \"TableRow\"\r\n\r\nconst TableHead = React.forwardRef<\r\n  HTMLTableCellElement,\r\n  React.ThHTMLAttributes<HTMLTableCellElement>\r\n>(({ className, ...props }, ref) => (\r\n  <th\r\n    ref={ref}\r\n    className={cn(\r\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableHead.displayName = \"TableHead\"\r\n\r\nconst TableCell = React.forwardRef<\r\n  HTMLTableCellElement,\r\n  React.TdHTMLAttributes<HTMLTableCellElement>\r\n>(({ className, ...props }, ref) => (\r\n  <td\r\n    ref={ref}\r\n    className={cn(\r\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableCell.displayName = \"TableCell\"\r\n\r\nconst TableCaption = React.forwardRef<\r\n  HTMLTableCaptionElement,\r\n  React.HTMLAttributes<HTMLTableCaptionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <caption\r\n    ref={ref}\r\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nTableCaption.displayName = \"TableCaption\"\r\n\r\nexport {\r\n  Table,\r\n  TableHeader,\r\n  TableBody,\r\n  TableFooter,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableCaption,\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\ui\\table.tsx"
    },
    {
      "path": "./src\\components\\ui\\toast.tsx",
      "content": "'use client';\r\n\r\nimport * as React from 'react';\r\nimport { Cross2Icon } from '@radix-ui/react-icons';\r\nimport * as ToastPrimitives from '@radix-ui/react-toast';\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst ToastProvider = ToastPrimitives.Provider;\r\n\r\nconst ToastViewport = React.forwardRef<\r\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\r\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\r\n>(({ className, ...props }, ref) => (\r\n  <ToastPrimitives.Viewport\r\n    ref={ref}\r\n    className={cn(\r\n      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nToastViewport.displayName = ToastPrimitives.Viewport.displayName;\r\n\r\nconst toastVariants = cva(\r\n  'group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: 'border bg-background text-foreground',\r\n        destructive:\r\n          'destructive group border-destructive bg-destructive text-destructive-foreground',\r\n        success: 'border bg-green-500 text-white',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n    },\r\n  }\r\n);\r\n\r\nconst Toast = React.forwardRef<\r\n  React.ElementRef<typeof ToastPrimitives.Root>,\r\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\r\n    VariantProps<typeof toastVariants>\r\n>(({ className, variant, ...props }, ref) => {\r\n  return (\r\n    <ToastPrimitives.Root\r\n      ref={ref}\r\n      className={cn(toastVariants({ variant }), className)}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nToast.displayName = ToastPrimitives.Root.displayName;\r\n\r\nconst ToastAction = React.forwardRef<\r\n  React.ElementRef<typeof ToastPrimitives.Action>,\r\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\r\n>(({ className, ...props }, ref) => (\r\n  <ToastPrimitives.Action\r\n    ref={ref}\r\n    className={cn(\r\n      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nToastAction.displayName = ToastPrimitives.Action.displayName;\r\n\r\nconst ToastClose = React.forwardRef<\r\n  React.ElementRef<typeof ToastPrimitives.Close>,\r\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\r\n>(({ className, ...props }, ref) => (\r\n  <ToastPrimitives.Close\r\n    ref={ref}\r\n    className={cn(\r\n      'absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',\r\n      className\r\n    )}\r\n    toast-close=''\r\n    {...props}\r\n  >\r\n    <Cross2Icon className='h-4 w-4' />\r\n  </ToastPrimitives.Close>\r\n));\r\nToastClose.displayName = ToastPrimitives.Close.displayName;\r\n\r\nconst ToastTitle = React.forwardRef<\r\n  React.ElementRef<typeof ToastPrimitives.Title>,\r\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\r\n>(({ className, ...props }, ref) => (\r\n  <ToastPrimitives.Title\r\n    ref={ref}\r\n    className={cn('text-sm font-semibold [&+div]:text-xs', className)}\r\n    {...props}\r\n  />\r\n));\r\nToastTitle.displayName = ToastPrimitives.Title.displayName;\r\n\r\nconst ToastDescription = React.forwardRef<\r\n  React.ElementRef<typeof ToastPrimitives.Description>,\r\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\r\n>(({ className, ...props }, ref) => (\r\n  <ToastPrimitives.Description\r\n    ref={ref}\r\n    className={cn('text-sm opacity-90', className)}\r\n    {...props}\r\n  />\r\n));\r\nToastDescription.displayName = ToastPrimitives.Description.displayName;\r\n\r\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;\r\n\r\ntype ToastActionElement = React.ReactElement<typeof ToastAction>;\r\n\r\nexport {\r\n  type ToastProps,\r\n  type ToastActionElement,\r\n  ToastProvider,\r\n  ToastViewport,\r\n  Toast,\r\n  ToastTitle,\r\n  ToastDescription,\r\n  ToastClose,\r\n  ToastAction,\r\n};\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\ui\\toast.tsx"
    },
    {
      "path": "./src\\components\\ui\\toaster.tsx",
      "content": "\"use client\"\r\n\r\nimport { useToast } from \"@/hooks/use-toast\"\r\nimport {\r\n  Toast,\r\n  ToastClose,\r\n  ToastDescription,\r\n  ToastProvider,\r\n  ToastTitle,\r\n  ToastViewport,\r\n} from \"@/components/ui/toast\"\r\n\r\nexport function Toaster() {\r\n  const { toasts } = useToast()\r\n\r\n  return (\r\n    <ToastProvider>\r\n      {toasts.map(function ({ id, title, description, action, ...props }) {\r\n        return (\r\n          <Toast key={id} {...props}>\r\n            <div className=\"grid gap-1\">\r\n              {title && <ToastTitle>{title}</ToastTitle>}\r\n              {description && (\r\n                <ToastDescription>{description}</ToastDescription>\r\n              )}\r\n            </div>\r\n            {action}\r\n            <ToastClose />\r\n          </Toast>\r\n        )\r\n      })}\r\n      <ToastViewport />\r\n    </ToastProvider>\r\n  )\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\ui\\toaster.tsx"
    },
    {
      "path": "./src\\components\\UserButton.tsx",
      "content": "\"use client\";\r\n\r\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport Link from \"next/link\";\r\nimport { LogOutButton } from \"@/components/login/LogOutButton\";\r\nimport { useSession } from \"next-auth/react\";\r\n\r\nexport function UserButton() {\r\n  const { data: session } = useSession();\r\n  const user = session?.user;\r\n\r\n  const initials = session?.user?.name\r\n    ? `${session.user.name[0]}${session.user.name[1] || \"\"}`\r\n    : \"UN\";\r\n\r\n  if (!session) {\r\n    return (\r\n      <Link href=\"/signin\">\r\n        <Button>Login</Button>\r\n      </Link>\r\n    );\r\n  }\r\n  return (\r\n    <DropdownMenu>\r\n      <DropdownMenuTrigger asChild>\r\n        <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\r\n          <Avatar className=\"h-8 w-8\">\r\n            <AvatarFallback>{initials}</AvatarFallback>\r\n          </Avatar>\r\n        </Button>\r\n      </DropdownMenuTrigger>\r\n      <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\r\n        <DropdownMenuLabel className=\"font-normal\">\r\n          <div className=\"flex flex-col space-y-1\">\r\n            <p className=\"text-sm font-medium leading-none\">{user?.name}</p>\r\n            <p className=\"text-xs leading-none text-muted-foreground\">\r\n              {user?.email}\r\n            </p>\r\n          </div>\r\n        </DropdownMenuLabel>\r\n        <DropdownMenuSeparator />\r\n        <DropdownMenuItem>\r\n          <LogOutButton />\r\n        </DropdownMenuItem>\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\components\\UserButton.tsx"
    },
    {
      "path": "./src\\hooks\\use-toast.ts",
      "content": "\"use client\"\r\n\r\n// Inspired by react-hot-toast library\r\nimport * as React from \"react\"\r\n\r\nimport type {\r\n  ToastActionElement,\r\n  ToastProps,\r\n} from \"@/components/ui/toast\"\r\n\r\nconst TOAST_LIMIT = 1\r\nconst TOAST_REMOVE_DELAY = 1000000\r\n\r\ntype ToasterToast = ToastProps & {\r\n  id: string\r\n  title?: React.ReactNode\r\n  description?: React.ReactNode\r\n  action?: ToastActionElement\r\n}\r\n\r\ntype ActionTypes = {\r\n  ADD_TOAST: \"ADD_TOAST\";\r\n  UPDATE_TOAST: \"UPDATE_TOAST\";\r\n  DISMISS_TOAST: \"DISMISS_TOAST\";\r\n  REMOVE_TOAST: \"REMOVE_TOAST\";\r\n};\r\n\r\nconst actionTypes: ActionTypes = {\r\n  ADD_TOAST: \"ADD_TOAST\",\r\n  UPDATE_TOAST: \"UPDATE_TOAST\",\r\n  DISMISS_TOAST: \"DISMISS_TOAST\",\r\n  REMOVE_TOAST: \"REMOVE_TOAST\",\r\n} as const;\r\n\r\n// Use actionTypes somewhere in your code to avoid the unused variable error\r\nconsole.log(actionTypes.ADD_TOAST);\r\n\r\nlet count = 0\r\n\r\nfunction genId() {\r\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\r\n  return count.toString()\r\n}\r\n\r\ntype ActionType = typeof actionTypes\r\n\r\ntype Action =\r\n  | {\r\n      type: ActionType[\"ADD_TOAST\"]\r\n      toast: ToasterToast\r\n    }\r\n  | {\r\n      type: ActionType[\"UPDATE_TOAST\"]\r\n      toast: Partial<ToasterToast>\r\n    }\r\n  | {\r\n      type: ActionType[\"DISMISS_TOAST\"]\r\n      toastId?: ToasterToast[\"id\"]\r\n    }\r\n  | {\r\n      type: ActionType[\"REMOVE_TOAST\"]\r\n      toastId?: ToasterToast[\"id\"]\r\n    }\r\n\r\ninterface State {\r\n  toasts: ToasterToast[]\r\n}\r\n\r\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\r\n\r\nconst addToRemoveQueue = (toastId: string) => {\r\n  if (toastTimeouts.has(toastId)) {\r\n    return\r\n  }\r\n\r\n  const timeout = setTimeout(() => {\r\n    toastTimeouts.delete(toastId)\r\n    dispatch({\r\n      type: \"REMOVE_TOAST\",\r\n      toastId: toastId,\r\n    })\r\n  }, TOAST_REMOVE_DELAY)\r\n\r\n  toastTimeouts.set(toastId, timeout)\r\n}\r\n\r\nexport const reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case \"ADD_TOAST\":\r\n      return {\r\n        ...state,\r\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\r\n      }\r\n\r\n    case \"UPDATE_TOAST\":\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) =>\r\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\r\n        ),\r\n      }\r\n\r\n    case \"DISMISS_TOAST\": {\r\n      const { toastId } = action\r\n\r\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\r\n      // but I'll keep it here for simplicity\r\n      if (toastId) {\r\n        addToRemoveQueue(toastId)\r\n      } else {\r\n        state.toasts.forEach((toast) => {\r\n          addToRemoveQueue(toast.id)\r\n        })\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) =>\r\n          t.id === toastId || toastId === undefined\r\n            ? {\r\n                ...t,\r\n                open: false,\r\n              }\r\n            : t\r\n        ),\r\n      }\r\n    }\r\n    case \"REMOVE_TOAST\":\r\n      if (action.toastId === undefined) {\r\n        return {\r\n          ...state,\r\n          toasts: [],\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\r\n      }\r\n  }\r\n}\r\n\r\nconst listeners: Array<(state: State) => void> = []\r\n\r\nlet memoryState: State = { toasts: [] }\r\n\r\nfunction dispatch(action: Action) {\r\n  memoryState = reducer(memoryState, action)\r\n  listeners.forEach((listener) => {\r\n    listener(memoryState)\r\n  })\r\n}\r\n\r\ntype Toast = Omit<ToasterToast, \"id\">\r\n\r\nfunction toast({ ...props }: Toast) {\r\n  const id = genId()\r\n\r\n  const update = (props: ToasterToast) =>\r\n    dispatch({\r\n      type: \"UPDATE_TOAST\",\r\n      toast: { ...props, id },\r\n    })\r\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\r\n\r\n  dispatch({\r\n    type: \"ADD_TOAST\",\r\n    toast: {\r\n      ...props,\r\n      id,\r\n      open: true,\r\n      onOpenChange: (open) => {\r\n        if (!open) dismiss()\r\n      },\r\n    },\r\n  })\r\n\r\n  return {\r\n    id: id,\r\n    dismiss,\r\n    update,\r\n  }\r\n}\r\n\r\nfunction useToast() {\r\n  const [state, setState] = React.useState<State>(memoryState)\r\n\r\n  React.useEffect(() => {\r\n    listeners.push(setState)\r\n    return () => {\r\n      const index = listeners.indexOf(setState)\r\n      if (index > -1) {\r\n        listeners.splice(index, 1)\r\n      }\r\n    }\r\n  }, [state])\r\n\r\n  return {\r\n    ...state,\r\n    toast,\r\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\r\n  }\r\n}\r\n\r\nexport { useToast, toast }\r\n",
      "type": "registry:example",
      "target": "~/src\\hooks\\use-toast.ts"
    },
    {
      "path": "./src\\lib\\totp.ts",
      "content": "import { TOTP } from 'totp-generator';\r\n\r\nexport function generateTOTP(secret: string): { otp: string; expires: number } {\r\n  console.log('generating TOTP', secret);\r\n  const { otp, expires } = TOTP.generate(secret);\r\n\r\n  return { otp, expires };\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\lib\\totp.ts"
    },
    {
      "path": "./src\\lib\\utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n",
      "type": "registry:example",
      "target": "~/src\\lib\\utils.ts"
    },
    {
      "path": "./src\\middleware.ts",
      "content": "import { NextResponse } from 'next/server';\r\nimport { auth } from '@/auth';\r\n\r\nexport default auth((req) => {\r\n  const isProtectedRoute =\r\n    req.nextUrl.pathname.startsWith('/protected') ||\r\n    req.nextUrl.pathname.startsWith('/api/protected');\r\n\r\n  if (isProtectedRoute && !req.auth) {\r\n    // Add the original URL as a callbackUrl query parameter\r\n    const signInUrl = new URL('/signin', req.url);\r\n\r\n    signInUrl.searchParams.set('callbackUrl', req.nextUrl.pathname);\r\n\r\n    return NextResponse.redirect(signInUrl);\r\n  }\r\n});\r\n\r\nexport const config = {\r\n  matcher: ['/((?!api|_next/static|_next/image|favicon.ico).*)'],\r\n};\r\n",
      "type": "registry:example",
      "target": "~/src\\middleware.ts"
    },
    {
      "path": "./src\\services\\prisma.ts",
      "content": "import { PrismaClient } from \"@prisma/client\"\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nexport default prisma",
      "type": "registry:example",
      "target": "~/src\\services\\prisma.ts"
    },
    {
      "path": "./src\\styles\\global.css",
      "content": "@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n@layer base {\r\n  :root {\r\n    --background: 0 0% 100%;\r\n    --foreground: 240 10% 3.9%;\r\n    --card: 0 0% 100%;\r\n    --card-foreground: 240 10% 3.9%;\r\n    --popover: 0 0% 100%;\r\n    --popover-foreground: 240 10% 3.9%;\r\n    --primary: 240 5.9% 10%;\r\n    --primary-foreground: 0 0% 98%;\r\n    --secondary: 240 4.8% 95.9%;\r\n    --secondary-foreground: 240 5.9% 10%;\r\n    --muted: 240 4.8% 95.9%;\r\n    --muted-foreground: 240 3.8% 46.1%;\r\n    --accent: 240 4.8% 95.9%;\r\n    --accent-foreground: 240 5.9% 10%;\r\n    --destructive: 0 84.2% 60.2%;\r\n    --destructive-foreground: 0 0% 98%;\r\n    --border: 240 5.9% 90%;\r\n    --input: 240 5.9% 90%;\r\n    --ring: 240 10% 3.9%;\r\n    --chart-1: 12 76% 61%;\r\n    --chart-2: 173 58% 39%;\r\n    --chart-3: 197 37% 24%;\r\n    --chart-4: 43 74% 66%;\r\n    --chart-5: 27 87% 67%;\r\n    --radius: 0.5rem\r\n  }\r\n  .dark {\r\n    --background: 240 10% 3.9%;\r\n    --foreground: 0 0% 98%;\r\n    --card: 240 10% 3.9%;\r\n    --card-foreground: 0 0% 98%;\r\n    --popover: 240 10% 3.9%;\r\n    --popover-foreground: 0 0% 98%;\r\n    --primary: 0 0% 98%;\r\n    --primary-foreground: 240 5.9% 10%;\r\n    --secondary: 240 3.7% 15.9%;\r\n    --secondary-foreground: 0 0% 98%;\r\n    --muted: 240 3.7% 15.9%;\r\n    --muted-foreground: 240 5% 64.9%;\r\n    --accent: 240 3.7% 15.9%;\r\n    --accent-foreground: 0 0% 98%;\r\n    --destructive: 0 62.8% 30.6%;\r\n    --destructive-foreground: 0 0% 98%;\r\n    --border: 240 3.7% 15.9%;\r\n    --input: 240 3.7% 15.9%;\r\n    --ring: 240 4.9% 83.9%;\r\n    --chart-1: 220 70% 50%;\r\n    --chart-2: 160 60% 45%;\r\n    --chart-3: 30 80% 55%;\r\n    --chart-4: 280 65% 60%;\r\n    --chart-5: 340 75% 55%\r\n  }\r\n}\r\n@layer base {\r\n  * {\r\n    @apply border-border;\r\n  }\r\n  body {\r\n    @apply bg-background text-foreground;\r\n  }\r\n}",
      "type": "registry:example",
      "target": "~/src\\styles\\global.css"
    },
    {
      "path": "./test.json",
      "content": "",
      "type": "registry:example",
      "target": "~/test.json"
    }
  ],
  "tailwind": {},
  "cssVars": {},
  "meta": {}
}
