{
  "name": "2fa-totp",
  "type": "registry:block",
  "dependencies": [
    "@prisma/client",
    "@radix-ui/react-avatar",
    "@radix-ui/react-dialog",
    "@radix-ui/react-dropdown-menu",
    "@radix-ui/react-icons",
    "@radix-ui/react-label",
    "@radix-ui/react-slot",
    "@radix-ui/react-toast",
    "@types/bcryptjs",
    "bcryptjs",
    "class-variance-authority",
    "clsx",
    "jsqr",
    "lucide-react",
    "next-auth",
    "next-themes",
    "tailwind-merge",
    "tailwindcss-animate",
    "totp-generator"
  ],
  "devDependencies": [
    "autoprefixer",
    "prisma"
  ],
  "registryDependencies": [
    "alert",
    "avatar",
    "button",
    "card",
    "dropdown-menu",
    "input",
    "label",
    "sheet",
    "table",
    "toast"
  ],
  "files": [
    {
      "path": "./.env.example",
      "content": "DATABASE_URL=\"file:./dev.db\"\nNEXTAUTH_SECRET=\"your-nextauth-secret\"\nNEXTAUTH_URL=\"http://localhost:3030\"\nAUTH_TRUST_HOST=http://localhost:3030\nGITHUB_ID=\"your-github-id\"\nGITHUB_SECRET=\"your-github-secret\"\nGOOGLE_CLIENT_ID=\"your-google-client-id\"\nGOOGLE_CLIENT_SECRET=\"your-google-client-secret\"\n\n",
      "type": "registry:example",
      "target": "~/.env.example"
    },
    {
      "path": "./.gitignore",
      "content": "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\r\n\r\n# dependencies\r\n/node_modules\r\n/.pnp\r\n.pnp.js\r\n.yarn/install-state.gz\r\n\r\n# testing\r\n/coverage\r\n\r\n# next.js\r\n/.next/\r\n/out/\r\n\r\n# production\r\n/build\r\n\r\n# misc\r\n.DS_Store\r\n*.pem\r\n\r\n# debug\r\nnpm-debug.log*\r\nyarn-debug.log*\r\nyarn-error.log*\r\n\r\n# local env files\r\n.env*.local\r\n.env.**\r\n.env\r\n!.env.example\r\n\r\n\r\n# vercel\r\n.vercel\r\n\r\n# typescript\r\n*.tsbuildinfo\r\n# next-env.d.ts\r\nprisma/dev.db\r\nprisma/dev.db-journal\r\n\r\n# jetbrains\r\n/.idea/\r\n",
      "type": "registry:example",
      "target": "~/.gitignore"
    },
    {
      "path": "./README.md",
      "content": "This is a [Next.js](https://nextjs.org) project bootstrapped with [\r\n`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\r\n\r\n## Getting Started\r\n\r\n### install the project\r\n\r\nFirst, install the project:\r\n\r\n```bash\r\nnpm install\r\n```\r\n\r\ninstantiate sqlite database and migrate with prisma\r\n\r\n```bash\r\nnpx prisma migrate dev\r\n```\r\n\r\n### run the project in development\r\n\r\nFirst, run the development server:\r\n\r\n```bash\r\nnpm run dev\r\n# or\r\nyarn dev\r\n# or\r\npnpm dev\r\n# or\r\nbun dev\r\n```\r\n\r\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\r\n\r\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\r\n\r\n## Dependencies\r\n\r\n### backend\r\n\r\n- [Prisma](https://www.prisma.io/)\r\n\r\n### frontend\r\n\r\n- [React](https://reactjs.org/)\r\n- [Next.js](https://nextjs.org)\r\n- [Tailwind CSS](https://tailwindcss.com/)\r\n- [ShadcnUi](https://shadcn-ui.vercel.app/)\r\n\r\n## run the project\r\n\r\nbuild the project first\r\n\r\n```bash\r\nnpm run build\r\nnpm start\r\n```\r\n\r\n### .bat option\r\n\r\nin the project root there is a .bat file edit with the folder path and it can be placed as a shortcut it will open your browser on the correct port.\r\n\r\n### build a boilerplate\r\n\r\ngenerate the json to serve :\r\n\r\n```bash\r\nnpx shadcn-differ@latest > multi2FA.json\r\n```\r\n",
      "type": "registry:example",
      "target": "~/README.md"
    },
    {
      "path": "./authWithCredentials.json",
      "content": "{\n  \"name\": \"2fa-totp\",\n  \"type\": \"registry:block\",\n  \"dependencies\": [\n    \"@prisma/client\",\n    \"@radix-ui/react-icons\",\n    \"@radix-ui/react-label\",\n    \"@radix-ui/react-slot\",\n    \"@radix-ui/react-toast\",\n    \"@types/bcryptjs\",\n    \"bcryptjs\",\n    \"class-variance-authority\",\n    \"clsx\",\n    \"lucide-react\",\n    \"next-auth\",\n    \"tailwind-merge\",\n    \"tailwindcss-animate\"\n  ],\n  \"devDependencies\": [\n    \"autoprefixer\",\n    \"prisma\"\n  ],\n  \"registryDependencies\": [\n    \"alert\",\n    \"button\",\n    \"card\",\n    \"input\",\n    \"label\",\n    \"toast\"\n  ],\n  \"files\": [\n    {\n      \"path\": \"./.gitignore\",\n      \"content\": \"# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\\n\\n# dependencies\\n/node_modules\\n/.pnp\\n.pnp.js\\n.yarn/install-state.gz\\n\\n# testing\\n/coverage\\n\\n# next.js\\n/.next/\\n/out/\\n\\n# production\\n/build\\n\\n# misc\\n.DS_Store\\n*.pem\\n\\n# debug\\nnpm-debug.log*\\nyarn-debug.log*\\nyarn-error.log*\\n\\n# local env files\\n.env*.local\\n.env.**\\n.env\\n\\n# vercel\\n.vercel\\n\\n# typescript\\n*.tsbuildinfo\\n# next-env.d.ts\\nprisma/dev.db\\nprisma/dev.db-journal\\n\",\n      \"type\": \"registry:example\",\n      \"target\": \"~/.gitignore\"\n    },\n    {\n      \"path\": \"./README.md\",\n      \"content\": \"This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\\n\\n## Getting Started\\n\\nFirst, run the development server:\\n\\n```bash\\nnpm run dev\\n# or\\nyarn dev\\n# or\\npnpm dev\\n# or\\nbun dev\\n```\\n\\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\\n\\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\\n\\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\\n\\n## Learn More\\n\\nTo learn more about Next.js, take a look at the following resources:\\n\\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\\n\\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\\n\\n## Deploy on Vercel\\n\\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\\n\\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\\n\",\n      \"type\": \"registry:example\",\n      \"target\": \"~/README.md\"\n    },\n    {\n      \"path\": \"./authWithCredentials.json\",\n      \"content\": \"\",\n      \"type\": \"registry:example\",\n      \"target\": \"~/authWithCredentials.json\"\n    },\n    {\n      \"path\": \"./postcss.config.js\",\n      \"content\": \"module.exports = {\\n  plugins: {\\n    tailwindcss: {},\\n    autoprefixer: {},\\n  },\\n}\\n\",\n      \"type\": \"registry:example\",\n      \"target\": \"~/postcss.config.js\"\n    },\n    {\n      \"path\": \"./prisma/migrations/20241014112709_init/migration.sql\",\n      \"content\": \"-- CreateTable\\nCREATE TABLE \\\"User\\\" (\\n    \\\"id\\\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\\n    \\\"email\\\" TEXT NOT NULL,\\n    \\\"username\\\" TEXT NOT NULL,\\n    \\\"name\\\" TEXT\\n);\\n\\n-- CreateIndex\\nCREATE UNIQUE INDEX \\\"User_email_key\\\" ON \\\"User\\\"(\\\"email\\\");\\n\\n-- CreateIndex\\nCREATE UNIQUE INDEX \\\"User_username_key\\\" ON \\\"User\\\"(\\\"username\\\");\\n\",\n      \"type\": \"registry:example\",\n      \"target\": \"~/prisma/migrations/20241014112709_init/migration.sql\"\n    },\n    {\n      \"path\": \"./prisma/migrations/20241014115814_added_password_to_user/migration.sql\",\n      \"content\": \"/*\\n  Warnings:\\n\\n  - Added the required column `password` to the `User` table without a default value. This is not possible if the table is not empty.\\n\\n*/\\n-- RedefineTables\\nPRAGMA defer_foreign_keys=ON;\\nPRAGMA foreign_keys=OFF;\\nCREATE TABLE \\\"new_User\\\" (\\n    \\\"id\\\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\\n    \\\"email\\\" TEXT NOT NULL,\\n    \\\"username\\\" TEXT NOT NULL,\\n    \\\"name\\\" TEXT,\\n    \\\"password\\\" TEXT NOT NULL\\n);\\nINSERT INTO \\\"new_User\\\" (\\\"email\\\", \\\"id\\\", \\\"name\\\", \\\"username\\\") SELECT \\\"email\\\", \\\"id\\\", \\\"name\\\", \\\"username\\\" FROM \\\"User\\\";\\nDROP TABLE \\\"User\\\";\\nALTER TABLE \\\"new_User\\\" RENAME TO \\\"User\\\";\\nCREATE UNIQUE INDEX \\\"User_email_key\\\" ON \\\"User\\\"(\\\"email\\\");\\nCREATE UNIQUE INDEX \\\"User_username_key\\\" ON \\\"User\\\"(\\\"username\\\");\\nPRAGMA foreign_keys=ON;\\nPRAGMA defer_foreign_keys=OFF;\\n\",\n      \"type\": \"registry:example\",\n      \"target\": \"~/prisma/migrations/20241014115814_added_password_to_user/migration.sql\"\n    },\n    {\n      \"path\": \"./prisma/migrations/migration_lock.toml\",\n      \"content\": \"# Please do not edit this file manually\\n# It should be added in your version-control system (i.e. Git)\\nprovider = \\\"sqlite\\\"\",\n      \"type\": \"registry:example\",\n      \"target\": \"~/prisma/migrations/migration_lock.toml\"\n    },\n    {\n      \"path\": \"./prisma/schema.prisma\",\n      \"content\": \"// This is your Prisma schema file,\\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\\n\\ngenerator client {\\n  provider = \\\"prisma-client-js\\\"\\n}\\n\\ndatasource db {\\n  provider = \\\"sqlite\\\"\\n  url      = env(\\\"DATABASE_URL\\\")\\n}\\n\\nmodel User {\\n  id    Int     @id @default(autoincrement())\\n  email String  @unique\\n  username String @unique\\n  name  String?\\n  password String\\n}\",\n      \"type\": \"registry:example\",\n      \"target\": \"~/prisma/schema.prisma\"\n    },\n    {\n      \"path\": \"./app/api/auth/[...nextauth]/route.ts\",\n      \"content\": \"import { handlers } from \\\"@/auth\\\"\\n\\nexport const { GET, POST } = handlers\\n\",\n      \"type\": \"registry:example\",\n      \"target\": \"./app/api/auth/[...nextauth]/route.ts\"\n    },\n    {\n      \"path\": \"./app/layout.tsx\",\n      \"content\": \"import { SessionProvider } from 'next-auth/react';\\r\\nimport '@/styles/global.css';\\r\\nimport { Toaster } from '@/components/ui/toaster';\\r\\n\\r\\nexport const metadata = {\\r\\n  title: 'Next.js',\\r\\n  description: 'Generated by Next.js',\\r\\n};\\r\\n\\r\\nexport default function RootLayout({\\r\\n  children,\\r\\n}: {\\r\\n  children: React.ReactNode;\\r\\n}) {\\r\\n  return (\\r\\n    <html lang='en'>\\r\\n      <body>\\r\\n        <SessionProvider>{children}</SessionProvider>\\r\\n        <Toaster />\\r\\n      </body>\\r\\n    </html>\\r\\n  );\\r\\n}\\r\\n\",\n      \"type\": \"registry:example\",\n      \"target\": \"./app/layout.tsx\"\n    },\n    {\n      \"path\": \"./app/page.tsx\",\n      \"content\": \"import AuthStatus from '@/components/AuthStatus'\\n\\nexport default function Home() {\\n  return (\\n    <div>\\n      <h1>Welcome to my app</h1>\\n      <AuthStatus />\\n    </div>\\n  )\\n}\\n\",\n      \"type\": \"registry:example\",\n      \"target\": \"./app/page.tsx\"\n    },\n    {\n      \"path\": \"./app/protected/dashboard/page.tsx\",\n      \"content\": \"import AuthStatus from '@/components/AuthStatus';\\n\\nexport default function Home() {\\n  return (\\n    <div>\\n      <h1>This route is protected</h1>\\n      <AuthStatus />\\n    </div>\\n  );\\n}\\n\",\n      \"type\": \"registry:example\",\n      \"target\": \"./app/protected/dashboard/page.tsx\"\n    },\n    {\n      \"path\": \"./app/signin/page.tsx\",\n      \"content\": \"import SignInForm from '@/components/login/SignInForm';\\nimport SignupResult from '@/components/login/SignupResult';\\nexport default function SignInPage({\\n  searchParams,\\n}: {\\n  searchParams: { message: string };\\n}) {\\n  return (\\n    <div className='flex min-h-screen items-center justify-center bg-gray-100'>\\n      <SignupResult message={searchParams.message} />\\n      <SignInForm />\\n    </div>\\n  );\\n}\\n\",\n      \"type\": \"registry:example\",\n      \"target\": \"./app/signin/page.tsx\"\n    },\n    {\n      \"path\": \"./app/signup/page.tsx\",\n      \"content\": \"import SignUpForm from \\\"@/components/login/SignupForm\\\"\\n\\n\\n\\nexport default function SignUpPage({\\n  searchParams\\n}: {\\n  searchParams: { message: string }\\n}) {\\n  return (\\n    <div>\\n      <SignUpForm searchParams={searchParams}/>\\n    </div>\\n  )\\n}\",\n      \"type\": \"registry:example\",\n      \"target\": \"./app/signup/page.tsx\"\n    },\n    {\n      \"path\": \"./auth.ts\",\n      \"content\": \"import NextAuth from \\\"next-auth\\\"\\nimport Credentials from \\\"next-auth/providers/credentials\\\"\\nimport bcrypt from 'bcryptjs'\\nimport prisma from \\\"@/services/prisma\\\"\\n\\nexport const { handlers, auth, signIn, signOut } = NextAuth({\\n  providers: [\\n    Credentials({\\n      // The name to display on the sign in form (e.g. \\\"Sign in with...\\\")\\n      name: \\\"Credentials\\\",\\n      // The credentials is used to generate a suitable form on the sign in page.\\n      // You can specify whatever fields you are expecting to be submitted.\\n      credentials: {\\n        username: { label: \\\"Username\\\", type: \\\"text\\\", placeholder: \\\"jsmith\\\" },\\n        password: { label: \\\"Password\\\", type: \\\"password\\\" }\\n      },\\n      authorize: async (credentials, request) => {\\n        // let user = null;\\n        \\n        // const AdminUser = { id: \\\"1\\\", name: \\\"Admin\\\",username: \\\"admin\\\", email: \\\"admin@example.com\\\", password: \\\"admin\\\" }\\n\\n        //   if (credentials.username === AdminUser.username && credentials.password === AdminUser.password) {\\n        //     return AdminUser\\n        //   }\\n        //   return null\\n\\n        if (!credentials?.username || !credentials?.password) {\\n          return null\\n        }\\n\\n        try {\\n          // Find the user in the database\\n          const user = await prisma.user.findUnique({\\n            where: { username: credentials.username }\\n          })\\n\\n          if (!user) {\\n            return null\\n          }\\n\\n          // Compare the provided password with the hashed password in the database\\n          const isPasswordValid = await bcrypt.compare(credentials.password, user.password)\\n\\n          if (!isPasswordValid) {\\n            return null\\n          }\\n\\n          // Return user object if validation is successful\\n          return {\\n            id: user.id,\\n            name: user.name,\\n            username: user.username,\\n            email: user.email\\n          }\\n        } catch (error) {\\n          console.error('Error during authentication:', error)\\n          return null\\n        } finally {\\n          await prisma.$disconnect()\\n        }\\n\\n      }\\n\\n    \\n    })\\n  ],\\n})\\n\\n\",\n      \"type\": \"registry:example\",\n      \"target\": \"./auth.ts\"\n    },\n    {\n      \"path\": \"./components/AuthStatus.tsx\",\n      \"content\": \"\\n'use client'\\n\\nimport { useSession } from \\\"next-auth/react\\\"\\nimport { signIn, signOut } from \\\"next-auth/react\\\"\\nimport Link from \\\"next/link\\\"\\n\\nexport default function AuthStatus() {\\n  const { data: session, status } = useSession()\\n\\n  if (status === \\\"loading\\\") {\\n    return <div>Loading...</div>\\n  }\\n\\n  if (status === \\\"unauthenticated\\\") {\\n    return (\\n      <div>\\n        <h2 className=\\\"text-2xl font-bold\\\">You are not signed in.</h2>\\n        <Link href=\\\"/signin\\\">\\n            <button className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\\\" >Sign In</button>\\n        </Link>\\n      </div>\\n    )\\n  }\\n\\n  return (\\n    <div>\\n      <h2 className=\\\"text-2xl font-bold\\\">Signed in as {session?.user?.name}</h2>\\n      <button className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\\\" onClick={() => signOut()}>Sign Out</button>\\n    </div>\\n  )\\n}\\n\",\n      \"type\": \"registry:block\"\n    },\n    {\n      \"path\": \"./components/login/SignInForm.tsx\",\n      \"content\": \"'use client';\\n\\nimport { useState } from 'react';\\nimport { signIn } from 'next-auth/react';\\nimport { useRouter, useSearchParams } from 'next/navigation';\\nimport { Button } from '@/components/ui/button';\\nimport { Input } from '@/components/ui/input';\\nimport {\\n  Card,\\n  CardHeader,\\n  CardTitle,\\n  CardContent,\\n  CardFooter,\\n} from '@/components/ui/card';\\nimport Link from 'next/link';\\n\\nexport default function SignInForm() {\\n  const [username, setUserName] = useState('');\\n  const [password, setPassword] = useState('');\\n  const [error, setError] = useState('');\\n  const router = useRouter();\\n  const searchParams = useSearchParams();\\n\\n  const callbackUrl = searchParams.get('callbackUrl') || '/';\\n\\n  const handleSubmit = async (e: React.FormEvent) => {\\n    e.preventDefault();\\n    setError('');\\n\\n    try {\\n      const result = await signIn('credentials', {\\n        redirect: false,\\n        username,\\n        password,\\n      });\\n\\n      if (result?.error) {\\n        setError('Invalid email or password');\\n      } else {\\n        router.push(callbackUrl); // Redirect to dashboard or home page\\n      }\\n    } catch (error) {\\n      setError('An error occurred. Please try again.');\\n    }\\n  };\\n\\n  return (\\n    <Card className='w-[350px]'>\\n      <CardHeader>\\n        <CardTitle>Sign In</CardTitle>\\n      </CardHeader>\\n      <CardContent>\\n        <form onSubmit={handleSubmit}>\\n          <div className='grid w-full items-center gap-4'>\\n            <div className='flex flex-col space-y-1.5'>\\n              <Input\\n                id='user-name'\\n                placeholder='user name'\\n                type='text'\\n                value={username}\\n                onChange={(e) => setUserName(e.target.value)}\\n                required\\n              />\\n            </div>\\n            <div className='flex flex-col space-y-1.5'>\\n              <Input\\n                id='password'\\n                placeholder='Password'\\n                type='password'\\n                value={password}\\n                onChange={(e) => setPassword(e.target.value)}\\n                required\\n              />\\n            </div>\\n          </div>\\n          {error && <p className='text-red-500 text-sm mt-2'>{error}</p>}\\n          <CardFooter className='flex justify-between px-0 pt-4'>\\n            <Button type='submit'>Sign In</Button>\\n          </CardFooter>\\n        </form>\\n      </CardContent>\\n      <CardFooter>\\n        <Link href='/signup' className='text-sm text-gray-500'>\\n          Don't have an account...?\\n          <Button variant='link' className='ps-3 text-blue-500 font-bold'>\\n            Sign Up\\n          </Button>\\n        </Link>\\n      </CardFooter>\\n    </Card>\\n  );\\n}\\n\",\n      \"type\": \"registry:block\"\n    },\n    {\n      \"path\": \"./components/login/SignupForm.tsx\",\n      \"content\": \"import { redirect } from 'next/navigation';\\nimport prisma from '@/services/prisma';\\nimport bcrypt from 'bcryptjs';\\nimport { Input } from '@/components/ui/input';\\nimport { Button } from '@/components/ui/button';\\nimport { Label } from '@/components/ui/label';\\nimport SignupResult from '@/components/login/SignupResult';\\nimport {\\n  Card,\\n  CardContent,\\n  CardDescription,\\n  CardFooter,\\n  CardHeader,\\n  CardTitle,\\n} from '@/components/ui/card';\\n\\nexport default function SignupForm({\\n  searchParams,\\n}: {\\n  searchParams: { message: string };\\n}) {\\n  async function signUp(formData: FormData) {\\n    'use server';\\n\\n    const name = formData.get('name') as string;\\n    const email = formData.get('email') as string;\\n    const username = formData.get('username') as string;\\n    const password = formData.get('password') as string;\\n\\n    if (!name || !email || !username || !password) {\\n      throw redirect('/signup?message=All fields are required');\\n      return;\\n    }\\n\\n    try {\\n      const hashedPassword = await bcrypt.hash(password, 10);\\n      await prisma.user.create({\\n        data: {\\n          name,\\n          email,\\n          username,\\n          password: hashedPassword,\\n        },\\n      });\\n    } catch (error) {\\n      console.error('Error creating user:', error);\\n      throw redirect('/signup?message=Failed to create user');\\n    }\\n    throw redirect('/signin?message=Sign up successful!');\\n  }\\n\\n  return (\\n    <div className='flex justify-center items-center h-screen'>\\n      <Card className='w-[350px] shadow-md'>\\n        <CardHeader>\\n          <CardTitle>Sign Up</CardTitle>\\n          <CardDescription>Create an account to get started</CardDescription>\\n        </CardHeader>\\n        <form action={signUp} className='space-y-4 max-w-md mx-auto'>\\n          <CardContent>\\n            <SignupResult message={searchParams.message} />\\n            <div>\\n              <Label htmlFor='name'>Name</Label>\\n              <Input\\n                type='text'\\n                id='name'\\n                name='name'\\n                placeholder='Name'\\n                required\\n              />\\n            </div>\\n            <div>\\n              <Label htmlFor='email'>Email</Label>\\n              <Input\\n                type='email'\\n                id='email'\\n                name='email'\\n                placeholder='Email'\\n                required\\n              />\\n            </div>\\n            <div>\\n              <Label htmlFor='username'>Username</Label>\\n              <Input\\n                type='text'\\n                id='username'\\n                name='username'\\n                placeholder='Username'\\n                required\\n              />\\n            </div>\\n            <div>\\n              <Label htmlFor='password'>Password</Label>\\n              <Input\\n                type='password'\\n                id='password'\\n                name='password'\\n                placeholder='Password'\\n                required\\n              />\\n            </div>\\n          </CardContent>\\n          <CardFooter>\\n            <Button type='submit' className='w-full'>\\n              Sign Up\\n            </Button>\\n          </CardFooter>\\n        </form>\\n      </Card>\\n    </div>\\n  );\\n}\\n\",\n      \"type\": \"registry:block\"\n    },\n    {\n      \"path\": \"./components/login/SignupResult.tsx\",\n      \"content\": \"'use client';\\n\\nimport { useEffect, useRef } from 'react';\\nimport { useToast } from '@/hooks/use-toast';\\n\\ninterface SignupResultProps {\\n  message?: string | null;\\n}\\n\\nexport default function SignupResult({ message }: SignupResultProps) {\\n  const { toast } = useToast();\\n  const toastShownRef = useRef(false);\\n\\n  useEffect(() => {\\n    if (message && !toastShownRef.current) {\\n      const isError = message.includes('Failed');\\n      console.log('Attempting to show toast:', { isError, message });\\n\\n      toast({\\n        title: isError ? 'Error' : 'Success',\\n        description: message,\\n        variant: isError ? 'destructive' : 'success',\\n        duration: 5000,\\n      });\\n\\n      toastShownRef.current = true;\\n    }\\n  }, [message, toast]);\\n\\n  return null; // This component doesn't render anything visible\\n}\\n\",\n      \"type\": \"registry:block\"\n    },\n    {\n      \"path\": \"./components/ui/toaster.tsx\",\n      \"content\": \"\\\"use client\\\"\\n\\nimport { useToast } from \\\"@/hooks/use-toast\\\"\\nimport {\\n  Toast,\\n  ToastClose,\\n  ToastDescription,\\n  ToastProvider,\\n  ToastTitle,\\n  ToastViewport,\\n} from \\\"@/components/ui/toast\\\"\\n\\nexport function Toaster() {\\n  const { toasts } = useToast()\\n\\n  return (\\n    <ToastProvider>\\n      {toasts.map(function ({ id, title, description, action, ...props }) {\\n        return (\\n          <Toast key={id} {...props}>\\n            <div className=\\\"grid gap-1\\\">\\n              {title && <ToastTitle>{title}</ToastTitle>}\\n              {description && (\\n                <ToastDescription>{description}</ToastDescription>\\n              )}\\n            </div>\\n            {action}\\n            <ToastClose />\\n          </Toast>\\n        )\\n      })}\\n      <ToastViewport />\\n    </ToastProvider>\\n  )\\n}\\n\",\n      \"type\": \"registry:ui\"\n    },\n    {\n      \"path\": \"./hooks/use-toast.ts\",\n      \"content\": \"\\\"use client\\\"\\n\\n// Inspired by react-hot-toast library\\nimport * as React from \\\"react\\\"\\n\\nimport type {\\n  ToastActionElement,\\n  ToastProps,\\n} from \\\"@/components/ui/toast\\\"\\n\\nconst TOAST_LIMIT = 1\\nconst TOAST_REMOVE_DELAY = 1000000\\n\\ntype ToasterToast = ToastProps & {\\n  id: string\\n  title?: React.ReactNode\\n  description?: React.ReactNode\\n  action?: ToastActionElement\\n}\\n\\nconst actionTypes = {\\n  ADD_TOAST: \\\"ADD_TOAST\\\",\\n  UPDATE_TOAST: \\\"UPDATE_TOAST\\\",\\n  DISMISS_TOAST: \\\"DISMISS_TOAST\\\",\\n  REMOVE_TOAST: \\\"REMOVE_TOAST\\\",\\n} as const\\n\\nlet count = 0\\n\\nfunction genId() {\\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\\n  return count.toString()\\n}\\n\\ntype ActionType = typeof actionTypes\\n\\ntype Action =\\n  | {\\n      type: ActionType[\\\"ADD_TOAST\\\"]\\n      toast: ToasterToast\\n    }\\n  | {\\n      type: ActionType[\\\"UPDATE_TOAST\\\"]\\n      toast: Partial<ToasterToast>\\n    }\\n  | {\\n      type: ActionType[\\\"DISMISS_TOAST\\\"]\\n      toastId?: ToasterToast[\\\"id\\\"]\\n    }\\n  | {\\n      type: ActionType[\\\"REMOVE_TOAST\\\"]\\n      toastId?: ToasterToast[\\\"id\\\"]\\n    }\\n\\ninterface State {\\n  toasts: ToasterToast[]\\n}\\n\\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\\n\\nconst addToRemoveQueue = (toastId: string) => {\\n  if (toastTimeouts.has(toastId)) {\\n    return\\n  }\\n\\n  const timeout = setTimeout(() => {\\n    toastTimeouts.delete(toastId)\\n    dispatch({\\n      type: \\\"REMOVE_TOAST\\\",\\n      toastId: toastId,\\n    })\\n  }, TOAST_REMOVE_DELAY)\\n\\n  toastTimeouts.set(toastId, timeout)\\n}\\n\\nexport const reducer = (state: State, action: Action): State => {\\n  switch (action.type) {\\n    case \\\"ADD_TOAST\\\":\\n      return {\\n        ...state,\\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\\n      }\\n\\n    case \\\"UPDATE_TOAST\\\":\\n      return {\\n        ...state,\\n        toasts: state.toasts.map((t) =>\\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\\n        ),\\n      }\\n\\n    case \\\"DISMISS_TOAST\\\": {\\n      const { toastId } = action\\n\\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\\n      // but I'll keep it here for simplicity\\n      if (toastId) {\\n        addToRemoveQueue(toastId)\\n      } else {\\n        state.toasts.forEach((toast) => {\\n          addToRemoveQueue(toast.id)\\n        })\\n      }\\n\\n      return {\\n        ...state,\\n        toasts: state.toasts.map((t) =>\\n          t.id === toastId || toastId === undefined\\n            ? {\\n                ...t,\\n                open: false,\\n              }\\n            : t\\n        ),\\n      }\\n    }\\n    case \\\"REMOVE_TOAST\\\":\\n      if (action.toastId === undefined) {\\n        return {\\n          ...state,\\n          toasts: [],\\n        }\\n      }\\n      return {\\n        ...state,\\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\\n      }\\n  }\\n}\\n\\nconst listeners: Array<(state: State) => void> = []\\n\\nlet memoryState: State = { toasts: [] }\\n\\nfunction dispatch(action: Action) {\\n  memoryState = reducer(memoryState, action)\\n  listeners.forEach((listener) => {\\n    listener(memoryState)\\n  })\\n}\\n\\ntype Toast = Omit<ToasterToast, \\\"id\\\">\\n\\nfunction toast({ ...props }: Toast) {\\n  const id = genId()\\n\\n  const update = (props: ToasterToast) =>\\n    dispatch({\\n      type: \\\"UPDATE_TOAST\\\",\\n      toast: { ...props, id },\\n    })\\n  const dismiss = () => dispatch({ type: \\\"DISMISS_TOAST\\\", toastId: id })\\n\\n  dispatch({\\n    type: \\\"ADD_TOAST\\\",\\n    toast: {\\n      ...props,\\n      id,\\n      open: true,\\n      onOpenChange: (open) => {\\n        if (!open) dismiss()\\n      },\\n    },\\n  })\\n\\n  return {\\n    id: id,\\n    dismiss,\\n    update,\\n  }\\n}\\n\\nfunction useToast() {\\n  const [state, setState] = React.useState<State>(memoryState)\\n\\n  React.useEffect(() => {\\n    listeners.push(setState)\\n    return () => {\\n      const index = listeners.indexOf(setState)\\n      if (index > -1) {\\n        listeners.splice(index, 1)\\n      }\\n    }\\n  }, [state])\\n\\n  return {\\n    ...state,\\n    toast,\\n    dismiss: (toastId?: string) => dispatch({ type: \\\"DISMISS_TOAST\\\", toastId }),\\n  }\\n}\\n\\nexport { useToast, toast }\\n\",\n      \"type\": \"registry:hook\"\n    },\n    {\n      \"path\": \"./lib/utils.ts\",\n      \"content\": \"import { clsx, type ClassValue } from \\\"clsx\\\"\\nimport { twMerge } from \\\"tailwind-merge\\\"\\n\\nexport function cn(...inputs: ClassValue[]) {\\n  return twMerge(clsx(inputs))\\n}\\n\",\n      \"type\": \"registry:lib\"\n    },\n    {\n      \"path\": \"./middleware.ts\",\n      \"content\": \"import { NextResponse } from 'next/server';\\nimport { auth } from '@/auth';\\n\\nexport default auth((req) => {\\n  const isProtectedRoute =\\n    req.nextUrl.pathname.startsWith('/protected') ||\\n    req.nextUrl.pathname.startsWith('/api/protected');\\n\\n  if (isProtectedRoute && !req.auth) {\\n    // Add the original URL as a callbackUrl query parameter\\n    const signInUrl = new URL('/signin', req.url);\\n\\n    signInUrl.searchParams.set('callbackUrl', req.nextUrl.pathname);\\n\\n    return NextResponse.redirect(signInUrl);\\n  }\\n});\\n\\nexport const config = {\\n  matcher: ['/((?!api|_next/static|_next/image|favicon.ico).*)'],\\n};\\n\",\n      \"type\": \"registry:example\",\n      \"target\": \"./middleware.ts\"\n    },\n    {\n      \"path\": \"./services/prisma.ts\",\n      \"content\": \"import { PrismaClient } from \\\"@prisma/client\\\"\\n\\nconst prisma = new PrismaClient()\\n\\nexport default prisma\",\n      \"type\": \"registry:example\",\n      \"target\": \"./services/prisma.ts\"\n    },\n    {\n      \"path\": \"./styles/global.css\",\n      \"content\": \"@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n@layer base {\\n  :root {\\n    --background: 0 0% 100%;\\n    --foreground: 240 10% 3.9%;\\n    --card: 0 0% 100%;\\n    --card-foreground: 240 10% 3.9%;\\n    --popover: 0 0% 100%;\\n    --popover-foreground: 240 10% 3.9%;\\n    --primary: 240 5.9% 10%;\\n    --primary-foreground: 0 0% 98%;\\n    --secondary: 240 4.8% 95.9%;\\n    --secondary-foreground: 240 5.9% 10%;\\n    --muted: 240 4.8% 95.9%;\\n    --muted-foreground: 240 3.8% 46.1%;\\n    --accent: 240 4.8% 95.9%;\\n    --accent-foreground: 240 5.9% 10%;\\n    --destructive: 0 84.2% 60.2%;\\n    --destructive-foreground: 0 0% 98%;\\n    --border: 240 5.9% 90%;\\n    --input: 240 5.9% 90%;\\n    --ring: 240 10% 3.9%;\\n    --chart-1: 12 76% 61%;\\n    --chart-2: 173 58% 39%;\\n    --chart-3: 197 37% 24%;\\n    --chart-4: 43 74% 66%;\\n    --chart-5: 27 87% 67%;\\n    --radius: 0.5rem\\n  }\\n  .dark {\\n    --background: 240 10% 3.9%;\\n    --foreground: 0 0% 98%;\\n    --card: 240 10% 3.9%;\\n    --card-foreground: 0 0% 98%;\\n    --popover: 240 10% 3.9%;\\n    --popover-foreground: 0 0% 98%;\\n    --primary: 0 0% 98%;\\n    --primary-foreground: 240 5.9% 10%;\\n    --secondary: 240 3.7% 15.9%;\\n    --secondary-foreground: 0 0% 98%;\\n    --muted: 240 3.7% 15.9%;\\n    --muted-foreground: 240 5% 64.9%;\\n    --accent: 240 3.7% 15.9%;\\n    --accent-foreground: 0 0% 98%;\\n    --destructive: 0 62.8% 30.6%;\\n    --destructive-foreground: 0 0% 98%;\\n    --border: 240 3.7% 15.9%;\\n    --input: 240 3.7% 15.9%;\\n    --ring: 240 4.9% 83.9%;\\n    --chart-1: 220 70% 50%;\\n    --chart-2: 160 60% 45%;\\n    --chart-3: 30 80% 55%;\\n    --chart-4: 280 65% 60%;\\n    --chart-5: 340 75% 55%\\n  }\\n}\\n@layer base {\\n  * {\\n    @apply border-border;\\n  }\\n  body {\\n    @apply bg-background text-foreground;\\n  }\\n}\",\n      \"type\": \"registry:example\",\n      \"target\": \"./styles/global.css\"\n    },\n    {\n      \"path\": \"./tsconfig.json\",\n      \"content\": \"{\\n  \\\"compilerOptions\\\": {\\n    \\\"lib\\\": [\\\"dom\\\", \\\"dom.iterable\\\", \\\"esnext\\\"],\\n    \\\"allowJs\\\": true,\\n    \\\"skipLibCheck\\\": true,\\n    \\\"strict\\\": true,\\n    \\\"noEmit\\\": true,\\n    \\\"esModuleInterop\\\": true,\\n    \\\"module\\\": \\\"esnext\\\",\\n    \\\"moduleResolution\\\": \\\"bundler\\\",\\n    \\\"resolveJsonModule\\\": true,\\n    \\\"isolatedModules\\\": true,\\n    \\\"jsx\\\": \\\"preserve\\\",\\n    \\\"incremental\\\": true,\\n    \\\"plugins\\\": [\\n      {\\n        \\\"name\\\": \\\"next\\\"\\n      }\\n    ],\\n    \\\"paths\\\": {\\n      \\\"@/*\\\": [\\\"./src/*\\\"]\\n    }\\n  },\\n  \\\"include\\\": [\\\"next-env.d.ts\\\", \\\"**/*.ts\\\", \\\"**/*.tsx\\\", \\\".next/types/**/*.ts\\\"],\\n  \\\"exclude\\\": [\\\"node_modules\\\"]\\n}\\n\",\n      \"type\": \"registry:example\",\n      \"target\": \"~/tsconfig.json\"\n    }\n  ],\n  \"tailwind\": {},\n  \"cssVars\": {},\n  \"meta\": {}\n}\n",
      "type": "registry:example",
      "target": "~/authWithCredentials.json"
    },
    {
      "path": "./multi2FA.json",
      "content": "",
      "type": "registry:example",
      "target": "~/multi2FA.json"
    },
    {
      "path": "./postcss.config.js",
      "content": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n",
      "type": "registry:example",
      "target": "~/postcss.config.js"
    },
    {
      "path": "./prisma/migrations/20241014112709_init/migration.sql",
      "content": "-- CreateTable\nCREATE TABLE \"User\" (\n    \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    \"email\" TEXT NOT NULL,\n    \"username\" TEXT NOT NULL,\n    \"name\" TEXT\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"User_email_key\" ON \"User\"(\"email\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"User_username_key\" ON \"User\"(\"username\");\n",
      "type": "registry:example",
      "target": "~/prisma/migrations/20241014112709_init/migration.sql"
    },
    {
      "path": "./prisma/migrations/20241014115814_added_password_to_user/migration.sql",
      "content": "/*\n  Warnings:\n\n  - Added the required column `password` to the `User` table without a default value. This is not possible if the table is not empty.\n\n*/\n-- RedefineTables\nPRAGMA defer_foreign_keys=ON;\nPRAGMA foreign_keys=OFF;\nCREATE TABLE \"new_User\" (\n    \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    \"email\" TEXT NOT NULL,\n    \"username\" TEXT NOT NULL,\n    \"name\" TEXT,\n    \"password\" TEXT NOT NULL\n);\nINSERT INTO \"new_User\" (\"email\", \"id\", \"name\", \"username\") SELECT \"email\", \"id\", \"name\", \"username\" FROM \"User\";\nDROP TABLE \"User\";\nALTER TABLE \"new_User\" RENAME TO \"User\";\nCREATE UNIQUE INDEX \"User_email_key\" ON \"User\"(\"email\");\nCREATE UNIQUE INDEX \"User_username_key\" ON \"User\"(\"username\");\nPRAGMA foreign_keys=ON;\nPRAGMA defer_foreign_keys=OFF;\n",
      "type": "registry:example",
      "target": "~/prisma/migrations/20241014115814_added_password_to_user/migration.sql"
    },
    {
      "path": "./prisma/migrations/20241014163717_link_environments_to_users/migration.sql",
      "content": "-- CreateTable\nCREATE TABLE \"Environment\" (\n    \"id\" TEXT NOT NULL PRIMARY KEY,\n    \"name\" TEXT NOT NULL,\n    \"type\" TEXT NOT NULL,\n    \"userId\" INTEGER NOT NULL,\n    CONSTRAINT \"Environment_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE\n);\n",
      "type": "registry:example",
      "target": "~/prisma/migrations/20241014163717_link_environments_to_users/migration.sql"
    },
    {
      "path": "./prisma/migrations/20241014164725_link_code2_fa_to_environments/migration.sql",
      "content": "-- CreateTable\nCREATE TABLE \"Code2Fa\" (\n    \"SecretCode\" TEXT NOT NULL PRIMARY KEY,\n    \"name\" TEXT NOT NULL,\n    \"EnvironmentId\" TEXT NOT NULL,\n    CONSTRAINT \"Code2Fa_EnvironmentId_fkey\" FOREIGN KEY (\"EnvironmentId\") REFERENCES \"Environment\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE\n);\n",
      "type": "registry:example",
      "target": "~/prisma/migrations/20241014164725_link_code2_fa_to_environments/migration.sql"
    },
    {
      "path": "./prisma/migrations/20241015001601_change_key_name/migration.sql",
      "content": "/*\n  Warnings:\n\n  - The primary key for the `Code2Fa` table will be changed. If it partially fails, the table could be left without primary key constraint.\n  - You are about to drop the column `SecretCode` on the `Code2Fa` table. All the data in the column will be lost.\n  - Added the required column `secretCode` to the `Code2Fa` table without a default value. This is not possible if the table is not empty.\n\n*/\n-- RedefineTables\nPRAGMA defer_foreign_keys=ON;\nPRAGMA foreign_keys=OFF;\nCREATE TABLE \"new_Code2Fa\" (\n    \"secretCode\" TEXT NOT NULL PRIMARY KEY,\n    \"name\" TEXT NOT NULL,\n    \"EnvironmentId\" TEXT NOT NULL,\n    CONSTRAINT \"Code2Fa_EnvironmentId_fkey\" FOREIGN KEY (\"EnvironmentId\") REFERENCES \"Environment\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE\n);\nINSERT INTO \"new_Code2Fa\" (\"secretCode\", \"name\", \"EnvironmentId\")\nSELECT COALESCE(\"secretCode\", ''), \"name\", \"EnvironmentId\" FROM \"Code2Fa\";\nDROP TABLE \"Code2Fa\";\nALTER TABLE \"new_Code2Fa\" RENAME TO \"Code2Fa\";\nPRAGMA foreign_keys=ON;\nPRAGMA defer_foreign_keys=OFF;\n",
      "type": "registry:example",
      "target": "~/prisma/migrations/20241015001601_change_key_name/migration.sql"
    },
    {
      "path": "./prisma/migrations/migration_lock.toml",
      "content": "# Please do not edit this file manually\n# It should be added in your version-control system (i.e. Git)\nprovider = \"sqlite\"",
      "type": "registry:example",
      "target": "~/prisma/migrations/migration_lock.toml"
    },
    {
      "path": "./prisma/schema.prisma",
      "content": "// This is your Prisma schema file,\r\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\r\n\r\ngenerator client {\r\n  provider = \"prisma-client-js\"\r\n}\r\n\r\ndatasource db {\r\n  provider = \"sqlite\"\r\n  url      = env(\"DATABASE_URL\")\r\n}\r\n\r\nmodel User {\r\n  id            Int     @id @default(autoincrement())\r\n  email         String  @unique\r\n  username      String @unique\r\n  name          String?\r\n  password      String\r\n  environments  Environment[]\r\n}\r\n\r\nmodel Environment{\r\n  id            String @id @default(cuid())\r\n  name          String\r\n  type          String\r\n  userId        Int\r\n  user          User @relation(fields: [userId], references: [id], onDelete: Restrict)  \r\n  Codes2Fa      Code2Fa[]   \r\n}\r\n\r\nmodel Code2Fa {\r\n  secretCode    String @id\r\n  name          String\r\n  EnvironmentId String\r\n  environment   Environment @relation(fields: [EnvironmentId], references: [id], onDelete: Restrict)\r\n}",
      "type": "registry:example",
      "target": "~/prisma/schema.prisma"
    },
    {
      "path": "./run.bat",
      "content": "@echo off\r\ncd \"path to project folder\"\r\n\r\n:: echo Would you like to rebuild the app? (y/n)\r\n:: set /p rebuild=\r\n\r\n:: if /i \"%rebuild%\"==\"y\" (\r\n::    echo Rebuilding the app...\r\n::    call npm run build\r\n::    if %errorlevel% neq 0 (\r\n::        echo Failed to build the app. Press any key to exit.\r\n::        pause > nul\r\n::        exit /b\r\n::    )\r\n:: )\r\n\r\nGOTO :endOfOldVersion\r\necho Starting the app...\r\ncall npm start\r\nif %errorlevel% neq 0 (\r\n    echo Failed to start the app. Press any key to exit.\r\n    pause > nul\r\n    exit /b\r\n)\r\n\r\necho App is running. Press any key to close.\r\npause > nul\r\n\r\n:endOfOldVersion\r\necho Starting the app...\r\n\r\n:: Start the Next.js app in a new window without blocking the script\r\nstart \"\" cmd /c \"npm start\"\r\n\r\n:: Wait for a few seconds to give the app some time to start\r\n:: timeout /t 1 /nobreak >nul\r\n\r\n:: Once the port is open, open the browser\r\nstart \"\" \"http://localhost:3030\"\r\n\r\n::close unecessarry window\r\nexit \r\n\r\n:: echo App is running. Press any key to close.\r\n:: pause > nul\r\n",
      "type": "registry:example",
      "target": "~/run.bat"
    },
    {
      "path": "./app/api/auth/[...nextauth]/route.ts",
      "content": "import { handlers } from \"@/auth\"\n\nexport const { GET, POST } = handlers\n",
      "type": "registry:example",
      "target": "./app/api/auth/[...nextauth]/route.ts"
    },
    {
      "path": "./app/api/protected/code2fa/route.ts",
      "content": "import { NextResponse } from 'next/server';\r\nimport prisma from '@/services/prisma';\r\nimport { generateTOTP } from '@/lib/totp'; // You'll need to implement this function\r\n\r\nexport async function GET(request: Request) {\r\n  const { searchParams } = new URL(request.url);\r\n  const secretCode = searchParams.get('secretCode');\r\n  const environmentId = searchParams.get('environmentId');\r\n\r\n  if (!secretCode || !environmentId) {\r\n    return NextResponse.json({ error: 'Missing parameters' }, { status: 400 });\r\n  }\r\n\r\n  try {\r\n    const code2fa = await prisma.code2Fa.findUnique({\r\n      where: { secretCode: secretCode, EnvironmentId: environmentId },\r\n    });\r\n\r\n    if (!code2fa) {\r\n      return NextResponse.json({ error: 'Code not found' }, { status: 404 });\r\n    }\r\n\r\n    const totpCode = generateTOTP(code2fa.secretCode);\r\n\r\n    return NextResponse.json({ code: totpCode.otp, expires: totpCode.expires });\r\n  } catch (error) {\r\n    console.error('Error generating TOTP:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n",
      "type": "registry:example",
      "target": "./app/api/protected/code2fa/route.ts"
    },
    {
      "path": "./app/layout.tsx",
      "content": "import { SessionProvider } from 'next-auth/react';\r\nimport '@/styles/global.css';\r\nimport { Toaster } from '@/components/ui/toaster';\r\nimport { Sidebar } from '@/components/Sidebar';\r\nimport { ThemeProvider } from '@/components/providers/ThemeProvider';\r\n\r\nexport const metadata = {\r\n  title: 'Next.js',\r\n  description: 'Generated by Next.js',\r\n};\r\n\r\nexport default function RootLayout({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  return (\r\n    <html lang='en'>\r\n      <body>\r\n        <SessionProvider>\r\n          <ThemeProvider\r\n            attribute='class'\r\n            defaultTheme='system'\r\n            enableSystem\r\n            disableTransitionOnChange\r\n          >\r\n            <div className='flex h-screen bg-gray-100 dark:bg-gray-900'>\r\n              <Sidebar />\r\n              <main className='flex-1 mt-3 md:mt-0 md:ml-44'>{children}</main>\r\n            </div>\r\n          </ThemeProvider>\r\n        </SessionProvider>\r\n        <Toaster />\r\n      </body>\r\n    </html>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "./app/layout.tsx"
    },
    {
      "path": "./app/page.tsx",
      "content": "export default function Home() {\r\n  return (\r\n    <div className=\"m-4\">\r\n      <h1 className=\"text-4xl font-bold\">2FA Totp</h1>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "./app/page.tsx"
    },
    {
      "path": "./app/protected/dashboard/add-environment/page.tsx",
      "content": "import { auth } from \"@/auth\";\r\nimport { AddToast } from \"@/components/AddToast\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\";\r\n\r\nimport { Input } from \"@/components/ui/input\";\r\nimport prisma from \"@/services/prisma\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { redirect } from \"next/navigation\";\r\n\r\nexport default function AddEnvironmentPage({\r\n  searchParams,\r\n}: {\r\n  searchParams: { [key: string]: string | string[] | undefined };\r\n}) {\r\n  const addEnvironment = async (formData: FormData) => {\r\n    \"use server\";\r\n    const session = await auth();\r\n    const name = formData.get(\"name\") as string;\r\n    const type = formData.get(\"type\") as string;\r\n    const randomCallId = Math.random().toString(36).substring(2, 15);\r\n\r\n    if (!session?.user) {\r\n      throw redirect(\"/signin\");\r\n    }\r\n    try {\r\n      const user = await prisma.user.findUnique({\r\n        where: { email: session?.user?.email as string },\r\n      });\r\n\r\n      await prisma.environment.create({\r\n        data: {\r\n          name,\r\n          type,\r\n          userId: user?.id as unknown as number,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw redirect(\r\n        `/protected/dashboard/add-environment?title=Error&description=Failed+to+create+environment&variant=destructive&call=${randomCallId}`\r\n      );\r\n    }\r\n    throw redirect(\r\n      \"/protected/dashboard/?title=Success&description=Environment+added+successfully&variant=success\"\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto mt-8\">\r\n      <AddToast\r\n        title={searchParams.title as string}\r\n        description={searchParams.description as string}\r\n        variant={\r\n          searchParams.variant as\r\n            | \"default\"\r\n            | \"destructive\"\r\n            | \"success\"\r\n            | null\r\n            | undefined\r\n        }\r\n        callId={searchParams.call as string}\r\n      />\r\n      <Card className=\"shadow-md mx-2 md:w-1/2 md:mx-auto\">\r\n        <CardHeader>\r\n          <CardTitle>\r\n            <div className=\"text-2xl font-bold\">Add an environment</div>\r\n          </CardTitle>\r\n          <CardDescription>Add an environment to your account</CardDescription>\r\n        </CardHeader>\r\n        <form action={addEnvironment}>\r\n          <CardContent>\r\n            <div className=\"flex flex-col gap-2\">\r\n              <div className=\"flex flex-row flex-wrap\">\r\n                <div className=\"flex flex-col w-full lg:w-1/2 lg:pr-2 mb-2\">\r\n                  <Label className=\"mb-1\" htmlFor=\"environment-name\">\r\n                    Environment Name\r\n                  </Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    id=\"environment-name\"\r\n                    placeholder=\"Environment Name\"\r\n                    required\r\n                  />\r\n                </div>\r\n                <div className=\"flex flex-col w-full lg:w-1/2 lg:pl-2\">\r\n                  <Label className=\"mb-1\" htmlFor=\"environment-type\">\r\n                    Environment Type\r\n                  </Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"type\"\r\n                    id=\"environment-type\"\r\n                    placeholder=\"Environment Type\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n          <CardFooter className=\"flex justify-end pt-4\">\r\n            <Button type=\"submit\">Save</Button>\r\n          </CardFooter>\r\n        </form>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "./app/protected/dashboard/add-environment/page.tsx"
    },
    {
      "path": "./app/protected/dashboard/environments/[environmentId]/add-code/page.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport prisma from \"@/services/prisma\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { AddToast } from \"@/components/AddToast\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\";\r\nimport { redirect } from \"next/navigation\";\r\nimport { getUser } from \"@/auth\";\r\nimport SecretInput from \"@/components/SecretInput\";\r\n\r\nexport default async function AddCodePage({\r\n  params,\r\n  searchParams,\r\n}: {\r\n  params: { environmentId: string };\r\n  searchParams: { [key: string]: string | string[] | undefined };\r\n}) {\r\n  const createCode = async (formData: FormData) => {\r\n    \"use server\";\r\n    const user = await getUser();\r\n    if (!user) {\r\n      const randomCallId = Math.random().toString(36).substring(2, 15);\r\n      const searchParams = new URLSearchParams();\r\n      searchParams.set(\"title\", \"Unauthorized\");\r\n      searchParams.set(\"description\", \"Unauthorized\");\r\n      searchParams.set(\"variant\", \"destructive\");\r\n      searchParams.set(\"callId\", randomCallId);\r\n      throw redirect(\"/protected/dashboard/?\" + searchParams.toString());\r\n    }\r\n    const name = formData.get(\"name\") as string;\r\n    const secretCode = formData.get(\"secretCode\") as string;\r\n    const environmentId = formData.get(\"environmentId\") as string;\r\n\r\n    try {\r\n      await prisma.code2Fa.create({\r\n        data: {\r\n          name,\r\n          secretCode: secretCode,\r\n          EnvironmentId: environmentId,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error creating code:\", error);\r\n      const randomCallId = Math.random().toString(36).substring(2, 15);\r\n      const searchParams = new URLSearchParams();\r\n      searchParams.set(\"title\", \"Failed to create code\");\r\n      searchParams.set(\"description\", \"Failed to create code\");\r\n      searchParams.set(\"variant\", \"destructive\");\r\n      searchParams.set(\"callId\", randomCallId);\r\n      throw redirect(\r\n        \"/protected/dashboard/environments/\" +\r\n          environmentId +\r\n          \"/add-code/\" +\r\n          \"?\" +\r\n          searchParams.toString()\r\n      );\r\n    }\r\n    const randomCallId = Math.random().toString(36).substring(2, 15);\r\n    const searchParams = new URLSearchParams();\r\n    searchParams.set(\"title\", \"Code created\");\r\n    searchParams.set(\"description\", \"Code created\");\r\n    searchParams.set(\"variant\", \"success\");\r\n    searchParams.set(\"callId\", randomCallId);\r\n    throw redirect(\"/protected/dashboard/?\" + searchParams.toString());\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto mt-8\">\r\n      <AddToast\r\n        title={searchParams.title as string}\r\n        description={searchParams.description as string}\r\n        variant={\r\n          searchParams.variant as\r\n            | \"default\"\r\n            | \"destructive\"\r\n            | \"success\"\r\n            | null\r\n            | undefined\r\n        }\r\n        callId={searchParams.call as string}\r\n      />\r\n      <Card className=\"shadow-md mx-2 md:w-1/2 md:mx-auto\">\r\n        <CardHeader>\r\n          <CardTitle>\r\n            <div className=\"text-2xl font-bold\">Add a 2fa code</div>\r\n          </CardTitle>\r\n          <CardDescription>Add a 2fa code to your environment</CardDescription>\r\n        </CardHeader>\r\n        <form action={createCode} className=\"space-y-4\">\r\n          <CardContent>\r\n            <input\r\n              type=\"hidden\"\r\n              name=\"environmentId\"\r\n              value={params.environmentId}\r\n            />\r\n            <div>\r\n              <Label htmlFor=\"name\">Name</Label>\r\n              <Input type=\"text\" id=\"name\" name=\"name\" required />\r\n            </div>\r\n            <SecretInput />\r\n          </CardContent>\r\n          <CardFooter className=\"flex justify-end pt-4\">\r\n            <Button type=\"submit\">Save</Button>\r\n          </CardFooter>\r\n        </form>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "./app/protected/dashboard/environments/[environmentId]/add-code/page.tsx"
    },
    {
      "path": "./app/protected/dashboard/environments/actions.ts",
      "content": "'use server';\r\n\r\nimport prisma from '@/services/prisma';\r\nimport { getUser } from '@/auth';\r\n\r\nexport async function deleteCode(codeId: string) {\r\n  const user = await getUser();\r\n  if (!user) {\r\n    return { success: false, error: 'User not found' };\r\n  }\r\n\r\n  // find the code and its environemnt if nvironment user is user then delete it\r\n  const code = await prisma.code2Fa.findUnique({\r\n    where: {\r\n      secretCode: codeId,\r\n    },\r\n    include: {\r\n      environment: true,\r\n    },\r\n  });\r\n  if (!code) {\r\n    return { error: 'Code not found' };\r\n  }\r\n  if (code.environment.userId !== user.id) {\r\n    return { error: 'You are not authorized to delete this code' };\r\n  }\r\n  await prisma.code2Fa.delete({\r\n    where: {\r\n      secretCode: codeId,\r\n    },\r\n  });\r\n  return { success: 'Code deleted' };\r\n}\r\n\r\nexport async function deleteEnvironment(environmentId: string | undefined): Promise<{ success?: string; error?: string }> {\r\n  const user = await getUser();\r\n  if (!user) {\r\n    return { error: 'User not found'};\r\n  }\r\n  const environment = await prisma.environment.findUnique({\r\n    where: {\r\n      id: environmentId,\r\n    },\r\n    include: {\r\n      Codes2Fa: true,\r\n    },\r\n  });\r\n  if (!environment) {\r\n    return { error: 'Environment not found' };\r\n  }\r\n  if (environment.userId !== user.id) {\r\n    return { error: 'You are not authorized to delete this environment' };\r\n  }\r\n  try {\r\n    await prisma.environment.delete({\r\n      where: {\r\n        id: environmentId,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error('Error deleting environment:', error);\r\n    return { error: 'Error deleting environment'};\r\n  }\r\n  return { success: 'Environment deleted' };\r\n}\r\n",
      "type": "registry:example",
      "target": "./app/protected/dashboard/environments/actions.ts"
    },
    {
      "path": "./app/protected/dashboard/page.tsx",
      "content": "import Link from \"next/link\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\nimport { AddToast } from \"@/components/AddToast\";\r\nimport { auth } from \"@/auth\";\r\nimport prisma from \"@/services/prisma\";\r\nimport { EnvironmentCard } from \"@/components/EnvironmentCard\";\r\n\r\nexport default async function DashboardPage({\r\n  searchParams,\r\n}: {\r\n  searchParams: { [key: string]: string | string[] | undefined };\r\n}) {\r\n  const session = await auth();\r\n  const user = await prisma.user.findUniqueOrThrow({\r\n    where: { email: session?.user?.email as string },\r\n  });\r\n\r\n  const environments = await prisma.environment.findMany({\r\n    where: { userId: user.id },\r\n    include: { Codes2Fa: true },\r\n  });\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-2 py-8\">\r\n      <AddToast\r\n        title={searchParams.title as string}\r\n        description={searchParams.description as string}\r\n        variant={\r\n          searchParams.variant as\r\n            | \"default\"\r\n            | \"destructive\"\r\n            | \"success\"\r\n            | null\r\n            | undefined\r\n        }\r\n        callId={searchParams.call as string}\r\n      />\r\n      <div className=\"flex flex-wrap justify-between items-center mb-8 mx-2\">\r\n        <h1 className=\"mr-2 text-3xl font-bold mb-2\">Dashboard</h1>\r\n        <Link href=\"/protected/dashboard/add-environment\">\r\n          <Button>Add Environment</Button>\r\n        </Link>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2\">\r\n        {environments.map((environment) => (\r\n          <EnvironmentCard environment={environment} key={environment.id} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "./app/protected/dashboard/page.tsx"
    },
    {
      "path": "./app/signin/page.tsx",
      "content": "import SignInForm from '@/components/login/SignInForm';\nimport SignupResult from '@/components/login/SignupResult';\nexport default function SignInPage({\n  searchParams,\n}: {\n  searchParams: { message: string };\n}) {\n  return (\n    <div className='flex min-h-screen items-center justify-center bg-gray-100'>\n      <SignupResult message={searchParams.message} />\n      <SignInForm />\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": "./app/signin/page.tsx"
    },
    {
      "path": "./app/signup/page.tsx",
      "content": "import SignUpForm from \"@/components/login/SignupForm\"\n\n\n\nexport default function SignUpPage({\n  searchParams\n}: {\n  searchParams: { message: string }\n}) {\n  return (\n    <div>\n      <SignUpForm searchParams={searchParams}/>\n    </div>\n  )\n}",
      "type": "registry:example",
      "target": "./app/signup/page.tsx"
    },
    {
      "path": "./auth.ts",
      "content": "import NextAuth from 'next-auth';\r\nimport Credentials from 'next-auth/providers/credentials';\r\nimport bcrypt from 'bcryptjs';\r\nimport prisma from '@/services/prisma';\r\n\r\nexport const { handlers, auth, signIn, signOut } = NextAuth({\r\n  providers: [\r\n    Credentials({\r\n      // The name to display on the sign in form (e.g. \"Sign in with...\")\r\n      name: 'Credentials',\r\n      // The credentials is used to generate a suitable form on the sign in page.\r\n      // You can specify whatever fields you are expecting to be submitted.\r\n      credentials: {\r\n        username: { label: 'Username', type: 'text', placeholder: 'jsmith' },\r\n        password: { label: 'Password', type: 'password' },\r\n      },\r\n      authorize: async (credentials, request) => {\r\n        const { username, password } = credentials as { username: string; password: string };\r\n        console.log(request);\r\n        \r\n        if (!credentials?.username || !credentials?.password) {\r\n          return null;\r\n        }\r\n\r\n        try {\r\n          // Find the user in the database\r\n          const user = await prisma.user.findUnique({\r\n            where: { username: username },\r\n          });\r\n\r\n          if (!user) {\r\n            return null;\r\n          }\r\n\r\n          // Compare the provided password with the hashed password in the database\r\n          const isPasswordValid = await bcrypt.compare(\r\n            password,\r\n            user.password\r\n          );\r\n\r\n          if (!isPasswordValid) {\r\n            return null;\r\n          }\r\n          \r\n\r\n          // Return user object if validation is successful\r\n          return {\r\n            id: user.id.toString(), // Convert id to string\r\n            name: user.name,\r\n            username: user.username,\r\n            email: user.email,\r\n          };\r\n        } catch (error) {\r\n          console.error('Error during authentication:', error);\r\n          return null;\r\n        } finally {\r\n          await prisma.$disconnect();\r\n        }\r\n      },\r\n    }),\r\n  ],\r\n});\r\n\r\nexport const getUser = async () => {\r\n  const session = await auth();\r\n  const user = await prisma.user.findUnique({\r\n    where: {\r\n      email: session?.user?.email as string,\r\n    },\r\n  });\r\n  return user;\r\n};\r\n",
      "type": "registry:example",
      "target": "./auth.ts"
    },
    {
      "path": "./components/AddToast.tsx",
      "content": "\"use client\";\r\n\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport function AddToast({\r\n  title,\r\n  description,\r\n  variant,\r\n  callId,\r\n}: {\r\n  title: string | null;\r\n  description: string | null;\r\n  callId: string | null;\r\n  variant: \"default\" | \"destructive\" | \"success\" | null | undefined;\r\n}) {\r\n  const { toast } = useToast();\r\n\r\n  useEffect(() => {\r\n    if (title || description || variant || callId)\r\n      toast({\r\n        title: title || \"\",\r\n        description: description || \"\",\r\n        variant: variant || \"default\",\r\n        duration: 5000,\r\n      });\r\n  }, [title, description, toast, callId, variant]);\r\n\r\n  return null;\r\n}\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components/AuthStatus.tsx",
      "content": "\"use client\";\r\n\r\nimport { useSession } from \"next-auth/react\";\r\nimport { signOut } from \"next-auth/react\";\r\nimport Link from \"next/link\";\r\n\r\nexport default function AuthStatus() {\r\n  const { data: session, status } = useSession();\r\n\r\n  if (status === \"loading\") {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (status === \"unauthenticated\") {\r\n    return (\r\n      <div>\r\n        <h2 className=\"text-2xl font-bold\">You are not signed in.</h2>\r\n        <Link href=\"/signin\">\r\n          <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\r\n            Sign In\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"text-2xl font-bold\">Signed in as {session?.user?.name}</h2>\r\n      <button\r\n        className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\r\n        onClick={() => signOut()}\r\n      >\r\n        Sign Out\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components/Code2FaCell.tsx",
      "content": "\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\nexport function Code2FaCell({\r\n  secretCode,\r\n  environmentId,\r\n}: {\r\n  secretCode: string;\r\n  environmentId: string;\r\n}) {\r\n  const [code, setCode] = useState<string>(\"\");\r\n  const [timeLeft, setTimeLeft] = useState<number>(0); // Assuming 30 seconds validity\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [copyStatus, setCopyStatus] = useState<string>(\"Copy\");\r\n\r\n  console.log(isLoading);\r\n\r\n  useEffect(() => {\r\n    const fetchCode = async () => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      try {\r\n        const response = await fetch(\r\n          `/api/protected/code2fa/?secretCode=${encodeURIComponent(\r\n            secretCode\r\n          )}&environmentId=${encodeURIComponent(environmentId)}`\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch 2FA code\");\r\n        }\r\n        const data = await response.json();\r\n        setCode(data.code);\r\n        setTimeLeft(Math.floor((Date.now() - data.expires) / -1000)); // Reset timer when new code is fetched\r\n      } catch (err) {\r\n        setError(\"Error fetching 2FA code\");\r\n        console.error(err);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchCode();\r\n\r\n    const timer = setInterval(() => {\r\n      setTimeLeft((prevTime) => {\r\n        if (prevTime <= 1) {\r\n          fetchCode(); // Fetch new code when timer reaches 0\r\n          return 30; // Reset timer to 30 seconds\r\n        }\r\n        return prevTime - 1;\r\n      });\r\n    }, 1000);\r\n\r\n    return () => clearInterval(timer);\r\n  }, [secretCode, environmentId]);\r\n\r\n  const copyToClipboard = async () => {\r\n    try {\r\n      await navigator.clipboard.writeText(code);\r\n      setCopyStatus(\"Copied!\");\r\n      setTimeout(() => setCopyStatus(\"Copy\"), 2000);\r\n    } catch (err) {\r\n      console.error(\"Failed to copy: \", err);\r\n      setCopyStatus(\"Failed to copy\");\r\n    }\r\n  };\r\n\r\n  // if (isLoading) return <span>Loading...</span>;\r\n  if (error) return <span>{error}</span>;\r\n\r\n  return (\r\n    <div className=\"flex items-center flex-wrap\">\r\n      <span>{code}</span>\r\n      <span className=\"text-xs text-gray-500 px-1\">\r\n        (Valid for {timeLeft} seconds)\r\n      </span>\r\n      <Button\r\n        className=\"text-xs text-gray-500 px-1 \"\r\n        variant=\"ghost\"\r\n        onClick={copyToClipboard}\r\n      >\r\n        {copyStatus}\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components/Code2FaTable.tsx",
      "content": "\"use client\";\r\n\r\nimport { Code2Fa } from \"@prisma/client\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Code2FaCell } from \"@/components/Code2FaCell\";\r\nimport Link from \"next/link\";\r\nimport { deleteCode } from \"@/app/protected/dashboard/environments/actions\";\r\nimport { AddToast } from \"./AddToast\";\r\nimport { useState } from \"react\";\r\nimport { Trash } from \"lucide-react\";\r\n\r\nexport function Code2FaTable({\r\n  codes,\r\n  environmentId,\r\n}: {\r\n  codes: Code2Fa[];\r\n  environmentId: string;\r\n}) {\r\n  const [toast, setToast] = useState<{\r\n    title: string;\r\n    description: string;\r\n    variant: \"default\" | \"destructive\" | \"success\";\r\n    callId: string;\r\n  } | null>();\r\n  const [displayedCodes, setDisplayedCodes] = useState<Code2Fa[]>(codes);\r\n\r\n  const handleDelete = async (secretCode: string) => {\r\n    // Implement delete functionality\r\n    const response = await deleteCode(secretCode);\r\n    if (response.error) {\r\n      setToast({\r\n        title: \"Error\",\r\n        description: response.error,\r\n        variant: \"destructive\",\r\n        callId: secretCode,\r\n      });\r\n    }\r\n    if (response.success) {\r\n      setToast({\r\n        title: \"Success\",\r\n        description:\r\n          typeof response.success === \"string\" ? response.success : \"\",\r\n        variant: \"success\",\r\n        callId: secretCode,\r\n      });\r\n      setDisplayedCodes(\r\n        displayedCodes.filter((code) => code.secretCode !== secretCode)\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <AddToast\r\n        title={toast?.title || null}\r\n        description={toast?.description || null}\r\n        variant={toast?.variant || null}\r\n        callId={toast?.callId || null}\r\n      />\r\n      <div className=\"mb-4\">\r\n        <Link\r\n          href={`/protected/dashboard/environments/${environmentId}/add-code`}\r\n        >\r\n          <Button>Add New Code</Button>\r\n        </Link>\r\n      </div>\r\n      <Table>\r\n        <TableHeader>\r\n          <TableRow>\r\n            <TableHead>Name</TableHead>\r\n            <TableHead>Code</TableHead>\r\n            <TableHead>Actions</TableHead>\r\n          </TableRow>\r\n        </TableHeader>\r\n        <TableBody>\r\n          {displayedCodes?.map((code, index) => (\r\n            <TableRow\r\n              key={index}\r\n              //   key={code.SecretCode}\r\n            >\r\n              <TableCell>{code.name}</TableCell>\r\n              <TableCell>\r\n                <Code2FaCell\r\n                  secretCode={code.secretCode}\r\n                  environmentId={environmentId}\r\n                />\r\n              </TableCell>\r\n              <TableCell>\r\n                <Button\r\n                  variant=\"destructive\"\r\n                  size=\"icon\"\r\n                  onClick={() => handleDelete(code.secretCode)}\r\n                >\r\n                  <Trash className=\"w-4 h-4\" />\r\n                </Button>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components/DeleteButton.tsx",
      "content": "'use client';\r\n\r\nimport { Button } from './ui/button';\r\nimport { AddToast } from './AddToast';\r\nimport { useState } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\n\r\nexport function DeleteButton({\r\n  deleteAction,\r\n  id,\r\n}: {\r\n  deleteAction: (\r\n    id: string | number\r\n  ) => Promise<{ success?: string; error?: string }>;\r\n  id: string | number;\r\n}) {\r\n  const router = useRouter();\r\n  const [toast, setToast] = useState<{\r\n    variant: 'success' | 'destructive' | 'default' | null;\r\n    title: string;\r\n    description: string;\r\n    callId: string;\r\n  } | null>(null);\r\n  return (\r\n    <Button\r\n      variant='destructive'\r\n      onClick={async () => {\r\n        const response = await deleteAction(id);\r\n        const randomId = Math.random().toString(36).substring(7);\r\n        setToast({\r\n          variant: response.success ? 'success' : 'destructive',\r\n          title: response.success ? 'Success' : 'Error',\r\n          description: response.success\r\n            ? 'Operation successful'\r\n            : response.error || 'An error occurred',\r\n          callId: randomId,\r\n        });\r\n        // refresh the page\r\n        router.refresh();\r\n      }}\r\n    >\r\n      <AddToast\r\n        variant={toast?.variant || null}\r\n        title={toast?.title || null}\r\n        description={toast?.description || null}\r\n        callId={toast?.callId || null}\r\n      />\r\n      Delete\r\n    </Button>\r\n  );\r\n}\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components/EnvironmentCard.tsx",
      "content": "import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\r\nimport { Environment, Code2Fa } from '@prisma/client';\r\nimport { Code2FaTable } from '@/components/Code2FaTable';\r\nimport { DeleteButton } from '@/components/DeleteButton';\r\nimport { deleteEnvironment } from '@/app/protected/dashboard/environments/actions';\r\n\r\n// Adjust the deleteEnvironment function to accept string | number\r\nconst adjustedDeleteEnvironment = async (id: string | number) => {\r\n  'use server';\r\n  const result = await deleteEnvironment(id.toString());\r\n  return {\r\n    ...result,\r\n  };\r\n};\r\n\r\nexport function EnvironmentCard({\r\n  environment,\r\n}: {\r\n  environment: Environment & { Codes2Fa: Code2Fa[] };\r\n}) {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className='text-xl font-bold flex flex-wrap justify-between'>\r\n          <div className='flex flex-col'>\r\n            <div>{environment.name}</div>\r\n            <div>{environment.type}</div>\r\n          </div>\r\n          <div className=''>\r\n            <DeleteButton\r\n              deleteAction={adjustedDeleteEnvironment}\r\n              id={environment.id}\r\n            />\r\n          </div>\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <Code2FaTable\r\n          codes={environment.Codes2Fa}\r\n          environmentId={environment.id}\r\n        />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components/SecretInput.tsx",
      "content": "'use client'\r\n\r\nimport { useState } from 'react';\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport jsQR from 'jsqr';\r\n\r\nexport default function SecretInput() {\r\n\tconst [secret, setSecret] = useState('');\r\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\tconst [_, setImageFile] = useState<File | null>(null);\r\n\r\n\tconst handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst file = e.target.files?.[0] || null;\r\n\t\tsetImageFile(file);\r\n\t\tif (file) {\r\n\t\t\tconst reader = new FileReader();\r\n\t\t\treader.onload = async () => {\r\n\t\t\t\tif (reader.result) {\r\n\t\t\t\t\tprocessImage(reader.result as string);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\treader.readAsDataURL(file);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handlePaste = (e: React.ClipboardEvent<HTMLTextAreaElement>) => {\r\n\t\tconst items = Array.from(e.clipboardData.items);\r\n\t\tfor (const item of items) {\r\n\t\t\tif (item.type.startsWith('image/')) {\r\n\t\t\t\tconst file = item.getAsFile();\r\n\t\t\t\tif (file) {\r\n\t\t\t\t\tconst reader = new FileReader();\r\n\t\t\t\t\treader.onload = async () => {\r\n\t\t\t\t\t\tif (reader.result) {\r\n\t\t\t\t\t\t\tprocessImage(reader.result as string);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\treader.readAsDataURL(file);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst processImage = (imageSrc: string) => {\r\n\t\tconst img = new Image();\r\n\t\timg.src = imageSrc;\r\n\t\timg.onload = () => {\r\n\t\t\tconst canvas = document.createElement('canvas');\r\n\t\t\tcanvas.width = img.width;\r\n\t\t\tcanvas.height = img.height;\r\n\t\t\tconst ctx = canvas.getContext('2d');\r\n\t\t\tif (ctx) {\r\n\t\t\t\tctx.drawImage(img, 0, 0, img.width, img.height);\r\n\t\t\t\tconst imageData = ctx.getImageData(0, 0, img.width, img.height);\r\n\t\t\t\tconst code = jsQR(imageData.data, imageData.width, imageData.height);\r\n\t\t\t\tif (code) {\r\n\t\t\t\t\tconst Url = new URL(code.data);\r\n\t\t\t\t\tconst secret = Url.searchParams.get('secret');\r\n\t\t\t\t\tsetSecret(secret || '');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.error('No QR code found.');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"space-y-2\">\r\n\t\t\t<Label htmlFor=\"secret\">\r\n\t\t\t\tSecret&nbsp;\r\n\t\t\t\t<small>\r\n\t\t\t\t\t( will accept pasted screenshot of a QR code )\r\n\t\t\t\t</small>\r\n\t\t\t</Label>\r\n\t\t\t<textarea\r\n\t\t\t\tid=\"secret\"\r\n\t\t\t\tname=\"secretCode\"\r\n\t\t\t\tvalue={secret || ''}\r\n\t\t\t\tonChange={(e) => setSecret(e.target.value)}\r\n\t\t\t\tonPaste={handlePaste}\r\n\t\t\t\tclassName=\"w-full p-2 border rounded-md\"\r\n\t\t\t\trows={4}\r\n\t\t\t/>\r\n\t\t\t<Label htmlFor=\"qr-file\">Upload QR Code Image</Label>\r\n\t\t\t<Input\r\n\t\t\t\ttype=\"file\"\r\n\t\t\t\tid=\"qr-file\"\r\n\t\t\t\tname=\"qr-file\"\r\n\t\t\t\taccept=\"image/*\"\r\n\t\t\t\tonChange={handleFileChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}",
      "type": "registry:block"
    },
    {
      "path": "./components/Sidebar.tsx",
      "content": "'use client';\r\n\r\nimport Link from 'next/link';\r\nimport { Button } from '@/components/ui/button';\r\nimport { UserButton } from '@/components/UserButton';\r\nimport { ThemeToggleButton } from './ThemeToggleButton';\r\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\r\nimport { Menu } from 'lucide-react';\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst navItems = [\r\n  { name: 'Dashboard', href: '/protected/dashboard' },\r\n  { name: 'Add Environment', href: '/protected/dashboard/add-environment' },\r\n];\r\n\r\nexport function Sidebar() {\r\n  const [isMobile, setIsMobile] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const checkMobile = () => setIsMobile(window.innerWidth < 768);\r\n    checkMobile();\r\n    window.addEventListener('resize', checkMobile);\r\n    return () => window.removeEventListener('resize', checkMobile);\r\n  }, []);\r\n\r\n  const SidebarContent = () => (\r\n    <div className='flex flex-col h-full w-full bg-gray-100 dark:bg-gray-900 p-4 shadow-lg shadow-gray-500'>\r\n      <div className='mb-6 flex justify-between mt-10 md:mt-0'>\r\n        <ThemeToggleButton />\r\n        <UserButton />\r\n      </div>\r\n      <nav className='space-y-2'>\r\n        {navItems.map((item) => (\r\n          <Link key={item.href} href={item.href}>\r\n            <Button variant='ghost' className='w-full justify-start'>\r\n              {item.name}\r\n            </Button>\r\n          </Link>\r\n        ))}\r\n      </nav>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {isMobile ? (\r\n        <Sheet>\r\n          <SheetTrigger asChild>\r\n            <Button\r\n              variant='outline'\r\n              size='icon'\r\n              className='fixed top-1 right-4 z-50'\r\n            >\r\n              <Menu className='h-[1.2rem] w-[1.2rem]' />\r\n            </Button>\r\n          </SheetTrigger>\r\n          <SheetContent side='left' className='p-0 w-64'>\r\n            <SidebarContent />\r\n          </SheetContent>\r\n        </Sheet>\r\n      ) : (\r\n        <div\r\n          className='hidden md:flex md:w-44\r\n         md:flex-col md:fixed md:inset-y-0'\r\n        >\r\n          <SidebarContent />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components/ThemeToggleButton.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { MoonIcon, SunIcon } from '@radix-ui/react-icons';\nimport { useTheme } from 'next-themes';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\n\nexport function ThemeToggleButton() {\n  const { setTheme } = useTheme();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant='outline' size='icon'>\n          <SunIcon className='h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0' />\n          <MoonIcon className='absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100' />\n          <span className='sr-only'>Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align='end'>\n        <DropdownMenuItem onClick={() => setTheme('light')}>\n          Light\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme('dark')}>\n          Dark\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme('system')}>\n          System\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:block"
    },
    {
      "path": "./components/UserButton.tsx",
      "content": "\"use client\";\r\n\r\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport Link from \"next/link\";\r\nimport { LogOutButton } from \"@/components/login/LogOutButton\";\r\nimport { useSession } from \"next-auth/react\";\r\n\r\nexport function UserButton() {\r\n  const { data: session } = useSession();\r\n  const user = session?.user;\r\n\r\n  const initials = session?.user?.name\r\n    ? `${session.user.name[0]}${session.user.name[1] || \"\"}`\r\n    : \"UN\";\r\n\r\n  if (!session) {\r\n    return (\r\n      <Link href=\"/signin\">\r\n        <Button>Login</Button>\r\n      </Link>\r\n    );\r\n  }\r\n  return (\r\n    <DropdownMenu>\r\n      <DropdownMenuTrigger asChild>\r\n        <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\r\n          <Avatar className=\"h-8 w-8\">\r\n            <AvatarFallback>{initials}</AvatarFallback>\r\n          </Avatar>\r\n        </Button>\r\n      </DropdownMenuTrigger>\r\n      <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\r\n        <DropdownMenuLabel className=\"font-normal\">\r\n          <div className=\"flex flex-col space-y-1\">\r\n            <p className=\"text-sm font-medium leading-none\">{user?.name}</p>\r\n            <p className=\"text-xs leading-none text-muted-foreground\">\r\n              {user?.email}\r\n            </p>\r\n          </div>\r\n        </DropdownMenuLabel>\r\n        <DropdownMenuSeparator />\r\n        <DropdownMenuItem>\r\n          <LogOutButton />\r\n        </DropdownMenuItem>\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  );\r\n}\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components/login/LogOutButton.tsx",
      "content": "\"use client\";\r\n\r\nimport { signOut } from \"next-auth/react\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\nexport function LogOutButton() {\r\n  return (\r\n    <Button className=\"font-bold py-2 px-4 rounded\" onClick={() => signOut()}>\r\n      Sign Out\r\n    </Button>\r\n  );\r\n}\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components/login/SignInForm.tsx",
      "content": "\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { signIn } from \"next-auth/react\";\r\nimport { useRouter, useSearchParams } from \"next/navigation\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardContent,\r\n  CardFooter,\r\n} from \"@/components/ui/card\";\r\nimport Link from \"next/link\";\r\n\r\nexport default function SignInForm() {\r\n  const [username, setUserName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const router = useRouter();\r\n  const searchParams = useSearchParams();\r\n\r\n  const callbackUrl = searchParams.get(\"callbackUrl\") || \"/protected/dashboard\";\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError(\"\");\r\n\r\n    try {\r\n      const result = await signIn(\"credentials\", {\r\n        redirect: false,\r\n        username,\r\n        password,\r\n      });\r\n\r\n      if (result?.error) {\r\n        setError(\"Invalid email or password\");\r\n      } else {\r\n        router.push(callbackUrl); // Redirect to dashboard or home page\r\n      }\r\n    } catch (error) {\r\n      console.error(\"An error occurred:\", error);\r\n      setError(\"An error occurred. Please try again.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className=\"w-[350px]\">\r\n      <CardHeader>\r\n        <CardTitle>Sign In</CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"grid w-full items-center gap-4\">\r\n            <div className=\"flex flex-col space-y-1.5\">\r\n              <Input\r\n                id=\"user-name\"\r\n                placeholder=\"user name\"\r\n                type=\"text\"\r\n                value={username}\r\n                onChange={(e) => setUserName(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"flex flex-col space-y-1.5\">\r\n              <Input\r\n                id=\"password\"\r\n                placeholder=\"Password\"\r\n                type=\"password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n          {error && <p className=\"text-red-500 text-sm mt-2\">{error}</p>}\r\n          <CardFooter className=\"flex justify-between px-0 pt-4\">\r\n            <Button type=\"submit\">Sign In</Button>\r\n          </CardFooter>\r\n        </form>\r\n      </CardContent>\r\n      <CardFooter>\r\n        <Link href=\"/signup\" className=\"text-sm text-gray-500\">\r\n          {\"Don't have an account...?\"}\r\n          <Button variant=\"link\" className=\"ps-3 text-blue-500 font-bold\">\r\n            Sign Up\r\n          </Button>\r\n        </Link>\r\n      </CardFooter>\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components/login/SignupForm.tsx",
      "content": "import { redirect } from 'next/navigation';\nimport prisma from '@/services/prisma';\nimport bcrypt from 'bcryptjs';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport SignupResult from '@/components/login/SignupResult';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\n\nexport default function SignupForm({\n  searchParams,\n}: {\n  searchParams: { message: string };\n}) {\n  async function signUp(formData: FormData) {\n    'use server';\n\n    const name = formData.get('name') as string;\n    const email = formData.get('email') as string;\n    const username = formData.get('username') as string;\n    const password = formData.get('password') as string;\n\n    if (!name || !email || !username || !password) {\n      throw redirect('/signup?message=All fields are required');\n      return;\n    }\n\n    try {\n      const hashedPassword = await bcrypt.hash(password, 10);\n      await prisma.user.create({\n        data: {\n          name,\n          email,\n          username,\n          password: hashedPassword,\n        },\n      });\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw redirect('/signup?message=Failed to create user');\n    }\n    throw redirect('/signin?message=Sign up successful!');\n  }\n\n  return (\n    <div className='flex justify-center items-center h-screen'>\n      <Card className='w-[350px] shadow-md'>\n        <CardHeader>\n          <CardTitle>Sign Up</CardTitle>\n          <CardDescription>Create an account to get started</CardDescription>\n        </CardHeader>\n        <form action={signUp} className='space-y-4 max-w-md mx-auto'>\n          <CardContent>\n            <SignupResult message={searchParams.message} />\n            <div>\n              <Label htmlFor='name'>Name</Label>\n              <Input\n                type='text'\n                id='name'\n                name='name'\n                placeholder='Name'\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor='email'>Email</Label>\n              <Input\n                type='email'\n                id='email'\n                name='email'\n                placeholder='Email'\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor='username'>Username</Label>\n              <Input\n                type='text'\n                id='username'\n                name='username'\n                placeholder='Username'\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor='password'>Password</Label>\n              <Input\n                type='password'\n                id='password'\n                name='password'\n                placeholder='Password'\n                required\n              />\n            </div>\n          </CardContent>\n          <CardFooter>\n            <Button type='submit' className='w-full'>\n              Sign Up\n            </Button>\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  );\n}\n",
      "type": "registry:block"
    },
    {
      "path": "./components/login/SignupResult.tsx",
      "content": "'use client';\n\nimport { useEffect, useRef } from 'react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface SignupResultProps {\n  message?: string | null;\n}\n\nexport default function SignupResult({ message }: SignupResultProps) {\n  const { toast } = useToast();\n  const toastShownRef = useRef(false);\n\n  useEffect(() => {\n    if (message && !toastShownRef.current) {\n      const isError = message.includes('Failed');\n      console.log('Attempting to show toast:', { isError, message });\n\n      toast({\n        title: isError ? 'Error' : 'Success',\n        description: message,\n        variant: isError ? 'destructive' : 'success',\n        duration: 5000,\n      });\n\n      toastShownRef.current = true;\n    }\n  }, [message, toast]);\n\n  return null; // This component doesn't render anything visible\n}\n",
      "type": "registry:block"
    },
    {
      "path": "./components/providers/ThemeProvider.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { ThemeProvider as NextThemesProvider } from 'next-themes';\nimport { type ThemeProviderProps } from 'next-themes/dist/types';\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;\n}\n",
      "type": "registry:block"
    },
    {
      "path": "./components/ui/toaster.tsx",
      "content": "\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "./hooks/use-toast.ts",
      "content": "\"use client\"\r\n\r\n// Inspired by react-hot-toast library\r\nimport * as React from \"react\"\r\n\r\nimport type {\r\n  ToastActionElement,\r\n  ToastProps,\r\n} from \"@/components/ui/toast\"\r\n\r\nconst TOAST_LIMIT = 1\r\nconst TOAST_REMOVE_DELAY = 1000000\r\n\r\ntype ToasterToast = ToastProps & {\r\n  id: string\r\n  title?: React.ReactNode\r\n  description?: React.ReactNode\r\n  action?: ToastActionElement\r\n}\r\n\r\ntype ActionTypes = {\r\n  ADD_TOAST: \"ADD_TOAST\";\r\n  UPDATE_TOAST: \"UPDATE_TOAST\";\r\n  DISMISS_TOAST: \"DISMISS_TOAST\";\r\n  REMOVE_TOAST: \"REMOVE_TOAST\";\r\n};\r\n\r\nconst actionTypes: ActionTypes = {\r\n  ADD_TOAST: \"ADD_TOAST\",\r\n  UPDATE_TOAST: \"UPDATE_TOAST\",\r\n  DISMISS_TOAST: \"DISMISS_TOAST\",\r\n  REMOVE_TOAST: \"REMOVE_TOAST\",\r\n} as const;\r\n\r\n// Use actionTypes somewhere in your code to avoid the unused variable error\r\nconsole.log(actionTypes.ADD_TOAST);\r\n\r\nlet count = 0\r\n\r\nfunction genId() {\r\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\r\n  return count.toString()\r\n}\r\n\r\ntype ActionType = typeof actionTypes\r\n\r\ntype Action =\r\n  | {\r\n      type: ActionType[\"ADD_TOAST\"]\r\n      toast: ToasterToast\r\n    }\r\n  | {\r\n      type: ActionType[\"UPDATE_TOAST\"]\r\n      toast: Partial<ToasterToast>\r\n    }\r\n  | {\r\n      type: ActionType[\"DISMISS_TOAST\"]\r\n      toastId?: ToasterToast[\"id\"]\r\n    }\r\n  | {\r\n      type: ActionType[\"REMOVE_TOAST\"]\r\n      toastId?: ToasterToast[\"id\"]\r\n    }\r\n\r\ninterface State {\r\n  toasts: ToasterToast[]\r\n}\r\n\r\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\r\n\r\nconst addToRemoveQueue = (toastId: string) => {\r\n  if (toastTimeouts.has(toastId)) {\r\n    return\r\n  }\r\n\r\n  const timeout = setTimeout(() => {\r\n    toastTimeouts.delete(toastId)\r\n    dispatch({\r\n      type: \"REMOVE_TOAST\",\r\n      toastId: toastId,\r\n    })\r\n  }, TOAST_REMOVE_DELAY)\r\n\r\n  toastTimeouts.set(toastId, timeout)\r\n}\r\n\r\nexport const reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case \"ADD_TOAST\":\r\n      return {\r\n        ...state,\r\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\r\n      }\r\n\r\n    case \"UPDATE_TOAST\":\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) =>\r\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\r\n        ),\r\n      }\r\n\r\n    case \"DISMISS_TOAST\": {\r\n      const { toastId } = action\r\n\r\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\r\n      // but I'll keep it here for simplicity\r\n      if (toastId) {\r\n        addToRemoveQueue(toastId)\r\n      } else {\r\n        state.toasts.forEach((toast) => {\r\n          addToRemoveQueue(toast.id)\r\n        })\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) =>\r\n          t.id === toastId || toastId === undefined\r\n            ? {\r\n                ...t,\r\n                open: false,\r\n              }\r\n            : t\r\n        ),\r\n      }\r\n    }\r\n    case \"REMOVE_TOAST\":\r\n      if (action.toastId === undefined) {\r\n        return {\r\n          ...state,\r\n          toasts: [],\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\r\n      }\r\n  }\r\n}\r\n\r\nconst listeners: Array<(state: State) => void> = []\r\n\r\nlet memoryState: State = { toasts: [] }\r\n\r\nfunction dispatch(action: Action) {\r\n  memoryState = reducer(memoryState, action)\r\n  listeners.forEach((listener) => {\r\n    listener(memoryState)\r\n  })\r\n}\r\n\r\ntype Toast = Omit<ToasterToast, \"id\">\r\n\r\nfunction toast({ ...props }: Toast) {\r\n  const id = genId()\r\n\r\n  const update = (props: ToasterToast) =>\r\n    dispatch({\r\n      type: \"UPDATE_TOAST\",\r\n      toast: { ...props, id },\r\n    })\r\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\r\n\r\n  dispatch({\r\n    type: \"ADD_TOAST\",\r\n    toast: {\r\n      ...props,\r\n      id,\r\n      open: true,\r\n      onOpenChange: (open) => {\r\n        if (!open) dismiss()\r\n      },\r\n    },\r\n  })\r\n\r\n  return {\r\n    id: id,\r\n    dismiss,\r\n    update,\r\n  }\r\n}\r\n\r\nfunction useToast() {\r\n  const [state, setState] = React.useState<State>(memoryState)\r\n\r\n  React.useEffect(() => {\r\n    listeners.push(setState)\r\n    return () => {\r\n      const index = listeners.indexOf(setState)\r\n      if (index > -1) {\r\n        listeners.splice(index, 1)\r\n      }\r\n    }\r\n  }, [state])\r\n\r\n  return {\r\n    ...state,\r\n    toast,\r\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\r\n  }\r\n}\r\n\r\nexport { useToast, toast }\r\n",
      "type": "registry:hook"
    },
    {
      "path": "./lib/totp.ts",
      "content": "import { TOTP } from 'totp-generator';\n\nexport function generateTOTP(secret: string): { otp: string; expires: number } {\n  console.log('generating TOTP', secret);\n  const { otp, expires } = TOTP.generate(secret);\n\n  return { otp, expires };\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "./lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "./middleware.ts",
      "content": "import { NextResponse } from 'next/server';\nimport { auth } from '@/auth';\n\nexport default auth((req) => {\n  const isProtectedRoute =\n    req.nextUrl.pathname.startsWith('/protected') ||\n    req.nextUrl.pathname.startsWith('/api/protected');\n\n  if (isProtectedRoute && !req.auth) {\n    // Add the original URL as a callbackUrl query parameter\n    const signInUrl = new URL('/signin', req.url);\n\n    signInUrl.searchParams.set('callbackUrl', req.nextUrl.pathname);\n\n    return NextResponse.redirect(signInUrl);\n  }\n});\n\nexport const config = {\n  matcher: ['/((?!api|_next/static|_next/image|favicon.ico).*)'],\n};\n",
      "type": "registry:example",
      "target": "./middleware.ts"
    },
    {
      "path": "./services/prisma.ts",
      "content": "import { PrismaClient } from \"@prisma/client\"\n\nconst prisma = new PrismaClient()\n\nexport default prisma",
      "type": "registry:example",
      "target": "./services/prisma.ts"
    },
    {
      "path": "./styles/global.css",
      "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 3.9%;\n    --primary: 240 5.9% 10%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 240 4.8% 95.9%;\n    --secondary-foreground: 240 5.9% 10%;\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n    --accent: 240 4.8% 95.9%;\n    --accent-foreground: 240 5.9% 10%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 5.9% 90%;\n    --input: 240 5.9% 90%;\n    --ring: 240 10% 3.9%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem\n  }\n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 240 5.9% 10%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 240 3.7% 15.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 240 4.9% 83.9%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%\n  }\n}\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}",
      "type": "registry:example",
      "target": "./styles/global.css"
    },
    {
      "path": "./tsconfig.json",
      "content": "{\n  \"compilerOptions\": {\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n",
      "type": "registry:example",
      "target": "~/tsconfig.json"
    }
  ],
  "tailwind": {},
  "cssVars": {},
  "meta": {}
}
