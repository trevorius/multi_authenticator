{
  "name": "2fa-totp",
  "type": "registry:block",
  "dependencies": [
    "@prisma/client",
    "@radix-ui/react-icons",
    "@radix-ui/react-label",
    "@radix-ui/react-slot",
    "@radix-ui/react-toast",
    "@types/bcryptjs",
    "bcryptjs",
    "class-variance-authority",
    "clsx",
    "lucide-react",
    "next-auth",
    "tailwind-merge",
    "tailwindcss-animate"
  ],
  "devDependencies": [
    "autoprefixer",
    "prisma"
  ],
  "registryDependencies": [
    "alert",
    "button",
    "card",
    "input",
    "label",
    "toast"
  ],
  "files": [
    {
      "path": "./.gitignore",
      "content": "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.js\n.yarn/install-state.gz\n\n# testing\n/coverage\n\n# next.js\n/.next/\n/out/\n\n# production\n/build\n\n# misc\n.DS_Store\n*.pem\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# local env files\n.env*.local\n.env.**\n.env\n\n# vercel\n.vercel\n\n# typescript\n*.tsbuildinfo\n# next-env.d.ts\nprisma/dev.db\nprisma/dev.db-journal\n",
      "type": "registry:example",
      "target": "~/.gitignore"
    },
    {
      "path": "./README.md",
      "content": "This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\n\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\n",
      "type": "registry:example",
      "target": "~/README.md"
    },
    {
      "path": "./authWithCredentials.json",
      "content": "",
      "type": "registry:example",
      "target": "~/authWithCredentials.json"
    },
    {
      "path": "./postcss.config.js",
      "content": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n",
      "type": "registry:example",
      "target": "~/postcss.config.js"
    },
    {
      "path": "./prisma/migrations/20241014112709_init/migration.sql",
      "content": "-- CreateTable\nCREATE TABLE \"User\" (\n    \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    \"email\" TEXT NOT NULL,\n    \"username\" TEXT NOT NULL,\n    \"name\" TEXT\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"User_email_key\" ON \"User\"(\"email\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"User_username_key\" ON \"User\"(\"username\");\n",
      "type": "registry:example",
      "target": "~/prisma/migrations/20241014112709_init/migration.sql"
    },
    {
      "path": "./prisma/migrations/20241014115814_added_password_to_user/migration.sql",
      "content": "/*\n  Warnings:\n\n  - Added the required column `password` to the `User` table without a default value. This is not possible if the table is not empty.\n\n*/\n-- RedefineTables\nPRAGMA defer_foreign_keys=ON;\nPRAGMA foreign_keys=OFF;\nCREATE TABLE \"new_User\" (\n    \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    \"email\" TEXT NOT NULL,\n    \"username\" TEXT NOT NULL,\n    \"name\" TEXT,\n    \"password\" TEXT NOT NULL\n);\nINSERT INTO \"new_User\" (\"email\", \"id\", \"name\", \"username\") SELECT \"email\", \"id\", \"name\", \"username\" FROM \"User\";\nDROP TABLE \"User\";\nALTER TABLE \"new_User\" RENAME TO \"User\";\nCREATE UNIQUE INDEX \"User_email_key\" ON \"User\"(\"email\");\nCREATE UNIQUE INDEX \"User_username_key\" ON \"User\"(\"username\");\nPRAGMA foreign_keys=ON;\nPRAGMA defer_foreign_keys=OFF;\n",
      "type": "registry:example",
      "target": "~/prisma/migrations/20241014115814_added_password_to_user/migration.sql"
    },
    {
      "path": "./prisma/migrations/migration_lock.toml",
      "content": "# Please do not edit this file manually\n# It should be added in your version-control system (i.e. Git)\nprovider = \"sqlite\"",
      "type": "registry:example",
      "target": "~/prisma/migrations/migration_lock.toml"
    },
    {
      "path": "./prisma/schema.prisma",
      "content": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  username String @unique\n  name  String?\n  password String\n}",
      "type": "registry:example",
      "target": "~/prisma/schema.prisma"
    },
    {
      "path": "./app/api/auth/[...nextauth]/route.ts",
      "content": "import { handlers } from \"@/auth\"\n\nexport const { GET, POST } = handlers\n",
      "type": "registry:example",
      "target": "./app/api/auth/[...nextauth]/route.ts"
    },
    {
      "path": "./app/layout.tsx",
      "content": "import { SessionProvider } from 'next-auth/react';\r\nimport '@/styles/global.css';\r\nimport { Toaster } from '@/components/ui/toaster';\r\n\r\nexport const metadata = {\r\n  title: 'Next.js',\r\n  description: 'Generated by Next.js',\r\n};\r\n\r\nexport default function RootLayout({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  return (\r\n    <html lang='en'>\r\n      <body>\r\n        <SessionProvider>{children}</SessionProvider>\r\n        <Toaster />\r\n      </body>\r\n    </html>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": "./app/layout.tsx"
    },
    {
      "path": "./app/page.tsx",
      "content": "import AuthStatus from '@/components/AuthStatus'\n\nexport default function Home() {\n  return (\n    <div>\n      <h1>Welcome to my app</h1>\n      <AuthStatus />\n    </div>\n  )\n}\n",
      "type": "registry:example",
      "target": "./app/page.tsx"
    },
    {
      "path": "./app/signin/page.tsx",
      "content": "import SignInForm from '@/components/login/SignInForm';\nimport SignupResult from '@/components/login/SignupResult';\nexport default function SignInPage({\n  searchParams,\n}: {\n  searchParams: { message: string };\n}) {\n  return (\n    <div className='flex min-h-screen items-center justify-center bg-gray-100'>\n      <SignupResult message={searchParams.message} />\n      <SignInForm />\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": "./app/signin/page.tsx"
    },
    {
      "path": "./app/signup/page.tsx",
      "content": "import SignUpForm from \"@/components/login/SignupForm\"\n\n\n\nexport default function SignUpPage({\n  searchParams\n}: {\n  searchParams: { message: string }\n}) {\n  return (\n    <div>\n      <SignUpForm searchParams={searchParams}/>\n    </div>\n  )\n}",
      "type": "registry:example",
      "target": "./app/signup/page.tsx"
    },
    {
      "path": "./auth.ts",
      "content": "import NextAuth from \"next-auth\"\nimport Credentials from \"next-auth/providers/credentials\"\nimport bcrypt from 'bcryptjs'\nimport prisma from \"@/services/prisma\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    Credentials({\n      // The name to display on the sign in form (e.g. \"Sign in with...\")\n      name: \"Credentials\",\n      // The credentials is used to generate a suitable form on the sign in page.\n      // You can specify whatever fields you are expecting to be submitted.\n      credentials: {\n        username: { label: \"Username\", type: \"text\", placeholder: \"jsmith\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      authorize: async (credentials, request) => {\n        // let user = null;\n        \n        // const AdminUser = { id: \"1\", name: \"Admin\",username: \"admin\", email: \"admin@example.com\", password: \"admin\" }\n\n        //   if (credentials.username === AdminUser.username && credentials.password === AdminUser.password) {\n        //     return AdminUser\n        //   }\n        //   return null\n\n        if (!credentials?.username || !credentials?.password) {\n          return null\n        }\n\n        try {\n          // Find the user in the database\n          const user = await prisma.user.findUnique({\n            where: { username: credentials.username }\n          })\n\n          if (!user) {\n            return null\n          }\n\n          // Compare the provided password with the hashed password in the database\n          const isPasswordValid = await bcrypt.compare(credentials.password, user.password)\n\n          if (!isPasswordValid) {\n            return null\n          }\n\n          // Return user object if validation is successful\n          return {\n            id: user.id,\n            name: user.name,\n            username: user.username,\n            email: user.email\n          }\n        } catch (error) {\n          console.error('Error during authentication:', error)\n          return null\n        } finally {\n          await prisma.$disconnect()\n        }\n\n      }\n\n    \n    })\n  ],\n})\n\n",
      "type": "registry:example",
      "target": "./auth.ts"
    },
    {
      "path": "./components/AuthStatus.tsx",
      "content": "\n'use client'\n\nimport { useSession } from \"next-auth/react\"\nimport { signIn, signOut } from \"next-auth/react\"\nimport Link from \"next/link\"\n\nexport default function AuthStatus() {\n  const { data: session, status } = useSession()\n\n  if (status === \"loading\") {\n    return <div>Loading...</div>\n  }\n\n  if (status === \"unauthenticated\") {\n    return (\n      <div>\n        <h2 className=\"text-2xl font-bold\">You are not signed in.</h2>\n        <Link href=\"/signin\">\n            <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\" >Sign In</button>\n        </Link>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <h2 className=\"text-2xl font-bold\">Signed in as {session?.user?.name}</h2>\n      <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\" onClick={() => signOut()}>Sign Out</button>\n    </div>\n  )\n}\n",
      "type": "registry:block"
    },
    {
      "path": "./components/login/SignInForm.tsx",
      "content": "'use client'\n\nimport { useState } from \"react\"\nimport { signIn } from \"next-auth/react\"\nimport { useRouter } from \"next/navigation\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Card, CardHeader, CardTitle, CardContent, CardFooter } from \"@/components/ui/card\"\nimport Link from \"next/link\"\n\nexport default function SignInForm() {\n  const [username, setUserName] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [error, setError] = useState(\"\")\n  const router = useRouter()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError(\"\")\n\n    try {\n      const result = await signIn(\"credentials\", {\n        redirect: false,\n        username,\n        password,\n      })\n\n      if (result?.error) {\n        setError(\"Invalid email or password\")\n      } else {\n        router.push(\"/\") // Redirect to dashboard or home page\n      }\n    } catch (error) {\n      setError(\"An error occurred. Please try again.\")\n    }\n  }\n\n  return (\n    <Card className=\"w-[350px]\">\n      <CardHeader>\n        <CardTitle>Sign In</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit}>\n          <div className=\"grid w-full items-center gap-4\">\n            <div className=\"flex flex-col space-y-1.5\">\n              <Input\n                id=\"user-name\"\n                placeholder=\"user name\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUserName(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"flex flex-col space-y-1.5\">\n              <Input\n                id=\"password\"\n                placeholder=\"Password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n              />\n            </div>\n          </div>\n          {error && <p className=\"text-red-500 text-sm mt-2\">{error}</p>}\n          <CardFooter className=\"flex justify-between px-0 pt-4\">\n            <Button type=\"submit\">Sign In</Button>\n          </CardFooter>\n        </form>\n      </CardContent>\n      <CardFooter>\n        <Link href=\"/signup\" className=\"text-sm text-gray-500\">Don't have an account...? \n        <Button \n        variant=\"link\"\n        className=\"ps-3 text-blue-500 font-bold\">Sign Up</Button>\n        </Link>\n      </CardFooter>\n    </Card>\n  )\n}\n",
      "type": "registry:block"
    },
    {
      "path": "./components/login/SignupForm.tsx",
      "content": "import { redirect } from 'next/navigation';\nimport prisma from '@/services/prisma';\nimport bcrypt from 'bcryptjs';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport SignupResult from '@/components/login/SignupResult';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\n\nexport default function SignupForm({\n  searchParams,\n}: {\n  searchParams: { message: string };\n}) {\n  async function signUp(formData: FormData) {\n    'use server';\n\n    const name = formData.get('name') as string;\n    const email = formData.get('email') as string;\n    const username = formData.get('username') as string;\n    const password = formData.get('password') as string;\n\n    if (!name || !email || !username || !password) {\n      throw redirect('/signup?message=All fields are required');\n      return;\n    }\n\n    try {\n      const hashedPassword = await bcrypt.hash(password, 10);\n      await prisma.user.create({\n        data: {\n          name,\n          email,\n          username,\n          password: hashedPassword,\n        },\n      });\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw redirect('/signup?message=Failed to create user');\n    }\n    throw redirect('/signin?message=Sign up successful!');\n  }\n\n  return (\n    <div className='flex justify-center items-center h-screen'>\n      <Card className='w-[350px] shadow-md'>\n        <CardHeader>\n          <CardTitle>Sign Up</CardTitle>\n          <CardDescription>Create an account to get started</CardDescription>\n        </CardHeader>\n        <form action={signUp} className='space-y-4 max-w-md mx-auto'>\n          <CardContent>\n            <SignupResult message={searchParams.message} />\n            <div>\n              <Label htmlFor='name'>Name</Label>\n              <Input\n                type='text'\n                id='name'\n                name='name'\n                placeholder='Name'\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor='email'>Email</Label>\n              <Input\n                type='email'\n                id='email'\n                name='email'\n                placeholder='Email'\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor='username'>Username</Label>\n              <Input\n                type='text'\n                id='username'\n                name='username'\n                placeholder='Username'\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor='password'>Password</Label>\n              <Input\n                type='password'\n                id='password'\n                name='password'\n                placeholder='Password'\n                required\n              />\n            </div>\n          </CardContent>\n          <CardFooter>\n            <Button type='submit' className='w-full'>\n              Sign Up\n            </Button>\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  );\n}\n",
      "type": "registry:block"
    },
    {
      "path": "./components/login/SignupResult.tsx",
      "content": "'use client';\n\nimport { useEffect, useRef } from 'react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface SignupResultProps {\n  message?: string | null;\n}\n\nexport default function SignupResult({ message }: SignupResultProps) {\n  const { toast } = useToast();\n  const toastShownRef = useRef(false);\n\n  useEffect(() => {\n    if (message && !toastShownRef.current) {\n      const isError = message.includes('Failed');\n      console.log('Attempting to show toast:', { isError, message });\n\n      toast({\n        title: isError ? 'Error' : 'Success',\n        description: message,\n        variant: isError ? 'destructive' : 'success',\n        duration: 5000,\n      });\n\n      toastShownRef.current = true;\n    }\n  }, [message, toast]);\n\n  return null; // This component doesn't render anything visible\n}\n",
      "type": "registry:block"
    },
    {
      "path": "./components/ui/toaster.tsx",
      "content": "\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "./hooks/use-toast.ts",
      "content": "\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n",
      "type": "registry:hook"
    },
    {
      "path": "./lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "./middleware.ts",
      "content": "export { auth as middleware } from \"@/auth\"\n",
      "type": "registry:example",
      "target": "./middleware.ts"
    },
    {
      "path": "./services/prisma.ts",
      "content": "import { PrismaClient } from \"@prisma/client\"\n\nconst prisma = new PrismaClient()\n\nexport default prisma",
      "type": "registry:example",
      "target": "./services/prisma.ts"
    },
    {
      "path": "./styles/global.css",
      "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 3.9%;\n    --primary: 240 5.9% 10%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 240 4.8% 95.9%;\n    --secondary-foreground: 240 5.9% 10%;\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n    --accent: 240 4.8% 95.9%;\n    --accent-foreground: 240 5.9% 10%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 5.9% 90%;\n    --input: 240 5.9% 90%;\n    --ring: 240 10% 3.9%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem\n  }\n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 240 5.9% 10%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 240 3.7% 15.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 240 4.9% 83.9%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%\n  }\n}\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}",
      "type": "registry:example",
      "target": "./styles/global.css"
    },
    {
      "path": "./tsconfig.json",
      "content": "{\n  \"compilerOptions\": {\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n",
      "type": "registry:example",
      "target": "~/tsconfig.json"
    }
  ],
  "tailwind": {},
  "cssVars": {},
  "meta": {}
}
